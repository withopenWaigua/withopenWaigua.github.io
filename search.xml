<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++vector</title>
    <url>/20297.html</url>
    <content><![CDATA[<p><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">vector</span></p>
<h2 id="vector类简介"><a href="#vector类简介" class="headerlink" title="vector类简介"></a>vector类简介</h2><p>标准库</p>
<p>代表集合和动态数组的概念</p>
<p>我们可以把若干对象放在里面（类型单一，第一个是什么，这个数组就是什么类型的）</p>
<p>vector能把其他对象装进来，也被称为容器</p>
<p>要include进来</p>
<p>使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vjihe; <span class="comment">//表示vjihe的vector类型保存的数据是int型</span></span><br></pre></td></tr></table></figure>

<p><int>： 模板，vector本身就是类模板，<int>实际上就是类模板的实例化； 实例化int类型的vector模板</p>
<p>可以把vector<XXX> 当成一种类型  在&lt;&gt;内部放上类型信息</p>
<p>类似vector<int> 才是一个完整的类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vjihe;</span><br><span class="line">vector&lt;student&gt; studlist;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; strchuang;  <span class="comment">//可以该集合里面的每个元素都是vector&lt;string&gt;对象；集合套集合</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>*&gt; vjihe2;</span><br><span class="line"><span class="comment">//vector&lt;int&amp;&gt; vjihe3; 不行，引用不是对象，而是个引用</span></span><br></pre></td></tr></table></figure>





<h2 id="定义和初始化vector"><a href="#定义和初始化vector" class="headerlink" title="定义和初始化vector"></a>定义和初始化vector</h2><ol>
<li>空的vector对象，定义一个string类型的空的vector对象（容器），目前这个mystr里面不包含任何元素</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; mystr;</span><br></pre></td></tr></table></figure>

<p>插入内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mystr.<span class="built_in">push_back</span>(<span class="string">&quot;sdaasd&quot;</span>);</span><br><span class="line">mystr.<span class="built_in">push_back</span>(<span class="string">&quot;sdaasdsd&quot;</span>);</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>用元素拷贝的初始化方式</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">mystr2</span><span class="params">(mystr)</span></span>;  <span class="comment">//元素的值拷贝出来了一份，互不影响</span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">vector&lt;string&gt; mystr2 = mystr;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>通过列表初始化给值</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; mystr3 = &#123; <span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>创建指定数量的元素。有元素数量概念的时候一般用圆括号</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt;  <span class="title">jihe23</span><span class="params">(<span class="number">15</span>, <span class="number">999</span>)</span></span>;  <span class="comment">//创建15个int元素，每个元素都是999</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">jihe4</span><span class="params">(<span class="number">4</span>, <span class="string">&quot;hello&quot;</span>)</span></span>; <span class="comment">//创建4个string类型的元素，每个元素的值都是hello</span></span><br><span class="line"><span class="comment">//int不给值就会每个元素都是0</span></span><br><span class="line"><span class="comment">//string不给值每个值都是“”</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li><p>多种初始化方式  </p>
<p>（）一般表示元素数量，{}一般表示元素内容的概念，但不绝对。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">jihe77</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//创建10个为0的vector数组</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; jihe88&#123;<span class="number">20</span>&#125;;<span class="comment">//表示一个元素，该元素为10</span></span><br></pre></td></tr></table></figure>



<p>特殊（但不建议这么使用）：</p>
<ul>
<li>类型与{}内的内容吻合就会正常初始化列表</li>
<li>不吻合就会把{}内的数字当作创建几个元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; ju&#123; <span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">// 系统发现10和类型不匹配，所以把10当成元素数量，每个元素都是&quot;&quot;vector&lt;string&gt; ff&#123; 10,&quot;hello&quot; &#125;; //10个元素，每个元素都是hello、</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; ju&#123; &quot;hello&quot; &#125;; </span></span><br><span class="line"><span class="comment">//但这种无法解释，直接就会报错</span></span><br></pre></td></tr></table></figure>



<h2 id="vector对象上的操作"><a href="#vector对象上的操作" class="headerlink" title="vector对象上的操作"></a>vector对象上的操作</h2><p>最常用的是不知道vector对象里面需要放多少元素，需要动态增加和减少。</p>
<ol>
<li><p>判断是否为空：.empty()</p>
</li>
<li><p>用于向vector增加一个元素：.push_back()</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; ivec;ivec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>用于查询元素个数：.size()</li>
</ol>
<ol start="4">
<li>clear：用于清空全部元素</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ivec.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>v[n]：访问第n个元素，范围是0-v.size()-1</li>
</ol>
<ol start="6">
<li>=：赋值运算符，会把原来的清空</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; sss;</span><br><span class="line">sss.<span class="built_in">push_back</span>(<span class="number">2</span>);sss = ivec; <span class="comment">//原来的2没了</span></span><br></pre></td></tr></table></figure>



<ol start="7">
<li>==以及!=用与判断相等或者不相等，完全相等：元素个数相同,且对应位置的元素值必须也要相等</li>
</ol>
<ol start="8">
<li>范围for的应用</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vecvalue&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vecitem : vecvalue) &#123;	</span><br><span class="line">	cout &lt;&lt; vecitem &lt;&lt; endl;	</span><br><span class="line">    vecitem *= <span class="number">2</span>;	</span><br><span class="line">    cout &lt;&lt; vecitem &lt;&lt; endl;C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vecvalue&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;<span class="keyword">for</span> (<span class="keyword">auto</span> vecitem : vecvalue) &#123;	</span><br><span class="line">	cout &lt;&lt; vecitem &lt;&lt; endl;	</span><br><span class="line">	vecvalue.<span class="built_in">push_back</span>(<span class="number">33</span>); </span><br><span class="line"> &#125;<span class="comment">//导致输出彻底乱套，范围for是用来遍历这个vector的,第一次遍历会记录这个容器的末尾值，当你插入或删除容器内的元素，会导致末位置发生改变，从而使编译器输出发生问题	vecitem *= 2;	cout &lt;&lt; vecitem &lt;&lt; endl;	</span></span><br></pre></td></tr></table></figure>



<p>打印结果乱套了:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210619231446200.png" alt="image-20210619231446200"></p>
<p><strong>牢记:在for语句遍历（遍历一个容器等等类似的操作中），千万不要改动vector容器的容量，增加或者删除都不可以；</strong></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的string类型简介</title>
    <url>/undefined.html</url>
    <content><![CDATA[<p><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">string类型简介</span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C的类型:int 、float、char</p>
<p>C++标准库定义的类型：string</p>
<p>string:可变长字符串的处理。vector一种集合或容器的概念</p>
<h2 id="string类型简介"><a href="#string类型简介" class="headerlink" title="string类型简介"></a>string类型简介</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">&quot;i love china&quot;</span>; <span class="comment">//C里面用字符数组来表示字符串</span></span><br></pre></td></tr></table></figure>

<p>C++标准模库中的类型，代表一个可变长的字符串</p>
<p>string要用include包含一下</p>
<p>sting这个类型，看成一个类型式（类似于结构）</p>
<h3 id="定义和初始化string对象"><a href="#定义和初始化string对象" class="headerlink" title="定义和初始化string对象"></a>定义和初始化string对象</h3><p>五种初始化方式:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s1;</span><br><span class="line">string s2 = <span class="string">&quot;i love china&quot;</span>;  <span class="comment">//把这个字符串内容拷贝到s2代表的一段内存中。拷贝不包括末尾的\0（字符数组有）</span></span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;i love china&quot;</span>)</span></span>;</span><br><span class="line">string s4 = s2; <span class="comment">//把这个s2字符串内容拷贝到s4代表的一段内存中</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="function">string <span class="title">s5</span><span class="params">(num, <span class="string">&#x27;a&#x27;</span>)</span></span>; <span class="comment">//创建num个内存空间，并全部用‘a’填充，就是aaaaa，但会创建临时变量，效率低</span></span><br></pre></td></tr></table></figure>



<h3 id="string-对象的操作"><a href="#string-对象的操作" class="headerlink" title="string 对象的操作"></a>string 对象的操作</h3><ol>
<li>判断是否为空   .empty()</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;is empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>返回字节/字符数量，代表该字符串长度  （unsigned int）  .size()/.length()</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">//0</span></span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">length</span>() &lt;&lt; endl; <span class="comment">//0</span></span><br><span class="line">string s7 = <span class="string">&quot;我爱中国&quot;</span>;</span><br><span class="line">cout &lt;&lt; s7.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">//8</span></span><br><span class="line">cout &lt;&lt; s7.<span class="built_in">length</span>() &lt;&lt; endl; <span class="comment">//8 一个汉字2个字节，空格、英文都是1个</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>str[n]:返回的是第n个字符，n代表一个位置，位置从0开始，到.size()-1，超过范围会产生不可预测的影响。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; s7[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">s7[<span class="number">2</span>] = <span class="string">&#x27;好&#x27;</span>;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>字符串的连接 ： +</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; s2 + s3 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>字符串的赋值，=</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s7 = s3;</span><br><span class="line">cout &lt;&lt; s7 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>​    6. 判断字符串是否相等：==  大小写敏感</p>
<p>​        相等:长度相同，字符完全相同</p>
<ol start="7">
<li><p>判断字符串是否不相等：!=</p>
</li>
<li><p>返回一个字符串s中的内容指针。返回一个指向正规c字符串的指针常量，也就是以\0结尾（为了与C语言兼容，把string类型变成c语言字符串样式，加\0）</p>
<p>使用的方法</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s10 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = s10.<span class="built_in">c_str</span>(); <span class="comment">//指向ABC</span></span><br><span class="line"><span class="keyword">char</span> str333[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strcpy_s</span>(str333, <span class="built_in"><span class="keyword">sizeof</span></span>(str), p);</span><br><span class="line">cout &lt;&lt; str333 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>​       相反，C-&gt;C++字符串，用这种方式进行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">sss</span><span class="params">(str333)</span></span>;  <span class="comment">//也是一种初始化形式，是用C语言的字符串数组来初始化</span></span><br></pre></td></tr></table></figure>



<ol start="8">
<li>读写string对象</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s1;cin &gt;&gt; s1;  <span class="comment">//把键盘输入的空格全部省略去cout &lt;&lt; s1;</span></span><br></pre></td></tr></table></figure>



<ol start="9">
<li>+的注意事项</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s3 = <span class="string">&quot;asdas&quot;</span> + <span class="string">&quot;asdas&quot;</span>; <span class="comment">//不能允许这么加，不知道转换成什么类型string s4 = &quot;asdasd&quot;;string s5 = &quot;asdassad&quot;;sring  s6=  s4 + &quot;and&quot; + s6;//可以，发生了隐式转换 ，&quot;and&quot;知道怎么转换了</span></span><br></pre></td></tr></table></figure>



<ol start="10">
<li>范围for针对string的使用</li>
</ol>
<p>​    可以把string看成一个字符数列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s4 = <span class="string">&quot;i love china&quot;</span>;<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s4) &#123;    <span class="comment">//x = toupper(x);  可以把小写字符转换成大写字符    cout &lt;&lt; x &lt;&lt; endl; 	&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的函数新特性、内联函数、const详解</title>
    <url>/undefined.html</url>
    <content><![CDATA[<p><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">函数回顾和后置返回类型、内联函数、函数杂合用法总结、const char * 组合、形参带const</span></p>
<h2 id="函数回顾和后置返回类型"><a href="#函数回顾和后置返回类型" class="headerlink" title="函数回顾和后置返回类型"></a>函数回顾和后置返回类型</h2><p>函数定义中，形参如果在函数体内用不到的话，则可以不给形参变量名字，只给其类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> </span>&#123; <span class="comment">//不需要所以可以不给变量名</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span></span>; <span class="comment">//函数声明同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但最好还是都带上</span></span><br></pre></td></tr></table></figure>



<p>把函数返回类型放到函数名字之前，这种写法，叫做前置返回类型</p>
<p>C++还有后置返回类型:</p>
<ul>
<li>就是在函数声明和函数定义中，把返回类型放在参数列表之后</li>
</ul>
<p>格式：前面放auto，表示函数返回类型放在参数列表之后，而放在参数列表之后的返回类型是通过-&gt;开始的。</p>
<p>格式：auto  XXX(int a)  -&gt; 真类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func123</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> -&gt; <span class="keyword">void</span></span>; <span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func213</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> -&gt; <span class="keyword">void</span> </span>&#123;  <span class="comment">//函数定义</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：便于处理某些复杂的类型返回值声明</p>
<h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>将普通函数变成内联函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> testv)</span> </span>&#123; <span class="comment">//在函数定义前面加一个inline</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：函数定义放到头文件（一般都要互相引用）中会导致函数重复被定义，所以一般头文件只放函数的声明，不能放函数的定义，函数的定义放在CPP文件中</strong></p>
<p>但内联函数的定义一般就要放在头文件中。这样需要用到这个内联函数的CPP文件都能通过#include把这个内联函数源代码#include进来</p>
<p>（因为内联函数要用函数本体替换函数调用，所以声明那里直接写定义，以便找到函数的本体）</p>
<p>解决的问题：</p>
<ul>
<li>函数体很小，但调用很频繁的这种函数，我们要使用内联函数（inline）<ul>
<li>inline影响编译器，在编译阶段对inline这种函数进行处理，尝试通过<strong>调用该函数的动作替换为函数本体</strong>，来提升性能，减少频繁压栈和出栈影响内存。</li>
<li>但inline只是我们开发者对编译器的一个建议，编译器可以尝试去做，也可以不去做，这取决于编译器的诊断功能，决定权在编译器，我们不能控制</li>
</ul>
</li>
</ul>
<p>优点:</p>
<ol>
<li>提高效率</li>
</ol>
<p>缺点：</p>
<ol>
<li>造成代码膨胀，所以内联函数的函数体必须要越小越好（因为毕竟是放在头文件里的）</li>
<li>各种编译器对inline各不相同，难以保证效果</li>
</ol>
<p>注意：</p>
<ul>
<li>inline函数尽量简单，代码尽可能少，循环分支递归这些尽量不要出现在inline函数内，否则编译器可能因为函数复杂而拒绝将其作为内联函数</li>
<li>与constexpr一样，要尽可能简单，不然就会报错，可以看作更严格的内联函数</li>
<li>define宏展开也类似与内联函数，直接使用本体，但也有各种差别</li>
</ul>
<h2 id="函数杂合用法总结"><a href="#函数杂合用法总结" class="headerlink" title="函数杂合用法总结"></a>函数杂合用法总结</h2><ol>
<li>函数返回类型为void，表示函数不返回任何类型。但我们可以调用一个返回类型是void的函数，让它作为另一个返回类型是void函数的返回值</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">func1</span>();  <span class="comment">//返回另一个返回值是void的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>函数返回指针和返回引用的问题情况</p>
<p>返回指针：</p>
<p><strong>极大的问题：</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">mm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">9</span>;  <span class="comment">//不报错，但有巨大的隐患</span></span><br><span class="line">    <span class="keyword">return</span> &amp;t; <span class="comment">//返回了局部变量的地址，产生隐患，一调用完，局部变量就没了，会造成程序崩溃</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    正确的用法：使用全局变量代替局部变量赋值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> q = <span class="number">10</span> ; <span class="comment">//全局变量，地址不会发生改变，一直地址都有值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">mm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;q; <span class="comment">//全局变量，地址不会发生改变，一直地址都有值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>​        返回引用：</p>
<p>​        <strong>极大的问题：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同理也是巨大隐患</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">qq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">9</span>;</span><br><span class="line">    cout &lt;&lt; &amp;v &lt;&lt; endl; <span class="comment">//地址相同</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>&amp; k = <span class="built_in">qq</span>();</span><br><span class="line">    k = <span class="number">10</span>; <span class="comment">//往不存在的地址写了值，巨大隐患</span></span><br><span class="line">    cout &lt;&lt; &amp;k &lt;&lt; endl; <span class="comment">//地址相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        正确的用法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">qq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">9</span>;</span><br><span class="line">    cout &lt;&lt; &amp;v &lt;&lt; endl; <span class="comment">//地址不相同</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">qq</span>(); <span class="comment">//改了这个</span></span><br><span class="line">    k = <span class="number">10</span>; <span class="comment">//往存在新建的地址写了值，安全</span></span><br><span class="line">    cout &lt;&lt; &amp;k &lt;&lt; endl; <span class="comment">//地址不相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>牢记：不能调动局部变量的地址（返回的是局部变量地址的时候要时刻注意）</strong></p>
<ol start="3">
<li>没有形参可以报错形参列表为空或者写void</li>
<li>如果一个函数我们不调用的话，则该函数可以只有声明部分，没有函数调用部分</li>
<li>普通函数（不是inline函数），声明可以声明多次，定义只能定义一次。一般函数声明的CPP文件会inclide自己函数声明的文件.h</li>
<li>一般都是将实参的值拷贝一份给形参，（而使用引用作为形参可以改变原地址的值，且可以相当于返回多个return，函数一般只能一个return，并且节省内存，效率高）</li>
<li>在C++中更习惯使用引用类型的形参来取代指针类型的实参，提倡在C++中多使用引用类型形参</li>
<li>C++中函数允许同名，但形参列表数量，或者类型要有区别</li>
</ol>
<p>函数重载：</p>
<p>可以：</p>
<ol>
<li>类型不一样</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>形参数量不一样</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">float</span> b)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>不行：</p>
<ol>
<li>形参数量和类型一致</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>加上const常量标识修饰也不行</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>3.形参名字不同也没用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>





<h2 id="const-char-、char-const-、char-const-的区别"><a href="#const-char-、char-const-、char-const-的区别" class="headerlink" title="const char *、char const *、char *const 的区别"></a>const char *、char const *、char *const 的区别</h2><ul>
<li>const char* p的意思:</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = str;  <span class="comment">//代表p指向的东西不能通过p来修改</span></span><br><span class="line"><span class="comment">//*p = &#x27;y&#x27;; 错误</span></span><br><span class="line"><span class="comment">//str[0]=&#x27;y&#x27;; 可以</span></span><br></pre></td></tr></table></figure>



<ul>
<li>char const * 的意思：与 const char* p等价</li>
<li>char *const<ul>
<li>p一旦指向一个东西就不可以改变其他东西了，与常量一样</li>
<li>定义的时候必须初始化</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;i love china&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = str;  <span class="comment">//定义的时候必须初始化</span></span><br><span class="line">*p = <span class="string">&#x27;y&#x27;</span>;   		  <span class="comment">//p一旦指向一个东西就不可以改变其他东西了，与常量一样</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"><span class="comment">//p++; 不行</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<p>常量指针不能改常量值，</p>
<p>指针常量不可以改指针。</p>
<ul>
<li>const char * const  == char const  * const：同理p的指向和p指向的值都不能改变，直接限制死了</li>
</ul>
<p>同理引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">1232</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; a = c; <span class="comment">//同理值不能通过a来修改</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span>&amp; a = c; <span class="comment">//同理值不能通过a来修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = <span class="number">31</span>; <span class="comment">//可以，不同于int&amp;b=31不行，就能跟常量绑定在一起了 //还可以拿来使用，也分配了内存了</span></span><br></pre></td></tr></table></figure>



<h2 id="函数形参中带const"><a href="#函数形参中带const" class="headerlink" title="函数形参中带const"></a>函数形参中带const</h2><p>更加推荐在形参前面加const</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func411</span><span class="params">(<span class="keyword">const</span> student&amp; stu)</span> </span>&#123;</span><br><span class="line">    stu.num = <span class="number">1000</span>;<span class="comment">//非法，不能改变它的值了</span></span><br><span class="line">    <span class="comment">//学习在形参里面加入const的写法的习惯，不会无意改值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dasd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    c = <span class="number">100</span>;<span class="comment">//非法，不能改变它的值了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>加入const可以防止你无意修改了形参的值</p>
</li>
<li><p>使形参的值更加灵活</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func411</span><span class="params">( student&amp; stu)</span> </span>&#123;</span><br><span class="line">    stu.num = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func412</span><span class="params">(<span class="keyword">const</span> student&amp; stu)</span> </span>&#123;</span><br><span class="line">    stu.num = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	student ac;</span><br><span class="line">	<span class="keyword">const</span> student&amp; av = ac;</span><br><span class="line">	<span class="built_in">func411</span>(av); <span class="comment">//不行 ,因为形参不是常量引用，而代入的是常量引用</span></span><br><span class="line">    <span class="built_in">func412</span>(av); <span class="comment">//可以</span></span><br><span class="line">    <span class="built_in">func412</span>(ac); <span class="comment">//可以，既可以接受普通的类型以及常量类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>引用形参还能直接用常量代入</li>
<li>引用也推荐与const组合 </li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dasd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dasd</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的auto、头文件防卫、引用、常量</title>
    <url>/undefined.html</url>
    <content><![CDATA[<p><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">auto、头文件防卫式声明、引用、常量</span></p>
<p>局部变量及初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i的作用域仅仅在for语句内    </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以写作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i&#123; <span class="number">0</span> &#125;; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//i=0  == i&#123;0&#125; == i=&#123;0&#125; 数组同理</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int abcde &#123;3.5f&#125;; //失败， 从“float”转换到“int”需要收缩转换，系统执行了一个从浮点到整数的转换</span></span><br></pre></td></tr></table></figure>



<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>auto变量的自动类型推断</p>
<p>auto可以在声明变量的时候根据变量的初始值类型自动为此变量选择匹配的类型；（声明的时候要赋初值）</p>
<p>auto自动类型推断发生在编译期间，所以使用auto不会造成程序执行效率降低</p>
<h2 id="头文件防卫式声明"><a href="#头文件防卫式声明" class="headerlink" title="头文件防卫式声明"></a>头文件防卫式声明</h2><p>容易重定义，多次定义一个变量，引用别人的头文件，全局变量重定义</p>
<p>#ifdef ,ifndef 条件编译</p>
<p>#ifndef 标识符  当标志符没有定义过（没有用#define定义），则对程序段进行编译</p>
<p>​    //程序段</p>
<p>#endif</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HEAD1__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HEAD1__   <span class="comment">//没有定义head1就定义head1</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写头文件程序代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !__HEAD1__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用理解成，为变量起了另外一个名字，一般用符合&amp;表示，起完别名后和变量本身看成同一个变量；</p>
<ul>
<li>定义引用并不额外占用内存，或理解为引用和原变量，占用的是同一块内存</li>
<li>定义引用的时候必须初始化</li>
<li>引用，&amp;的符号在=的左边</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refval = value; <span class="comment">//value的别名,不是求地址运算符，只是起标识作用</span></span><br><span class="line"><span class="comment">//定义引用并不额外占用内存，或理解为引用和原变量，占用的是同一块内存</span></span><br><span class="line"><span class="comment">//定义引用的时候必须初始化</span></span><br><span class="line">cout &lt;&lt; refval &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line"><span class="comment">//int&amp; refval13 = 10; 错误，引用必须绑定到变量上去，不能绑定到常量上去</span></span><br><span class="line"><span class="comment">//float &amp;refval23 = value; 错误，引用类型必须要相同</span></span><br></pre></td></tr></table></figure>



<p>要和取地址区别开来。</p>
<ul>
<li>&amp;在=的右边</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>* p = &amp;a; <span class="comment">//取地址</span></span><br></pre></td></tr></table></figure>





<p>实例：</p>
<p><strong>可以改变函数值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ta, <span class="keyword">int</span>&amp; tb)</span> <span class="comment">//注意形参是引用类型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ta = <span class="number">4</span>;</span><br><span class="line">    tb = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">14</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;  <span class="comment">//打印13</span></span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;  <span class="comment">//打印14</span></span><br><span class="line">    <span class="built_in">func</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;  <span class="comment">//打印4</span></span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;  <span class="comment">//打印5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量就是不变的量</p>
<h3 id="const-常量关键字，表示不变的意思"><a href="#const-常量关键字，表示不变的意思" class="headerlink" title="const 常量关键字，表示不变的意思"></a>const 常量关键字，表示不变的意思</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> var = <span class="number">7</span>;  <span class="comment">//一种承诺，表示这个变量的值我不会去改变（命名常量）</span></span><br></pre></td></tr></table></figure>



<p>实际上const可以改，但一般不要去改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;var2 = (<span class="keyword">int</span> &amp;)var;  <span class="comment">//强原来的const变量转成引用</span></span><br><span class="line">var2 = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>



<p><strong>vs查地址  shift + F9</strong> </p>
<p><strong>搜索的名字求地址要加&amp;  ，求值就直接写变量名</strong></p>
<h3 id="constexpr-关键字"><a href="#constexpr-关键字" class="headerlink" title="constexpr 关键字"></a>constexpr 关键字</h3><p>C++11才引入的，它也是个常量的概念，在编译的时候求值，可以提升性能</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> abc)</span> </span>&#123;  <span class="comment">//这个函数里面必须要有初值，参数，或者在函数体内写 int ab=10;这种</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> var2 = <span class="built_in">func2</span>(<span class="number">11</span>); <span class="comment">//不报错，因为系统认为这是常量函数，返回一个常量</span></span><br><span class="line"><span class="comment">//int b=11；</span></span><br><span class="line"><span class="comment">//constexpr int var2 = b;  //报错，因为系统不认为b是常量，它可以改，是变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>常量const/constexpr 必须包含参量</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的结构、权限修饰、类简介</title>
    <url>/undefined.html</url>
    <content><![CDATA[<p><span id="gray-block"><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">结构体、权限修饰符、类简介、类的组织</span></span></p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体是自定义的数据类型</p>
<table>
<thead>
<tr>
<th></th>
<th>名称</th>
<th>值</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>◢</td>
<td>&amp;student1</td>
<td>0x0100faf0 {number=10001 name=0x0100faf4 “zhangsan” }</td>
<td>studnet *</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>名称</th>
<th>值</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>◢</td>
<td>&amp;tmpstu</td>
<td>0x00cff920 {number=10001 name=0x00cff924 “zhangsan” }</td>
<td>studnet *</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studnet</span>&#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(studnet tmpstu)</span></span>&#123;</span><br><span class="line">    tmpstu.number = <span class="number">3000</span>;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(tmpstu.name, <span class="built_in"><span class="keyword">sizeof</span></span>(tmpstu.name), <span class="string">&quot;who&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(studnet &amp;tmpstu)</span> </span>&#123;</span><br><span class="line">    tmpstu.number = <span class="number">3000</span>;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(tmpstu.name, <span class="built_in"><span class="keyword">sizeof</span></span>(tmpstu.name), <span class="string">&quot;who&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(studnet* ptmpstu)</span> </span>&#123;</span><br><span class="line">    ptmpstu-&gt;number = <span class="number">6000</span>; <span class="comment">//不能用.了，指针改变成员变量需要用-&gt;指向成员变量</span></span><br><span class="line">    <span class="built_in">strcpy_s</span>(ptmpstu-&gt;name, <span class="built_in"><span class="keyword">sizeof</span></span>(ptmpstu-&gt;name), <span class="string">&quot;you&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">    studnet student1; <span class="comment">//定义结构变量</span></span><br><span class="line">    student1.number = <span class="number">10001</span>;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(student1.name, <span class="built_in"><span class="keyword">sizeof</span></span>(student1.name), <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    cout &lt;&lt; student1.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; student1.number &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(student1);<span class="comment">//值没有被函数改变 ，效率低，实参传递给形参的时候发生了一个内存内容的拷贝，内存地址结构体和外面的实参不同</span></span><br><span class="line">    <span class="built_in">func2</span>(student1);<span class="comment">//值改变了，效率高，因为使用了引用，结构体内的形参的内存地址和外面的实参地址一样</span></span><br><span class="line">    <span class="built_in">func3</span>(&amp;student1);<span class="comment">//值改变了， -&gt;指向运算符</span></span><br><span class="line">    cout &lt;&lt; student1.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; student1.number &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>C++与C中的结构区别：</p>
<ul>
<li><p>C++中的结构除了具备C中结构的所有功能外。还增加许多扩展功能，最突出的功能之一是：不仅仅有成员变量，还可以在其中定义成员函数(方法) 调用：student.func1()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studnet</span>&#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;  <span class="comment">//扩充的功能</span></span><br><span class="line">        number++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++里面叫做类</li>
</ul>
</li>
</ul>
<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><ul>
<li><p>分为public(公有)和private(私有)以及protected(保护)</p>
</li>
<li><p>public:公有的意思，用这个修饰结构/类中的成员变量/成员函数，就可以被外部访问。一般需要被外界访问的东西我们就定义为public。好像该类的外部接口</p>
<ul>
<li>```C++<br>struct studnet{<pre><code>//成员变量
</code></pre>
public:  //结构体默认都为public，所以加不加都行<pre><code>int number;  // 外部不可以访问，离什么近就是什么类型
char name[100];
void func() &#123;
    number++;  //里面的才可以访问
    return;
&#125;
</code></pre>
};<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- private：私有的意思，用这个修饰符 修饰结构/类中的成员变量/成员函数/只有被内部定义的成员函数才能使用。</span><br><span class="line"></span><br><span class="line">  - ```C++</span><br><span class="line">    struct studnet&#123;</span><br><span class="line">        //成员变量</span><br><span class="line">    private:</span><br><span class="line">        int number;  // 外部不可以访问，离什么近就是什么类型</span><br><span class="line">        char name[100];</span><br><span class="line">        void func() &#123;</span><br><span class="line">            number++;  //里面的才可以访问</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="类简介"><a href="#类简介" class="headerlink" title="类简介"></a>类简介</h2><p>类也是用户自定义的数据类型</p>
<ul>
<li>不管C还是C++，结构都用struct定义</li>
<li>而为了理解可以把C语言中结构当成C++中类；但这个话并不全面</li>
</ul>
<p>结构和类的区别</p>
<ul>
<li>类这个东西只有C++才有，C没有</li>
<li>结构用struct定义，类用class定义</li>
<li>在C中我们定义一个属于该结构的变量，我们叫做结构变量。</li>
<li>在C++中我们定义一个属于该类的变量，我们叫做对象。</li>
<li>但结构变量也好，对象也好，他们都是一块能够存储数据并且具有某种类型的内存空间。</li>
</ul>
<p>他们极为类似，区别主要有两点:</p>
<ol>
<li>C++结构内部的成员变量以及成员函数，默认都为public<ul>
<li>C++类内部的成员变量以及成员函数，默认访问级别都是private</li>
</ul>
</li>
<li>C++结构体继承默认都是public，但类的继承默认都是private</li>
</ol>
<p>额外说明：</p>
<ol>
<li>标准C++库里面包含了大量丰富的类和函数。例如string</li>
<li>一般C++都是使用类而不是结构体</li>
</ol>
<h2 id="类的组织"><a href="#类的组织" class="headerlink" title="类的组织"></a>类的组织</h2><p>书写规范</p>
<ol>
<li>类的定义(定义变量，以及函数声明)一般放在.h头文件中（头文件名可以和类名相同）</li>
<li>类实现的代码可以放在一个CPP源文件里面（可以以类名定义）,文件一定要添加到项目中来；</li>
<li>在主函数中要使用这个类就得include头文件</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//放于student.h里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">studnet</span> &#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>; <span class="comment">//函数的声明</span></span><br><span class="line">&#125;;  <span class="comment">//写在头文件中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//放于student.cppl里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studnet::func</span><span class="params">()</span> </span>&#123;<span class="comment">//函数的实现</span></span><br><span class="line">    number++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210619094115422.png"></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的范围for语句、动态内存分配、nullptr</title>
    <url>/undefined.html</url>
    <content><![CDATA[<p><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">C++的范围for语句、动态内存分配、nullptr </span></p>
<h2 id="范围for语句"><a href="#范围for语句" class="headerlink" title="范围for语句"></a>范围for语句</h2><p>F9加断点，F10往下一格</p>
<p>用于遍历一个序列</p>
<p>方式一：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> v[]&#123; <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x: v) <span class="comment">//遍历数组中每个元素，依次放入x中并打印x值，</span></span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多了个拷贝的过程</span></span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> y : &#123; <span class="number">11</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">134</span>,<span class="number">1232</span> &#125;) &#123;</span><br><span class="line">	cout &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式三:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : v) &#123;</span><br><span class="line">	cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接用引用，省了拷贝的过程，提高了效率</span></span><br></pre></td></tr></table></figure>



<h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><p>C中供程序使用的存储空间，有程序区，静态存储区，动态存储区。</p>
<p>C++我们把内存进一步详细分为：</p>
<ol>
<li>栈：函数内的局部变量都会放在这里，由编译器自动分配和释放</li>
<li>堆：程序员用，malloc/new分配，用free/delete来释放。忘记释放后，系统会回收</li>
<li>全局/静态存储区：放全局变量和静态变量static。程序结束时系统释放</li>
<li>常量存储区：“i love china”</li>
<li>程序代码区</li>
</ol>
<p>堆和栈不同的用途和区别：</p>
<ol>
<li>栈的空间是有限的。例int a =4； 自动给你4个字节的空间，分配速度快，程序员也控制不了</li>
<li>堆:只要不超出你实际拥有的物理内存，也在操作系统允许你能够分配的最大内存大小之内都可以分配给你</li>
<li>堆的分配速度比栈慢，你可以随时使用malloc/new来分配，free/delete来释放，非常灵活。</li>
</ol>
<ul>
<li><p>在c语言一般用malloc和free从堆中分配和释放内存使用，malloc和free 是函数带（）</p>
<ul>
<li><p>malloc（memory allocation）：动态内存分配</p>
</li>
<li><p>```c++<br>void <em>malloc(int NumBytes);<br>//bymbytes:要分配的字节数 （void</em>可以被强制转换成任何指针）<br>//分配成功则返回指向被分配内存的指针，分配失败则返回NULL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```c++</span><br><span class="line">  int *p = NULL; //c语言写法，等价于数字0</span><br><span class="line">  p = (int *)malloc(sizeof(int));// 在堆里面分配4个字节 ,void *是万能指针，要用适当的来给它强转</span><br><span class="line">  if (p != NULL) &#123;</span><br><span class="line">  	*p = 5; //指针加*=取值，把值变成5</span><br><span class="line">  	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">  	free(p); //必须要释放掉</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void *malloc(int NumBytes); </p>
<ul>
<li><p>bymbytes:要分配的字节数 （void<em>可以被强制转换成任何指针），*<em>所以malloc前面要强转成你想要的</em></em></p>
</li>
<li><p>分配成功则返回指向被分配内存的指针，分配失败则返回NULL</p>
</li>
<li><p>当不需要使用这块内存的时候，你应该使用free()函数来将内存释放掉，供其他地方使用</p>
</li>
</ul>
</li>
<li><p>void free(void* FirstByte); （free一个malloc指针）</p>
<ul>
<li>将之前用malloc分配的内存空间还给程序（操作系统），也就是说释放了这块内存，这样这块内存就被系统回收</li>
<li>并在需要的时候将系统分配出去再给其他地方使用</li>
</ul>
<p>字符串的malloc/free</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>; <span class="comment">//c语言写法，等价于数字0</span></span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));<span class="comment">// 在堆里面分配4个字节 ,void *是万能指针，要用适当的来给它强转</span></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(p,<span class="number">100</span>, <span class="string">&quot;hello world!&quot;</span>); <span class="comment">//更安全的字符串拷贝函数，防止内存溢出崩溃 ,第二个参数填最多多少个字节，溢出了就会有提醒</span></span><br><span class="line">	cout &lt;&lt; p &lt;&lt; endl; <span class="comment">//字符串指针=字符串的值</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>好好解读以下程序:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) *<span class="number">100</span>); <span class="comment">//分配可以存下放的下100个整数的内存空间</span></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="keyword">int</span>* q = p;</span><br><span class="line">	*q++ = <span class="number">1</span>;  <span class="comment">//等价与 *（q++） --&gt; *q= 1  q++（跳了4个内存地址，因为为整型指针）</span></span><br><span class="line">	*q++ = <span class="number">5</span>;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;  <span class="comment">//p指针没动，还在第一个，但q指针改变了它指向的值</span></span><br><span class="line">	cout &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//q指针在p指针移动前改变了p指针指向的后一个值</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在C++一般使用new和delete来分配和释放内存，它们不是函数,是运算符(标识符)。C++中就用new/delete中分配和释放内存，不再使用malloc和free来分配和释放内存</p>
</li>
</ul>
<p>new/delete 和malloc，free干了一样的事情，就是分配和释放内存。同时new，delete还干了更多的事情。</p>
<p>使用方法：</p>
<ol>
<li><p>指针类型名 = new 类型标识符;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* myint = <span class="keyword">new</span> <span class="keyword">int</span>;  <span class="comment">//int* p = (int*)malloc(sizeof(int) * 100)</span></span><br><span class="line"><span class="keyword">if</span> (myint != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	*myint = <span class="number">8</span>;</span><br><span class="line">	cout &lt;&lt; *myint &lt;&lt; endl;</span><br><span class="line">	<span class="built_in"><span class="keyword">delete</span></span>(myint);  <span class="comment">//释放单个myint空间</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>指针类型名 = new 类型标识符(初始值) ;   //注意这里是使用圆括号括起来，表示初始值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* myint = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">18</span>);  <span class="comment">//int* p = (int*)malloc(sizeof(int) * 100)</span></span><br><span class="line"><span class="keyword">if</span> (myint != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	cout &lt;&lt; *myint &lt;&lt; endl; <span class="comment">//打印18</span></span><br><span class="line">	<span class="built_in"><span class="keyword">delete</span></span>(myint);  <span class="comment">//释放单个myint空间</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>指针类型名 = new 类型标识符[内存单元个数]  //注意使用[]来代表单元个数</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="keyword">int</span>* q = p;</span><br><span class="line">	*q++ = <span class="number">1</span>; <span class="comment">//给数组[0]赋值</span></span><br><span class="line">	*q++ = <span class="number">5</span>; <span class="comment">//给数组[1]赋值</span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; endl;  <span class="comment">//p+1 指针+1 =跳了4个字节内存地址</span></span><br><span class="line">	<span class="keyword">delete</span>[] p; <span class="comment">//释放int p的数组空间</span></span><br><span class="line">				<span class="comment">//new时候我们用[]，那么delete就必须使用[]，[]不用写数组大小</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<ul>
<li>配对使用，有malloc成功就必须要有free，有free成功，就必须要有delete</li>
<li>free/delete 不能重复调用</li>
</ul>
<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>代表的是空指针</p>
<p>nullptr能够避免在整数和指针之间发生混淆</p>
<p>typeid().name() 可以查看类型</p>
<p>NULL和nullptr 满足 NULL == nullptr</p>
<p>但实际上是不同的类型</p>
<p>结论：对于指针的初始化，和以往用到的和指针有关NULL的场合，能用nullptr的都用nullptr取代NULL</p>
<p>nullptr认为是真的指针类型</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的迭代器简介、容器的迭代器、迭代器各类操作</title>
    <url>/undefined.html</url>
    <content><![CDATA[<p><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">迭代器简介、容器的迭代器、迭代器各类操作</span></p>
<h2 id="迭代器简介"><a href="#迭代器简介" class="headerlink" title="迭代器简介"></a>迭代器简介</h2><p>迭代器就是一种变量容器内元素的数据类型，这种数据类型有点像指着，我们理解为迭代器就是用来指向容器中某个元素。</p>
<p>string\vector,有[]，但很少用[]，一般使用迭代器，有些不能使用[]，但迭代器是都有的，比较通用</p>
<p>通过迭代器，我们可以读取容器中的元素值，读string中的每个字符，还可以修改迭代器所指向的元素值</p>
<p>有类似++、–的操作</p>
<p>容器还有：list、map（基本都定义了相关的迭代器、[]不一定有）</p>
<p>尽量使用迭代器来访问容器里面的元素；</p>
<h2 id="容器的迭代器类型"><a href="#容器的迭代器类型" class="headerlink" title="容器的迭代器类型"></a>容器的迭代器类型</h2><p>定义一个对应的迭代器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; iv = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter;<span class="comment">//定义迭代器，迭代器类型也必须和上面的vector容器的类型相同</span></span><br></pre></td></tr></table></figure>

<p>我们可以把vector<int>::iterator  理解成一个类型，这种类型就专门用作迭代器；</p>
<p>当我们用这个类型定义一个变量的时候，这个变量就是个迭代器，这个iter这个变量就是一个迭代器。</p>
<h3 id="迭代器begin-end-操作，方向迭代器rbegin-、rend-操作"><a href="#迭代器begin-end-操作，方向迭代器rbegin-、rend-操作" class="headerlink" title="迭代器begin()\end()操作，方向迭代器rbegin()、rend()操作"></a>迭代器begin()\end()操作，方向迭代器rbegin()、rend()操作</h3><p>begin和end方法用来返回迭代类型</p>
<p>rbegin()、rend()也是用来返回迭代类型，但是反着</p>
<ol>
<li>begin()返回一个迭代类型，就是返回一个迭代器</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">iter = iv.<span class="built_in">begin</span>();  <span class="comment">//如果容器中有元素，则begin返回的迭代器指向的是容器中的第一个元素；</span></span><br><span class="line"><span class="comment">//相当于iter指向了iv vector容器中的iv[0]</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>begin()返回一个迭代类型，就是返回一个迭代器</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">iter = iv.<span class="built_in">end</span>(); <span class="comment">//返回的迭代器指向的不是末端元素而是末端元素的后面，指向的就是一个不存在的元素</span></span><br></pre></td></tr></table></figure>

<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210620005222475.png" alt="image-20210620005222475"></p>
<p><strong>(如果一个容器是空的，那么begin和end返回的迭代器都相同)</strong></p>
<p>可以把end当作岗哨，begin与end重合代表遍历完了</p>
<p>for遍历:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator iter = iv.<span class="built_in">begin</span>(); iter != iv.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; endl;  <span class="comment">//把他当成指针处理就行</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h3><p>想要从后往前遍历就会使用到反向迭代器</p>
<p>用的是rbegin()和rend();</p>
<p>rbegin:返回一个反向迭代器类型，指向反向迭代器的第一个元素</p>
<p>rend：返回一个反向迭代器类型，指向反向迭代器的最后元素的下一个空位置</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210620092912027.png" alt="image-20210620092912027"></p>
<p>begin、end和iterator 以及 rbegin、rend和reverse_iterator都要成对使用</p>
<p><strong>反向迭代器就不是iterator了，是reverse_iterator</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::reverse_iterator riter = iv.<span class="built_in">rbegin</span>(); riter != iv.<span class="built_in">rend</span>(); riter++) &#123; <span class="comment">//注意reverse_iterator</span></span><br><span class="line">        cout &lt;&lt; *riter &lt;&lt; endl;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="迭代器运算符"><a href="#迭代器运算符" class="headerlink" title="迭代器运算符"></a>迭代器运算符</h2><ol>
<li>*iter：返回iter所指向元素的引用，必须要保证这个迭代器所指向的元素是有效的元素，不能是end所指向的元素，因为end指向的是一个不存在的元素</li>
<li>iter++、++iter：自加1，类型于指针，但指向end后再++会报错，指向end就不能加加了</li>
<li>–iter、iter–：自减1，指向容器的上一个/前一个元素，如果指向头了就不能够–了</li>
<li>==/!=：判断两个迭代器是否相等，如果指向的是相同一个元素就相等，否则就不相等。</li>
<li>指向结构体容器的迭代器</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;student&gt; st;</span><br><span class="line">student mystu;</span><br><span class="line">mystu.num = <span class="number">100</span>;</span><br><span class="line">st.<span class="built_in">push_back</span>(mystu);<span class="comment">//把对象mystu赋值/拷贝(不是同一块内存)到了st容器中；</span></span><br><span class="line">vector&lt;student&gt;::iterator iter;</span><br><span class="line">iter = st.<span class="built_in">begin</span>();</span><br><span class="line">cout &lt;&lt; (*iter).num &lt;&lt; endl;  <span class="comment">//*iter代表结构成员，结构体成员变量用.来取结构体变量</span></span><br><span class="line">cout &lt;&lt; iter-&gt;num &lt;&lt; endl;  <span class="comment">//指针用-&gt;取结构体成员的结构体变量</span></span><br></pre></td></tr></table></figure>





<h2 id="const-iterator迭代器"><a href="#const-iterator迭代器" class="headerlink" title="const_iterator迭代器"></a>const_iterator迭代器</h2><p>const_iterator：表示这个迭代器指向的值不能改变，而不是这个迭代器本身指向的元素不能改变，可以不断指向下一个元素，只能从容器中读容器，感觉起来更像常量指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">51</span>,<span class="number">31</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::const_iterator citer = vec.<span class="built_in">begin</span>();</span><br><span class="line">cout &lt;&lt; *citer &lt;&lt; endl;</span><br><span class="line">*citer = <span class="number">100</span>;<span class="comment">//报错，不能修改，使用常量迭代器才不会报错</span></span><br></pre></td></tr></table></figure>



<p>必须使用const_vector迭代器的情况：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">51</span>,<span class="number">31</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator citer = vec.<span class="built_in">begin</span>();  <span class="comment">//报错，因为容器是常量的vector容器，用常规的迭代器能改值，与这个容器矛盾，使用必须要用const_iterator</span></span><br><span class="line">cout &lt;&lt; *citer &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<p>常量or const迭代器一般要取决于vector的类型</p>
<h2 id="cbegin-和cend-操作"><a href="#cbegin-和cend-操作" class="headerlink" title="cbegin()和cend()操作"></a>cbegin()和cend()操作</h2><p>C++11引入的两个新的函数</p>
<p>跟begin和end类型，cbegin和cend返回的都是常量迭代器(const_iterator)；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">51</span>,<span class="number">31</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator citer = vec.<span class="built_in">cbegin</span>(); <span class="comment">//报错，返回的是常量迭代器，与前面的普通迭代器相矛盾</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::const_iterator citer = vec.<span class="built_in">cbegin</span>();<span class="comment">// 可以</span></span><br></pre></td></tr></table></figure>





<h2 id="迭代器失效问题"><a href="#迭代器失效问题" class="headerlink" title="迭代器失效问题"></a>迭代器失效问题</h2><p><strong>auto可以自动推断迭代器类型，因为右边的begin等返回的就是迭代器类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg=vec.<span class="built_in">begin</span>(), end=vec.<span class="built_in">end</span>(); beg != end; beg++) &#123;  <span class="comment">//for遍历也是涉及迭代器的一种操作</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3333</span>);</span><br><span class="line">    cout &lt;&lt; *beg &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在操作迭代器过程中（使用了迭代器这种循环体）,千万不要改变vector容器中的容量，也就是不要增加或删除vector容器中的元素</p>
<p>往容器中增加或删除容器中的元素，这些操作可能会使指向容器中元素的指针、引用、迭代器失效。</p>
<p>失效代表不能再代表容器中的元素，一旦失效的东西，很多情况下，程序会直接崩溃；</p>
<p>一定要增加元素的操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg=vec.<span class="built_in">begin</span>(), end=vec.<span class="built_in">end</span>(); beg != end; beg++) &#123;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3333</span>);  <span class="comment">//一旦增加或删除元素，就立马跳出循环，从新再加载一次循环</span></span><br><span class="line">     <span class="keyword">break</span>;  <span class="comment">//important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg = vec.<span class="built_in">begin</span>(), end = vec.<span class="built_in">end</span>(); beg != end; beg++) &#123;</span><br><span class="line">     <span class="comment">//..........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="灾难程序演示"><a href="#灾难程序演示" class="headerlink" title="灾难程序演示"></a>灾难程序演示</h2><ol>
<li>插入：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (beg != end) &#123;</span><br><span class="line">   cout &lt;&lt; *beg &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//可以使用insert插入新值</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(beg, <span class="number">80</span>);<span class="comment">//第一个参数放插入位置，第二个参数放插入的值。</span></span><br><span class="line">        <span class="comment">//这一插入会导致迭代器失效</span></span><br><span class="line">        <span class="comment">//具体那个迭代器失效，取决vector容器的内部实现原理。</span></span><br><span class="line">        <span class="comment">//最明智的做法就是break出循环体；</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   beg++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>2.释放:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = vec.<span class="built_in">begin</span>(); iter != vec.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">     vec.<span class="built_in">erase</span>(iter);  <span class="comment">//移除iter位置上的元素，返回下一个元素的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>正确释放的方法1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (iter != vec.<span class="built_in">end</span>()) &#123;  <span class="comment">//每次end都更新</span></span><br><span class="line">     iter = vec.<span class="built_in">erase</span>(iter); <span class="comment">// 返回下一个元素的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>正确释放的方法2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (!vec.<span class="built_in">empty</span>()) &#123;   <span class="comment">//保证不到空的值，不空就把第一个值删掉</span></span><br><span class="line">    <span class="keyword">auto</span> iter = vec.<span class="built_in">begin</span>(); <span class="comment">//只删第一个值</span></span><br><span class="line">    vec.<span class="built_in">erase</span>(iter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="用迭代器遍历string类型数据"><a href="#用迭代器遍历string类型数据" class="headerlink" title="用迭代器遍历string类型数据"></a>用迭代器遍历string类型数据</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str&#123; <span class="string">&quot;i love china&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = str.<span class="built_in">begin</span>(); iter != str.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">    *iter = <span class="built_in">toupper</span>(*iter);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br></pre></td></tr></table></figure>





<h2 id="vector容器常用操作与内存释放"><a href="#vector容器常用操作与内存释放" class="headerlink" title="vector容器常用操作与内存释放"></a>vector容器常用操作与内存释放</h2><p>实战案例：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210620113918549.png" alt="image-20210620113918549"></p>
<p>其中：      conflist = { size=2 }</p>
<p>​                 pconf1 = 0x008b0940 {itemname=0x008b0940 “ServerName” itemcontent=0x008b0968 “1区” }</p>
<p>​                 pconf2  = 0x008b1ac0 {itemname=0x008b1ac0 “ServerID” itemcontent=0x008b1ae8 “10000” }</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">conf</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> itemname[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">char</span> itemcontent[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getinfo</span><span class="params">(vector&lt;conf*&gt;&amp; conflist, <span class="keyword">const</span> <span class="keyword">char</span>* pitem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> pos = conflist.<span class="built_in">begin</span>(); pos != conflist.<span class="built_in">end</span>(); pos++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stricmp((*pos)-&gt;itemname, pitem) == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> (*pos)-&gt;itemcontent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    conf* pconf1 = <span class="keyword">new</span> conf;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf1-&gt;itemname , <span class="built_in"><span class="keyword">sizeof</span></span>(pconf1-&gt;itemname) , <span class="string">&quot;ServerName&quot;</span>); <span class="comment">//创建服务器名</span></span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf1-&gt;itemcontent, <span class="built_in"><span class="keyword">sizeof</span></span>(pconf1-&gt;itemcontent), <span class="string">&quot;1区&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    conf* pconf2 = <span class="keyword">new</span> conf;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf2-&gt;itemname, <span class="built_in"><span class="keyword">sizeof</span></span>(pconf2-&gt;itemname), <span class="string">&quot;ServerID&quot;</span>); <span class="comment">//服务器id</span></span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf2-&gt;itemcontent, <span class="built_in"><span class="keyword">sizeof</span></span>(pconf2-&gt;itemcontent), <span class="string">&quot;10000&quot;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;conf*&gt; conflist;</span><br><span class="line">    conflist.<span class="built_in">push_back</span>(pconf1);</span><br><span class="line">    conflist.<span class="built_in">push_back</span>(pconf2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* p = <span class="built_in">getinfo</span>(conflist, <span class="string">&quot;ServerName&quot;</span>); <span class="comment">//输出1区</span></span><br><span class="line">    cout &lt;&lt; p &lt;&lt; endl; <span class="comment">//字符串指针=值，所以直接输入p取整个即可 *p=区字符串第一个元素值</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//释放内存的问题，自己new的就要自己释放</span></span><br><span class="line">    vector&lt;conf*&gt;::iterator pos;  <span class="comment">//创建一个结构体指针的容器的迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (pos = conflist.<span class="built_in">begin</span>(); pos != conflist.<span class="built_in">end</span>(); pos++) &#123;</span><br><span class="line">        <span class="comment">//必须删除new出来的蓝色内存</span></span><br><span class="line">        <span class="built_in"><span class="keyword">delete</span></span> (*pos); <span class="comment">//*pos才是真正那个指针 *pos=取值，取的是&lt;conf*&gt;里面的conf * ，就是结构体指针</span></span><br><span class="line">        			<span class="comment">//没有破坏迭代器，只是把指向的内存删了，内存无效了</span></span><br><span class="line">    &#125;</span><br><span class="line">    conflist.<span class="built_in">clear</span>();<span class="comment">//系统也会自己帮你释放，因为容器的内存已经无效了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>​     </p>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
</search>
