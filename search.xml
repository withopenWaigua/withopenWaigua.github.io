<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++的string类型简介</title>
    <url>/20298.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">string类型简介</span></strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><strong>C的类型:int 、float、char</strong></p>
<p><strong>C++标准库定义的类型：string</strong></p>
<p><strong>string:可变长字符串的处理。vector一种集合或容器的概念</strong></p>
<h2 id="string类型简介"><a href="#string类型简介" class="headerlink" title="string类型简介"></a><strong>string类型简介</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">&quot;i love china&quot;</span>; <span class="comment">//C里面用字符数组来表示字符串</span></span><br></pre></td></tr></table></figure>

<p><strong>C++标准模库中的类型，代表一个可变长的字符串</strong></p>
<p><strong>string要用include包含一下</strong></p>
<p><strong>sting这个类型，看成一个类型式（类似于结构）</strong></p>
<h3 id="定义和初始化string对象"><a href="#定义和初始化string对象" class="headerlink" title="定义和初始化string对象"></a><strong>定义和初始化string对象</strong></h3><p><strong>五种初始化方式:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s1;</span><br><span class="line">string s2 = <span class="string">&quot;i love china&quot;</span>;  <span class="comment">//把这个字符串内容拷贝到s2代表的一段内存中。拷贝不包括末尾的\0（字符数组有）</span></span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;i love china&quot;</span>)</span></span>;</span><br><span class="line">string s4 = s2; <span class="comment">//把这个s2字符串内容拷贝到s4代表的一段内存中</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="function">string <span class="title">s5</span><span class="params">(num, <span class="string">&#x27;a&#x27;</span>)</span></span>; <span class="comment">//创建num个内存空间，并全部用‘a’填充，就是aaaaa，但会创建临时变量，效率低</span></span><br></pre></td></tr></table></figure>



<h3 id="string-对象的操作"><a href="#string-对象的操作" class="headerlink" title="string 对象的操作"></a><strong>string 对象的操作</strong></h3><ol>
<li><strong>判断是否为空   .empty()</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;is empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>返回字节/字符数量，代表该字符串长度  （unsigned int）  .size()/.length()</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">//0</span></span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">length</span>() &lt;&lt; endl; <span class="comment">//0</span></span><br><span class="line">string s7 = <span class="string">&quot;我爱中国&quot;</span>;</span><br><span class="line">cout &lt;&lt; s7.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">//8</span></span><br><span class="line">cout &lt;&lt; s7.<span class="built_in">length</span>() &lt;&lt; endl; <span class="comment">//8 一个汉字2个字节，空格、英文都是1个</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>str[n]:返回的是第n个字符，n代表一个位置，位置从0开始，到.size()-1，超过范围会产生不可预测的影响。</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; s7[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">s7[<span class="number">2</span>] = <span class="string">&#x27;好&#x27;</span>;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><strong>字符串的连接 ： +</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; s2 + s3 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<ol start="5">
<li><strong>字符串的赋值，=</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s7 = s3;</span><br><span class="line">cout &lt;&lt; s7 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<hr>
<p>​    <strong>6. 判断字符串是否相等：==  大小写敏感</strong></p>
<p>​        <strong>相等:长度相同，字符完全相同</strong></p>
<ol start="7">
<li><p><strong>判断字符串是否不相等：!=</strong></p>
</li>
<li><p><strong>返回一个字符串s中的内容指针。返回一个指向正规c字符串的指针常量，也就是以\0结尾（为了与C语言兼容，把string类型变成c语言字符串样式，加\0）</strong></p>
<p><strong>使用的方法</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s10 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = s10.<span class="built_in">c_str</span>(); <span class="comment">//指向ABC</span></span><br><span class="line"><span class="keyword">char</span> str333[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strcpy_s</span>(str333, <span class="built_in"><span class="keyword">sizeof</span></span>(str), p);</span><br><span class="line">cout &lt;&lt; str333 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>​       <strong>相反，C-&gt;C++字符串，用这种方式进行</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">sss</span><span class="params">(str333)</span></span>;  <span class="comment">//也是一种初始化形式，是用C语言的字符串数组来初始化</span></span><br></pre></td></tr></table></figure>



<ol start="8">
<li><strong>读写string对象</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s1;cin &gt;&gt; s1;  <span class="comment">//把键盘输入的空格全部省略去cout &lt;&lt; s1;</span></span><br></pre></td></tr></table></figure>



<ol start="9">
<li><strong>+的注意事项</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s3 = <span class="string">&quot;asdas&quot;</span> + <span class="string">&quot;asdas&quot;</span>; <span class="comment">//不能允许这么加，不知道转换成什么类型string s4 = &quot;asdasd&quot;;string s5 = &quot;asdassad&quot;;sring  s6=  s4 + &quot;and&quot; + s6;//可以，发生了隐式转换 ，&quot;and&quot;知道怎么转换了</span></span><br></pre></td></tr></table></figure>



<ol start="10">
<li><strong>范围for针对string的使用</strong></li>
</ol>
<p>​    <strong>可以把string看成一个字符数列</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s4 = <span class="string">&quot;i love china&quot;</span>;<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s4) &#123;    <span class="comment">//x = toupper(x);  可以把小写字符转换成大写字符    cout &lt;&lt; x &lt;&lt; endl; 	&#125;</span></span><br></pre></td></tr></table></figure>

<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>

]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++vector</title>
    <url>/20297.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">vector</span></strong></p>
<h2 id="vector类简介"><a href="#vector类简介" class="headerlink" title="vector类简介"></a><strong>vector类简介</strong></h2><p><strong>标准库</strong></p>
<p><strong>代表集合和动态数组的概念</strong></p>
<p><strong>我们可以把若干对象放在里面（类型单一，第一个是什么，这个数组就是什么类型的）</strong></p>
<p><strong>vector能把其他对象装进来，也被称为容器</strong></p>
<p><strong>要include进来</strong></p>
<p><strong>使用：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vjihe; <span class="comment">//表示vjihe的vector类型保存的数据是int型</span></span><br></pre></td></tr></table></figure>

<p><strong><int>： 模板，vector本身就是类模板，<int>实际上就是类模板的实例化； 实例化int类型的vector模板</strong></p>
<p><strong>可以把vector<XXX> 当成一种类型  在&lt;&gt;内部放上类型信息</strong></p>
<p><strong>类似vector<int> 才是一个完整的类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vjihe;</span><br><span class="line">vector&lt;student&gt; studlist;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; strchuang;  <span class="comment">//可以该集合里面的每个元素都是vector&lt;string&gt;对象；集合套集合</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>*&gt; vjihe2;</span><br><span class="line"><span class="comment">//vector&lt;int&amp;&gt; vjihe3; 不行，引用不是对象，而是个引用</span></span><br></pre></td></tr></table></figure>





<h2 id="定义和初始化vector"><a href="#定义和初始化vector" class="headerlink" title="定义和初始化vector"></a><strong>定义和初始化vector</strong></h2><ol>
<li><strong>空的vector对象，定义一个string类型的空的vector对象（容器），目前这个mystr里面不包含任何元素</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; mystr;</span><br></pre></td></tr></table></figure>

<p><strong>插入内容：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mystr.<span class="built_in">push_back</span>(<span class="string">&quot;sdaasd&quot;</span>);</span><br><span class="line">mystr.<span class="built_in">push_back</span>(<span class="string">&quot;sdaasdsd&quot;</span>);</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>用元素拷贝的初始化方式</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">mystr2</span><span class="params">(mystr)</span></span>;  <span class="comment">//元素的值拷贝出来了一份，互不影响</span></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">vector&lt;string&gt; mystr2 = mystr;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>通过列表初始化给值</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; mystr3 = &#123; <span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><strong>创建指定数量的元素。有元素数量概念的时候一般用圆括号</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt;  <span class="title">jihe23</span><span class="params">(<span class="number">15</span>, <span class="number">999</span>)</span></span>;  <span class="comment">//创建15个int元素，每个元素都是999</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">jihe4</span><span class="params">(<span class="number">4</span>, <span class="string">&quot;hello&quot;</span>)</span></span>; <span class="comment">//创建4个string类型的元素，每个元素的值都是hello</span></span><br><span class="line"><span class="comment">//int不给值就会每个元素都是0</span></span><br><span class="line"><span class="comment">//string不给值每个值都是“”</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li><p><strong>多种初始化方式</strong>  </p>
<p><strong>（）一般表示元素数量，{}一般表示元素内容的概念，但不绝对。</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">jihe77</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//创建10个为0的vector数组</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; jihe88&#123;<span class="number">20</span>&#125;;<span class="comment">//表示一个元素，该元素为10</span></span><br></pre></td></tr></table></figure>



<p><strong>特殊（但不建议这么使用）：</strong></p>
<ul>
<li><strong>类型与{}内的内容吻合就会正常初始化列表</strong></li>
<li><strong>不吻合就会把{}内的数字当作创建几个元素</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; ju&#123; <span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">// 系统发现10和类型不匹配，所以把10当成元素数量，每个元素都是&quot;&quot;vector&lt;string&gt; ff&#123; 10,&quot;hello&quot; &#125;; //10个元素，每个元素都是hello、</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; ju&#123; &quot;hello&quot; &#125;; </span></span><br><span class="line"><span class="comment">//但这种无法解释，直接就会报错</span></span><br></pre></td></tr></table></figure>



<h2 id="vector对象上的操作"><a href="#vector对象上的操作" class="headerlink" title="vector对象上的操作"></a><strong>vector对象上的操作</strong></h2><p><strong>最常用的是不知道vector对象里面需要放多少元素，需要动态增加和减少。</strong></p>
<ol>
<li><p><strong>判断是否为空：.empty()</strong></p>
</li>
<li><p><strong>用于向vector增加一个元素：.push_back()</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; ivec;ivec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>用于查询元素个数：.size()</strong></li>
</ol>
<ol start="4">
<li><strong>clear：用于清空全部元素</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ivec.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure>



<ol start="5">
<li><strong>v[n]：访问第n个元素，范围是0-v.size()-1</strong></li>
</ol>
<ol start="6">
<li><strong>=：赋值运算符，会把原来的清空</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; sss;</span><br><span class="line">sss.<span class="built_in">push_back</span>(<span class="number">2</span>);sss = ivec; <span class="comment">//原来的2没了</span></span><br></pre></td></tr></table></figure>



<ol start="7">
<li><strong>==以及!=用与判断相等或者不相等，完全相等：元素个数相同,且对应位置的元素值必须也要相等</strong></li>
</ol>
<ol start="8">
<li><strong>范围for的应用</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vecvalue&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vecitem : vecvalue) &#123;	</span><br><span class="line">	cout &lt;&lt; vecitem &lt;&lt; endl;	</span><br><span class="line">    vecitem *= <span class="number">2</span>;	</span><br><span class="line">    cout &lt;&lt; vecitem &lt;&lt; endl;C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>问题：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vecvalue&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;<span class="keyword">for</span> (<span class="keyword">auto</span> vecitem : vecvalue) &#123;	</span><br><span class="line">	cout &lt;&lt; vecitem &lt;&lt; endl;	</span><br><span class="line">	vecvalue.<span class="built_in">push_back</span>(<span class="number">33</span>); </span><br><span class="line"> &#125;<span class="comment">//导致输出彻底乱套，范围for是用来遍历这个vector的,第一次遍历会记录这个容器的末尾值，当你插入或删除容器内的元素，会导致末位置发生改变，从而使编译器输出发生问题	vecitem *= 2;	cout &lt;&lt; vecitem &lt;&lt; endl;	</span></span><br></pre></td></tr></table></figure>



<p><strong>打印结果乱套了:</strong></p>
<p><strong><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210619231446200.png" alt="image-20210619231446200"></strong></p>
<p><strong>牢记:在for语句遍历（遍历一个容器等等类似的操作中），千万不要改动vector容器的容量，增加或者删除都不可以；</strong></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>;
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的函数新特性、内联函数、const详解</title>
    <url>/20289.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">函数回顾和后置返回类型、内联函数、函数杂合用法总结、const char * 组合、形参带const</span></strong></p>
<h2 id="函数回顾和后置返回类型"><a href="#函数回顾和后置返回类型" class="headerlink" title="函数回顾和后置返回类型"></a><strong>函数回顾和后置返回类型</strong></h2><p><strong>函数定义中，形参如果在函数体内用不到的话，则可以不给形参变量名字，只给其类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> </span>&#123; <span class="comment">//不需要所以可以不给变量名</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span></span>; <span class="comment">//函数声明同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但最好还是都带上</span></span><br></pre></td></tr></table></figure>



<p><strong>把函数返回类型放到函数名字之前，这种写法，叫做前置返回类型</strong></p>
<p><strong>C++还有后置返回类型:</strong></p>
<ul>
<li><strong>就是在函数声明和函数定义中，把返回类型放在参数列表之后</strong></li>
</ul>
<p><strong>格式：前面放auto，表示函数返回类型放在参数列表之后，而放在参数列表之后的返回类型是通过-&gt;开始的。</strong></p>
<p><strong>格式：auto  XXX(int a)  -&gt; 真类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func123</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> -&gt; <span class="keyword">void</span></span>; <span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func213</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> -&gt; <span class="keyword">void</span> </span>&#123;  <span class="comment">//函数定义</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：便于处理某些复杂的类型返回值声明</strong></p>
<h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a><strong>内联函数</strong></h2><p><strong>将普通函数变成内联函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> testv)</span> </span>&#123; <span class="comment">//在函数定义前面加一个inline</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：函数定义放到头文件（一般都要互相引用）中会导致函数重复被定义，所以一般头文件只放函数的声明，不能放函数的定义，函数的定义放在CPP文件中</strong></p>
<p><strong>但内联函数的定义一般就要放在头文件中。这样需要用到这个内联函数的CPP文件都能通过#include把这个内联函数源代码#include进来</strong></p>
<p><strong>（因为内联函数要用函数本体替换函数调用，所以声明那里直接写定义，以便找到函数的本体）</strong></p>
<p><strong>解决的问题：</strong></p>
<ul>
<li><strong>函数体很小，但调用很频繁的这种函数，我们要使用内联函数（inline）</strong><ul>
<li><strong>inline影响编译器，在编译阶段对inline这种函数进行处理，尝试通过调用该函数的动作替换为函数本体，来提升性能，减少频繁压栈和出栈影响内存。</strong></li>
<li><strong>但inline只是我们开发者对编译器的一个建议，编译器可以尝试去做，也可以不去做，这取决于编译器的诊断功能，决定权在编译器，我们不能控制</strong></li>
</ul>
</li>
</ul>
<p><strong>优点:</strong></p>
<ol>
<li><strong>提高效率</strong></li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li><strong>造成代码膨胀，所以内联函数的函数体必须要越小越好（因为毕竟是放在头文件里的）</strong></li>
<li><strong>各种编译器对inline各不相同，难以保证效果</strong></li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li><strong>inline函数尽量简单，代码尽可能少，循环分支递归这些尽量不要出现在inline函数内，否则编译器可能因为函数复杂而拒绝将其作为内联函数</strong></li>
<li><strong>与constexpr一样，要尽可能简单，不然就会报错，可以看作更严格的内联函数</strong></li>
<li><strong>define宏展开也类似与内联函数，直接使用本体，但也有各种差别</strong></li>
</ul>
<h2 id="函数杂合用法总结"><a href="#函数杂合用法总结" class="headerlink" title="函数杂合用法总结"></a><strong>函数杂合用法总结</strong></h2><ol>
<li><strong>函数返回类型为void，表示函数不返回任何类型。但我们可以调用一个返回类型是void的函数，让它作为另一个返回类型是void函数的返回值</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">func1</span>();  <span class="comment">//返回另一个返回值是void的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>函数返回指针和返回引用的问题情况</strong></p>
<p><strong>返回指针：</strong></p>
<p><strong>极大的问题：</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">mm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">9</span>;  <span class="comment">//不报错，但有巨大的隐患</span></span><br><span class="line">    <span class="keyword">return</span> &amp;t; <span class="comment">//返回了局部变量的地址，产生隐患，一调用完，局部变量就没了，会造成程序崩溃</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>正确的用法：使用全局变量代替局部变量赋值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> q = <span class="number">10</span> ; <span class="comment">//全局变量，地址不会发生改变，一直地址都有值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">mm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;q; <span class="comment">//全局变量，地址不会发生改变，一直地址都有值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>​        <strong>返回引用：</strong></p>
<p>​        <strong>极大的问题：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同理也是巨大隐患</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">qq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">9</span>;</span><br><span class="line">    cout &lt;&lt; &amp;v &lt;&lt; endl; <span class="comment">//地址相同</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>&amp; k = <span class="built_in">qq</span>();</span><br><span class="line">    k = <span class="number">10</span>; <span class="comment">//往不存在的地址写了值，巨大隐患</span></span><br><span class="line">    cout &lt;&lt; &amp;k &lt;&lt; endl; <span class="comment">//地址相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        <strong>正确的用法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">qq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">9</span>;</span><br><span class="line">    cout &lt;&lt; &amp;v &lt;&lt; endl; <span class="comment">//地址不相同</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">qq</span>(); <span class="comment">//改了这个</span></span><br><span class="line">    k = <span class="number">10</span>; <span class="comment">//往存在新建的地址写了值，安全</span></span><br><span class="line">    cout &lt;&lt; &amp;k &lt;&lt; endl; <span class="comment">//地址不相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>牢记：不能调动局部变量的地址（返回的是局部变量地址的时候要时刻注意）</strong></p>
<ol start="3">
<li><strong>没有形参可以报错形参列表为空或者写void</strong></li>
<li><strong>如果一个函数我们不调用的话，则该函数可以只有声明部分，没有函数调用部分</strong></li>
<li><strong>普通函数（不是inline函数），声明可以声明多次，定义只能定义一次。一般函数声明的CPP文件会inclide自己函数声明的文件.h</strong></li>
<li><strong>一般都是将实参的值拷贝一份给形参，（而使用引用作为形参可以改变原地址的值，且可以相当于返回多个return，函数一般只能一个return，并且节省内存，效率高）</strong></li>
<li><strong>在C++中更习惯使用引用类型的形参来取代指针类型的实参，提倡在C++中多使用引用类型形参</strong></li>
<li><strong>C++中函数允许同名，但形参列表数量，或者类型要有区别</strong></li>
</ol>
<p><strong>函数重载：</strong></p>
<p><strong>可以：</strong></p>
<ol>
<li><strong>类型不一样</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>形参数量不一样</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">float</span> b)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>不行：</strong></p>
<ol>
<li><strong>形参数量和类型一致</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>加上const常量标识修饰也不行</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>3.形参名字不同也没用</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun23</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>





<h2 id="const-char-、char-const-、char-const-的区别"><a href="#const-char-、char-const-、char-const-的区别" class="headerlink" title="**const char 、char const *、char const 的区别"></a>**const char <em>、char const *、char <em>const 的区别</em></em></h2><ul>
<li><em><em>const char</em> p的意思:</em>*</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = str;  <span class="comment">//代表p指向的东西不能通过p来修改</span></span><br><span class="line"><span class="comment">//*p = &#x27;y&#x27;; 错误</span></span><br><span class="line"><span class="comment">//str[0]=&#x27;y&#x27;; 可以</span></span><br></pre></td></tr></table></figure>



<ul>
<li><em><em>char const * 的意思：与 const char</em> p等价</em>*</li>
<li>*<em>char <em>const</em></em><ul>
<li><strong>p一旦指向一个东西就不可以改变其他东西了，与常量一样</strong></li>
<li><strong>定义的时候必须初始化</strong></li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;i love china&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = str;  <span class="comment">//定义的时候必须初始化</span></span><br><span class="line">*p = <span class="string">&#x27;y&#x27;</span>;   		  <span class="comment">//p一旦指向一个东西就不可以改变其他东西了，与常量一样</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"><span class="comment">//p++; 不行</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<p><strong>常量指针不能改常量值，</strong></p>
<p><strong>指针常量不可以改指针。</strong></p>
<ul>
<li><strong>const char * const  == char const  * const：同理p的指向和p指向的值都不能改变，直接限制死了</strong></li>
</ul>
<p><strong>同理引用：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">1232</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; a = c; <span class="comment">//同理值不能通过a来修改</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span>&amp; a = c; <span class="comment">//同理值不能通过a来修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = <span class="number">31</span>; <span class="comment">//可以，不同于int&amp;b=31不行，就能跟常量绑定在一起了 //还可以拿来使用，也分配了内存了</span></span><br></pre></td></tr></table></figure>



<h2 id="函数形参中带const"><a href="#函数形参中带const" class="headerlink" title="函数形参中带const"></a><strong>函数形参中带const</strong></h2><p><strong>更加推荐在形参前面加const</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func411</span><span class="params">(<span class="keyword">const</span> student&amp; stu)</span> </span>&#123;</span><br><span class="line">    stu.num = <span class="number">1000</span>;<span class="comment">//非法，不能改变它的值了</span></span><br><span class="line">    <span class="comment">//学习在形参里面加入const的写法的习惯，不会无意改值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dasd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    c = <span class="number">100</span>;<span class="comment">//非法，不能改变它的值了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>加入const可以防止你无意修改了形参的值</strong></p>
</li>
<li><p><strong>使形参的值更加灵活</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func411</span><span class="params">( student&amp; stu)</span> </span>&#123;</span><br><span class="line">    stu.num = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func412</span><span class="params">(<span class="keyword">const</span> student&amp; stu)</span> </span>&#123;</span><br><span class="line">    stu.num = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	student ac;</span><br><span class="line">	<span class="keyword">const</span> student&amp; av = ac;</span><br><span class="line">	<span class="built_in">func411</span>(av); <span class="comment">//不行 ,因为形参不是常量引用，而代入的是常量引用</span></span><br><span class="line">    <span class="built_in">func412</span>(av); <span class="comment">//可以</span></span><br><span class="line">    <span class="built_in">func412</span>(ac); <span class="comment">//可以，既可以接受普通的类型以及常量类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>引用形参还能直接用常量代入</strong></li>
<li><strong>引用也推荐与const组合</strong> </li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dasd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dasd</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure>



<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的结构、权限修饰、类简介</title>
    <url>/20257.html</url>
    <content><![CDATA[<p><strong><span id="gray-block"><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">结构体、权限修饰符、类简介、类的组织</span></span></strong></p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a><strong>结构体</strong></h2><p><strong>结构体是自定义的数据类型</strong></p>
<table>
<thead>
<tr>
<th></th>
<th><strong>名称</strong></th>
<th><strong>值</strong></th>
<th><strong>类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>◢</strong></td>
<td><strong>&amp;student1</strong></td>
<td><strong>0x0100faf0 {number=10001 name=0x0100faf4 “zhangsan” }</strong></td>
<td>**studnet ***</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th><strong>名称</strong></th>
<th><strong>值</strong></th>
<th><strong>类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>◢</strong></td>
<td><strong>&amp;tmpstu</strong></td>
<td><strong>0x00cff920 {number=10001 name=0x00cff924 “zhangsan” }</strong></td>
<td>**studnet ***</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studnet</span>&#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(studnet tmpstu)</span></span>&#123;</span><br><span class="line">    tmpstu.number = <span class="number">3000</span>;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(tmpstu.name, <span class="built_in"><span class="keyword">sizeof</span></span>(tmpstu.name), <span class="string">&quot;who&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(studnet &amp;tmpstu)</span> </span>&#123;</span><br><span class="line">    tmpstu.number = <span class="number">3000</span>;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(tmpstu.name, <span class="built_in"><span class="keyword">sizeof</span></span>(tmpstu.name), <span class="string">&quot;who&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(studnet* ptmpstu)</span> </span>&#123;</span><br><span class="line">    ptmpstu-&gt;number = <span class="number">6000</span>; <span class="comment">//不能用.了，指针改变成员变量需要用-&gt;指向成员变量</span></span><br><span class="line">    <span class="built_in">strcpy_s</span>(ptmpstu-&gt;name, <span class="built_in"><span class="keyword">sizeof</span></span>(ptmpstu-&gt;name), <span class="string">&quot;you&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">    studnet student1; <span class="comment">//定义结构变量</span></span><br><span class="line">    student1.number = <span class="number">10001</span>;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(student1.name, <span class="built_in"><span class="keyword">sizeof</span></span>(student1.name), <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    cout &lt;&lt; student1.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; student1.number &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func</span>(student1);<span class="comment">//值没有被函数改变 ，效率低，实参传递给形参的时候发生了一个内存内容的拷贝，内存地址结构体和外面的实参不同</span></span><br><span class="line">    <span class="built_in">func2</span>(student1);<span class="comment">//值改变了，效率高，因为使用了引用，结构体内的形参的内存地址和外面的实参地址一样</span></span><br><span class="line">    <span class="built_in">func3</span>(&amp;student1);<span class="comment">//值改变了， -&gt;指向运算符</span></span><br><span class="line">    cout &lt;&lt; student1.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; student1.number &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>C++与C中的结构区别：</strong></p>
<ul>
<li><p><strong>C++中的结构除了具备C中结构的所有功能外。还增加许多扩展功能，最突出的功能之一是：不仅仅有成员变量，还可以在其中定义成员函数(方法) 调用：student.func1()</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studnet</span>&#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;  <span class="comment">//扩充的功能</span></span><br><span class="line">        number++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>C++里面叫做类</strong></li>
</ul>
</li>
</ul>
<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a><strong>权限修饰符</strong></h2><ul>
<li><strong>分为public(公有)和private(私有)以及protected(保护)</strong></li>
<li><strong>public:公有的意思，用这个修饰结构/类中的成员变量/成员函数，就可以被外部访问。一般需要被外界访问的东西我们就定义为public。好像该类的外部接口</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studnet</span>&#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">//结构体默认都为public，所以加不加都行</span></span><br><span class="line">    <span class="keyword">int</span> number;  <span class="comment">// 外部不可以访问，离什么近就是什么类型</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number++;  <span class="comment">//里面的才可以访问</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>









<ul>
<li><strong>private：私有的意思，用这个修饰符 修饰结构/类中的成员变量/成员函数/只有被内部定义的成员函数才能使用。</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studnet</span>&#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> number;  <span class="comment">// 外部不可以访问，离什么近就是什么类型</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number++;  <span class="comment">//里面的才可以访问</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>









<h2 id="类简介"><a href="#类简介" class="headerlink" title="类简介"></a><strong>类简介</strong></h2><p><strong>类也是用户自定义的数据类型</strong></p>
<ul>
<li><strong>不管C还是C++，结构都用struct定义</strong></li>
<li><strong>而为了理解可以把C语言中结构当成C++中类；但这个话并不全面</strong></li>
</ul>
<p><strong>结构和类的区别</strong></p>
<ul>
<li><strong>类这个东西只有C++才有，C没有</strong></li>
<li><strong>结构用struct定义，类用class定义</strong></li>
<li><strong>在C中我们定义一个属于该结构的变量，我们叫做结构变量。</strong></li>
<li><strong>在C++中我们定义一个属于该类的变量，我们叫做对象。</strong></li>
<li><strong>但结构变量也好，对象也好，他们都是一块能够存储数据并且具有某种类型的内存空间。</strong></li>
</ul>
<p><strong>他们极为类似，区别主要有两点:</strong></p>
<ol>
<li><strong>C++结构内部的成员变量以及成员函数，默认都为public</strong><ul>
<li><strong>C++类内部的成员变量以及成员函数，默认访问级别都是private</strong></li>
</ul>
</li>
<li><strong>C++结构体继承默认都是public，但类的继承默认都是private</strong></li>
</ol>
<p><strong>额外说明：</strong></p>
<ol>
<li><strong>标准C++库里面包含了大量丰富的类和函数。例如string</strong></li>
<li><strong>一般C++都是使用类而不是结构体</strong></li>
</ol>
<h2 id="类的组织"><a href="#类的组织" class="headerlink" title="类的组织"></a><strong>类的组织</strong></h2><p><strong>书写规范</strong></p>
<ol>
<li><strong>类的定义(定义变量，以及函数声明)一般放在.h头文件中（头文件名可以和类名相同）</strong></li>
<li><strong>类实现的代码可以放在一个CPP源文件里面（可以以类名定义）,文件一定要添加到项目中来；</strong></li>
<li><strong>在主函数中要使用这个类就得include头文件</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//放于student.h里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">studnet</span> &#123;</span></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>; <span class="comment">//函数的声明</span></span><br><span class="line">&#125;;  <span class="comment">//写在头文件中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//放于student.cppl里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studnet::func</span><span class="params">()</span> </span>&#123;<span class="comment">//函数的实现</span></span><br><span class="line">    number++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210619094115422.png"></strong></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的auto、头文件防卫、引用、常量</title>
    <url>/20230.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">auto、头文件防卫式声明、引用、常量</span></strong></p>
<p><strong>局部变量及初始化</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i的作用域仅仅在for语句内    </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以写作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i&#123; <span class="number">0</span> &#125;; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//i=0  == i&#123;0&#125; == i=&#123;0&#125; 数组同理</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int abcde &#123;3.5f&#125;; //失败， 从“float”转换到“int”需要收缩转换，系统执行了一个从浮点到整数的转换</span></span><br></pre></td></tr></table></figure>



<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a><strong>auto</strong></h2><p><strong>auto变量的自动类型推断</strong></p>
<p><strong>auto可以在声明变量的时候根据变量的初始值类型自动为此变量选择匹配的类型；（声明的时候要赋初值）</strong></p>
<p><strong>auto自动类型推断发生在编译期间，所以使用auto不会造成程序执行效率降低</strong></p>
<h2 id="头文件防卫式声明"><a href="#头文件防卫式声明" class="headerlink" title="头文件防卫式声明"></a><strong>头文件防卫式声明</strong></h2><p><strong>容易重定义，多次定义一个变量，引用别人的头文件，全局变量重定义</strong></p>
<p><strong>#ifdef ,ifndef 条件编译</strong></p>
<p><strong>#ifndef 标识符  当标志符没有定义过（没有用#define定义），则对程序段进行编译</strong></p>
<p>​    <strong>//程序段</strong></p>
<p><strong>#endif</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HEAD1__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HEAD1__   <span class="comment">//没有定义head1就定义head1</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写头文件程序代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !__HEAD1__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p><strong>引用理解成，为变量起了另外一个名字，一般用符合&amp;表示，起完别名后和变量本身看成同一个变量；</strong></p>
<ul>
<li><strong>定义引用并不额外占用内存，或理解为引用和原变量，占用的是同一块内存</strong></li>
<li><strong>定义引用的时候必须初始化</strong></li>
<li><strong>引用，&amp;的符号在=的左边</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refval = value; <span class="comment">//value的别名,不是求地址运算符，只是起标识作用</span></span><br><span class="line"><span class="comment">//定义引用并不额外占用内存，或理解为引用和原变量，占用的是同一块内存</span></span><br><span class="line"><span class="comment">//定义引用的时候必须初始化</span></span><br><span class="line">cout &lt;&lt; refval &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line"><span class="comment">//int&amp; refval13 = 10; 错误，引用必须绑定到变量上去，不能绑定到常量上去</span></span><br><span class="line"><span class="comment">//float &amp;refval23 = value; 错误，引用类型必须要相同</span></span><br></pre></td></tr></table></figure>



<p><strong>要和取地址区别开来。</strong></p>
<ul>
<li><strong>&amp;在=的右边</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>* p = &amp;a; <span class="comment">//取地址</span></span><br></pre></td></tr></table></figure>





<p><strong>实例：</strong></p>
<p><strong>可以改变函数值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ta, <span class="keyword">int</span>&amp; tb)</span> <span class="comment">//注意形参是引用类型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ta = <span class="number">4</span>;</span><br><span class="line">    tb = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">14</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;  <span class="comment">//打印13</span></span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;  <span class="comment">//打印14</span></span><br><span class="line">    <span class="built_in">func</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;  <span class="comment">//打印4</span></span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;  <span class="comment">//打印5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a><strong>常量</strong></h2><p><strong>常量就是不变的量</strong></p>
<h3 id="const-常量关键字，表示不变的意思"><a href="#const-常量关键字，表示不变的意思" class="headerlink" title="const 常量关键字，表示不变的意思"></a><strong>const 常量关键字，表示不变的意思</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> var = <span class="number">7</span>;  <span class="comment">//一种承诺，表示这个变量的值我不会去改变（命名常量）</span></span><br></pre></td></tr></table></figure>



<p><strong>实际上const可以改，但一般不要去改</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;var2 = (<span class="keyword">int</span> &amp;)var;  <span class="comment">//强原来的const变量转成引用</span></span><br><span class="line">var2 = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>



<p><strong>vs查地址  shift + F9</strong> </p>
<p><strong>搜索的名字求地址要加&amp;  ，求值就直接写变量名</strong></p>
<h3 id="constexpr-关键字"><a href="#constexpr-关键字" class="headerlink" title="constexpr 关键字"></a><strong>constexpr 关键字</strong></h3><p><strong>C++11才引入的，它也是个常量的概念，在编译的时候求值，可以提升性能</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> abc)</span> </span>&#123;  <span class="comment">//这个函数里面必须要有初值，参数，或者在函数体内写 int ab=10;这种</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> var2 = <span class="built_in">func2</span>(<span class="number">11</span>); <span class="comment">//不报错，因为系统认为这是常量函数，返回一个常量</span></span><br><span class="line"><span class="comment">//int b=11；</span></span><br><span class="line"><span class="comment">//constexpr int var2 = b;  //报错，因为系统不认为b是常量，它可以改，是变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>常量const/constexpr 必须包含参量</strong></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的范围for语句、动态内存分配、nullptr</title>
    <url>/20221.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">C++的范围for语句、动态内存分配、nullptr </span></strong></p>
<h2 id="范围for语句"><a href="#范围for语句" class="headerlink" title="范围for语句"></a><strong>范围for语句</strong></h2><p><strong>F9加断点，F10往下一格</strong></p>
<p><strong>用于遍历一个序列</strong></p>
<p><strong>方式一：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> v[]&#123; <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x: v) <span class="comment">//遍历数组中每个元素，依次放入x中并打印x值，</span></span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多了个拷贝的过程</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> y : &#123; <span class="number">11</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">134</span>,<span class="number">1232</span> &#125;) &#123;</span><br><span class="line">	cout &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式三:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : v) &#123;</span><br><span class="line">	cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接用引用，省了拷贝的过程，提高了效率</span></span><br></pre></td></tr></table></figure>



<h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a><strong>动态内存分配</strong></h2><p><strong>C中供程序使用的存储空间，有程序区，静态存储区，动态存储区。</strong></p>
<p><strong>C++我们把内存进一步详细分为：</strong></p>
<ol>
<li><strong>栈：函数内的局部变量都会放在这里，由编译器自动分配和释放</strong></li>
<li><strong>堆：程序员用，malloc/new分配，用free/delete来释放。忘记释放后，系统会回收</strong></li>
<li><strong>全局/静态存储区：放全局变量和静态变量static。程序结束时系统释放</strong></li>
<li><strong>常量存储区：“i love china”</strong></li>
<li><strong>程序代码区</strong></li>
</ol>
<p><strong>堆和栈不同的用途和区别：</strong></p>
<ol>
<li><strong>栈的空间是有限的。例int a =4； 自动给你4个字节的空间，分配速度快，程序员也控制不了</strong></li>
<li><strong>堆:只要不超出你实际拥有的物理内存，也在操作系统允许你能够分配的最大内存大小之内都可以分配给你</strong></li>
<li><strong>堆的分配速度比栈慢，你可以随时使用malloc/new来分配，free/delete来释放，非常灵活。</strong></li>
</ol>
<ul>
<li><p><strong>在c语言一般用malloc和free从堆中分配和释放内存使用，malloc和free 是函数带（）</strong></p>
<ul>
<li><strong>malloc（memory allocation）：动态内存分配</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">int</span> NumBytes)</span></span>; </span><br><span class="line"><span class="comment">//bymbytes:要分配的字节数 （void*可以被强制转换成任何指针）</span></span><br><span class="line"><span class="comment">//分配成功则返回指向被分配内存的指针，分配失败则返回NULL</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>; <span class="comment">//c语言写法，等价于数字0</span></span><br><span class="line">p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));<span class="comment">// 在堆里面分配4个字节 ,void *是万能指针，要用适当的来给它强转</span></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	*p = <span class="number">5</span>; <span class="comment">//指针加*=取值，把值变成5</span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">free</span>(p); <span class="comment">//必须要释放掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="void-malloc-int-NumBytes"><a href="#void-malloc-int-NumBytes" class="headerlink" title="void *malloc(int NumBytes);"></a>void *malloc(int NumBytes);</h4><ul>
<li><p><strong>bymbytes:要分配的字节数 （void*可以被强制转换成任何指针），所以malloc前面要强转成你想要的</strong></p>
</li>
<li><p><strong>分配成功则返回指向被分配内存的指针，分配失败则返回NULL</strong></p>
</li>
<li><p><strong>当不需要使用这块内存的时候，你应该使用free()函数来将内存释放掉，供其他地方使用</strong></p>
</li>
</ul>
<h4 id="void-free-void-FirstByte-（free一个malloc指针"><a href="#void-free-void-FirstByte-（free一个malloc指针" class="headerlink" title="void free(void* FirstByte); （free一个malloc指针)"></a>void free(void* FirstByte); （free一个malloc指针)</h4><ul>
<li><strong>将之前用malloc分配的内存空间还给程序（操作系统），也就是说释放了这块内存，这样这块内存就被系统回收</strong></li>
<li><strong>并在需要的时候将系统分配出去再给其他地方使用</strong></li>
</ul>
<p><strong>字符串的malloc/free</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>; <span class="comment">//c语言写法，等价于数字0</span></span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));<span class="comment">// 在堆里面分配4个字节 ,void *是万能指针，要用适当的来给它强转</span></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(p,<span class="number">100</span>, <span class="string">&quot;hello world!&quot;</span>); <span class="comment">//更安全的字符串拷贝函数，防止内存溢出崩溃 ,第二个参数填最多多少个字节，溢出了就会有提醒</span></span><br><span class="line">	cout &lt;&lt; p &lt;&lt; endl; <span class="comment">//字符串指针=字符串的值</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p><strong>好好解读以下程序:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) *<span class="number">100</span>); <span class="comment">//分配可以存下放的下100个整数的内存空间</span></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="keyword">int</span>* q = p;</span><br><span class="line">	*q++ = <span class="number">1</span>;  <span class="comment">//等价与 *（q++） --&gt; *q= 1  q++（跳了4个内存地址，因为为整型指针）</span></span><br><span class="line">	*q++ = <span class="number">5</span>;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;  <span class="comment">//p指针没动，还在第一个，但q指针改变了它指向的值</span></span><br><span class="line">	cout &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//q指针在p指针移动前改变了p指针指向的后一个值</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>在C++一般使用new和delete来分配和释放内存，它们不是函数,是运算符(标识符)。C++中就用new/delete中分配和释放内存，不再使用malloc和free来分配和释放内存</strong></p>
</li>
</ul>
<p><strong>new/delete 和malloc，free干了一样的事情，就是分配和释放内存。同时new，delete还干了更多的事情。</strong></p>
<p><strong>使用方法：</strong></p>
<ol>
<li><p><strong>指针类型名 = new 类型标识符;</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* myint = <span class="keyword">new</span> <span class="keyword">int</span>;  <span class="comment">//int* p = (int*)malloc(sizeof(int) * 100)</span></span><br><span class="line"><span class="keyword">if</span> (myint != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	*myint = <span class="number">8</span>;</span><br><span class="line">	cout &lt;&lt; *myint &lt;&lt; endl;</span><br><span class="line">	<span class="built_in"><span class="keyword">delete</span></span>(myint);  <span class="comment">//释放单个myint空间</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>指针类型名 = new 类型标识符(初始值) ;   //注意这里是使用圆括号括起来，表示初始值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* myint = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">18</span>);  <span class="comment">//int* p = (int*)malloc(sizeof(int) * 100)</span></span><br><span class="line"><span class="keyword">if</span> (myint != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	cout &lt;&lt; *myint &lt;&lt; endl; <span class="comment">//打印18</span></span><br><span class="line">	<span class="built_in"><span class="keyword">delete</span></span>(myint);  <span class="comment">//释放单个myint空间</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>指针类型名 = new 类型标识符[内存单元个数]  //注意使用[]来代表单元个数</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="keyword">int</span>* q = p;</span><br><span class="line">	*q++ = <span class="number">1</span>; <span class="comment">//给数组[0]赋值</span></span><br><span class="line">	*q++ = <span class="number">5</span>; <span class="comment">//给数组[1]赋值</span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; endl;  <span class="comment">//p+1 指针+1 =跳了4个字节内存地址</span></span><br><span class="line">	<span class="keyword">delete</span>[] p; <span class="comment">//释放int p的数组空间</span></span><br><span class="line">				<span class="comment">//new时候我们用[]，那么delete就必须使用[]，[]不用写数组大小</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<ul>
<li><strong>配对使用，有malloc成功就必须要有free，有free成功，就必须要有delete</strong></li>
<li><strong>free/delete 不能重复调用</strong></li>
</ul>
<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a><strong>nullptr</strong></h2><p><strong>代表的是空指针</strong></p>
<p><strong>nullptr能够避免在整数和指针之间发生混淆</strong></p>
<p><strong>typeid().name() 可以查看类型</strong></p>
<p><strong>NULL和nullptr 满足 NULL == nullptr</strong></p>
<p><strong>但实际上是不同的类型</strong></p>
<p><strong>结论：对于指针的初始化，和以往用到的和指针有关NULL的场合，能用nullptr的都用nullptr取代NULL</strong></p>
<p><strong>nullptr认为是真的指针类型</strong></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的迭代器简介、容器的迭代器、迭代器各类操作</title>
    <url>/20243.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">迭代器简介、容器的迭代器、迭代器各类操作</span></strong></p>
<h2 id="迭代器简介"><a href="#迭代器简介" class="headerlink" title="迭代器简介"></a><strong>迭代器简介</strong></h2><p><strong>迭代器就是一种变量容器内元素的数据类型，这种数据类型有点像指着，我们理解为迭代器就是用来指向容器中某个元素。</strong></p>
<p><strong>string\vector,有[]，但很少用[]，一般使用迭代器，有些不能使用[]，但迭代器是都有的，比较通用</strong></p>
<p><strong>通过迭代器，我们可以读取容器中的元素值，读string中的每个字符，还可以修改迭代器所指向的元素值</strong></p>
<p><strong>有类似++、–的操作</strong></p>
<p><strong>容器还有：list、map（基本都定义了相关的迭代器、[]不一定有）</strong></p>
<p><strong>尽量使用迭代器来访问容器里面的元素；</strong></p>
<h2 id="容器的迭代器类型"><a href="#容器的迭代器类型" class="headerlink" title="容器的迭代器类型"></a><strong>容器的迭代器类型</strong></h2><p><strong>定义一个对应的迭代器：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; iv = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter;<span class="comment">//定义迭代器，迭代器类型也必须和上面的vector容器的类型相同</span></span><br></pre></td></tr></table></figure>

<p><strong>我们可以把vector<int>::iterator  理解成一个类型，这种类型就专门用作迭代器；</strong></p>
<p><strong>当我们用这个类型定义一个变量的时候，这个变量就是个迭代器，这个iter这个变量就是一个迭代器。</strong></p>
<h3 id="迭代器begin-end-操作，方向迭代器rbegin-、rend-操作"><a href="#迭代器begin-end-操作，方向迭代器rbegin-、rend-操作" class="headerlink" title="迭代器begin()\end()操作，方向迭代器rbegin()、rend()操作"></a><strong>迭代器begin()\end()操作，方向迭代器rbegin()、rend()操作</strong></h3><p><strong>begin和end方法用来返回迭代类型</strong></p>
<p><strong>rbegin()、rend()也是用来返回迭代类型，但是反着</strong></p>
<ol>
<li><strong>begin()返回一个迭代类型，就是返回一个迭代器</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">iter = iv.<span class="built_in">begin</span>();  <span class="comment">//如果容器中有元素，则begin返回的迭代器指向的是容器中的第一个元素；</span></span><br><span class="line"><span class="comment">//相当于iter指向了iv vector容器中的iv[0]</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>begin()返回一个迭代类型，就是返回一个迭代器</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">iter = iv.<span class="built_in">end</span>(); <span class="comment">//返回的迭代器指向的不是末端元素而是末端元素的后面，指向的就是一个不存在的元素</span></span><br></pre></td></tr></table></figure>

<p><strong><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210620005222475.png" alt="image-20210620005222475"></strong></p>
<p><strong>(如果一个容器是空的，那么begin和end返回的迭代器都相同)</strong></p>
<p><strong>可以把end当作岗哨，begin与end重合代表遍历完了</strong></p>
<p><strong>for遍历:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator iter = iv.<span class="built_in">begin</span>(); iter != iv.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; endl;  <span class="comment">//把他当成指针处理就行</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a><strong>反向迭代器</strong></h3><p><strong>想要从后往前遍历就会使用到反向迭代器</strong></p>
<p><strong>用的是rbegin()和rend();</strong></p>
<p><strong>rbegin:返回一个反向迭代器类型，指向反向迭代器的第一个元素</strong></p>
<p><strong>rend：返回一个反向迭代器类型，指向反向迭代器的最后元素的下一个空位置</strong></p>
<p><strong><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210620092912027.png" alt="image-20210620092912027"></strong></p>
<p><strong>begin、end和iterator 以及 rbegin、rend和reverse_iterator都要成对使用</strong></p>
<p><strong>反向迭代器就不是iterator了，是reverse_iterator</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::reverse_iterator riter = iv.<span class="built_in">rbegin</span>(); riter != iv.<span class="built_in">rend</span>(); riter++) &#123; <span class="comment">//注意reverse_iterator</span></span><br><span class="line">        cout &lt;&lt; *riter &lt;&lt; endl;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="迭代器运算符"><a href="#迭代器运算符" class="headerlink" title="迭代器运算符"></a><strong>迭代器运算符</strong></h2><ol>
<li>*<strong>iter：返回iter所指向元素的引用，必须要保证这个迭代器所指向的元素是有效的元素，不能是end所指向的元素，因为end指向的是一个不存在的元素</strong></li>
<li><strong>iter++、++iter：自加1，类型于指针，但指向end后再++会报错，指向end就不能加加了</strong></li>
<li><strong>–iter、iter–：自减1，指向容器的上一个/前一个元素，如果指向头了就不能够–了</strong></li>
<li><strong>==/!=：判断两个迭代器是否相等，如果指向的是相同一个元素就相等，否则就不相等。</strong></li>
<li><strong>指向结构体容器的迭代器</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;student&gt; st;</span><br><span class="line">student mystu;</span><br><span class="line">mystu.num = <span class="number">100</span>;</span><br><span class="line">st.<span class="built_in">push_back</span>(mystu);<span class="comment">//把对象mystu赋值/拷贝(不是同一块内存)到了st容器中；</span></span><br><span class="line">vector&lt;student&gt;::iterator iter;</span><br><span class="line">iter = st.<span class="built_in">begin</span>();</span><br><span class="line">cout &lt;&lt; (*iter).num &lt;&lt; endl;  <span class="comment">//*iter代表结构成员，结构体成员变量用.来取结构体变量</span></span><br><span class="line">cout &lt;&lt; iter-&gt;num &lt;&lt; endl;  <span class="comment">//指针用-&gt;取结构体成员的结构体变量</span></span><br></pre></td></tr></table></figure>





<h2 id="const-iterator迭代器"><a href="#const-iterator迭代器" class="headerlink" title="const_iterator迭代器"></a><strong>const_iterator迭代器</strong></h2><p><strong>const_iterator：表示这个迭代器指向的值不能改变，而不是这个迭代器本身指向的元素不能改变，可以不断指向下一个元素，只能从容器中读容器，感觉起来更像常量指针。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">51</span>,<span class="number">31</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::const_iterator citer = vec.<span class="built_in">begin</span>();</span><br><span class="line">cout &lt;&lt; *citer &lt;&lt; endl;</span><br><span class="line">*citer = <span class="number">100</span>;<span class="comment">//报错，不能修改，使用常量迭代器才不会报错</span></span><br></pre></td></tr></table></figure>



<p><strong>必须使用const_vector迭代器的情况：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">51</span>,<span class="number">31</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator citer = vec.<span class="built_in">begin</span>();  <span class="comment">//报错，因为容器是常量的vector容器，用常规的迭代器能改值，与这个容器矛盾，使用必须要用const_iterator</span></span><br><span class="line">cout &lt;&lt; *citer &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<p><strong>常量or const迭代器一般要取决于vector的类型</strong></p>
<h2 id="cbegin-和cend-操作"><a href="#cbegin-和cend-操作" class="headerlink" title="cbegin()和cend()操作"></a><strong>cbegin()和cend()操作</strong></h2><p><strong>C++11引入的两个新的函数</strong></p>
<p><strong>跟begin和end类型，cbegin和cend返回的都是常量迭代器(const_iterator)；</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">51</span>,<span class="number">31</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator citer = vec.<span class="built_in">cbegin</span>(); <span class="comment">//报错，返回的是常量迭代器，与前面的普通迭代器相矛盾</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::const_iterator citer = vec.<span class="built_in">cbegin</span>();<span class="comment">// 可以</span></span><br></pre></td></tr></table></figure>





<h2 id="迭代器失效问题"><a href="#迭代器失效问题" class="headerlink" title="迭代器失效问题"></a><strong>迭代器失效问题</strong></h2><p><strong>auto可以自动推断迭代器类型，因为右边的begin等返回的就是迭代器类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg=vec.<span class="built_in">begin</span>(), end=vec.<span class="built_in">end</span>(); beg != end; beg++) &#123;  <span class="comment">//for遍历也是涉及迭代器的一种操作</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3333</span>);</span><br><span class="line">    cout &lt;&lt; *beg &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>在操作迭代器过程中（使用了迭代器这种循环体）,千万不要改变vector容器中的容量，也就是不要增加或删除vector容器中的元素</strong></p>
<p><strong>往容器中增加或删除容器中的元素，这些操作可能会使指向容器中元素的指针、引用、迭代器失效。</strong></p>
<p><strong>失效代表不能再代表容器中的元素，一旦失效的东西，很多情况下，程序会直接崩溃；</strong></p>
<p><strong>一定要增加元素的操作：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg=vec.<span class="built_in">begin</span>(), end=vec.<span class="built_in">end</span>(); beg != end; beg++) &#123;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3333</span>);  <span class="comment">//一旦增加或删除元素，就立马跳出循环，从新再加载一次循环</span></span><br><span class="line">     <span class="keyword">break</span>;  <span class="comment">//important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg = vec.<span class="built_in">begin</span>(), end = vec.<span class="built_in">end</span>(); beg != end; beg++) &#123;</span><br><span class="line">     <span class="comment">//..........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="灾难程序演示"><a href="#灾难程序演示" class="headerlink" title="灾难程序演示"></a><strong>灾难程序演示</strong></h2><ol>
<li><strong>插入：</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (beg != end) &#123;</span><br><span class="line">   cout &lt;&lt; *beg &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//可以使用insert插入新值</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(beg, <span class="number">80</span>);<span class="comment">//第一个参数放插入位置，第二个参数放插入的值。</span></span><br><span class="line">        <span class="comment">//这一插入会导致迭代器失效</span></span><br><span class="line">        <span class="comment">//具体那个迭代器失效，取决vector容器的内部实现原理。</span></span><br><span class="line">        <span class="comment">//最明智的做法就是break出循环体；</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   beg++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>2.释放:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = vec.<span class="built_in">begin</span>(); iter != vec.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">     vec.<span class="built_in">erase</span>(iter);  <span class="comment">//移除iter位置上的元素，返回下一个元素的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>正确释放的方法1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (iter != vec.<span class="built_in">end</span>()) &#123;  <span class="comment">//每次end都更新</span></span><br><span class="line">     iter = vec.<span class="built_in">erase</span>(iter); <span class="comment">// 返回下一个元素的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>正确释放的方法2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (!vec.<span class="built_in">empty</span>()) &#123;   <span class="comment">//保证不到空的值，不空就把第一个值删掉</span></span><br><span class="line">    <span class="keyword">auto</span> iter = vec.<span class="built_in">begin</span>(); <span class="comment">//只删第一个值</span></span><br><span class="line">    vec.<span class="built_in">erase</span>(iter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="用迭代器遍历string类型数据"><a href="#用迭代器遍历string类型数据" class="headerlink" title="用迭代器遍历string类型数据"></a><strong>用迭代器遍历string类型数据</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str&#123; <span class="string">&quot;i love china&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = str.<span class="built_in">begin</span>(); iter != str.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">    *iter = <span class="built_in">toupper</span>(*iter);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br></pre></td></tr></table></figure>





<h2 id="vector容器常用操作与内存释放"><a href="#vector容器常用操作与内存释放" class="headerlink" title="vector容器常用操作与内存释放"></a><strong>vector容器常用操作与内存释放</strong></h2><p><strong>实战案例：</strong></p>
<p><strong><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/image-20210620113918549.png" alt="image-20210620113918549"></strong></p>
<p><strong>其中：      conflist = { size=2 }</strong></p>
<p>​                 <strong>pconf1 = 0x008b0940 {itemname=0x008b0940 “ServerName” itemcontent=0x008b0968 “1区” }</strong></p>
<p>​                 <strong>pconf2  = 0x008b1ac0 {itemname=0x008b1ac0 “ServerID” itemcontent=0x008b1ae8 “10000” }</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">conf</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> itemname[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">char</span> itemcontent[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getinfo</span><span class="params">(vector&lt;conf*&gt;&amp; conflist, <span class="keyword">const</span> <span class="keyword">char</span>* pitem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> pos = conflist.<span class="built_in">begin</span>(); pos != conflist.<span class="built_in">end</span>(); pos++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stricmp((*pos)-&gt;itemname, pitem) == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> (*pos)-&gt;itemcontent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    conf* pconf1 = <span class="keyword">new</span> conf;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf1-&gt;itemname , <span class="built_in"><span class="keyword">sizeof</span></span>(pconf1-&gt;itemname) , <span class="string">&quot;ServerName&quot;</span>); <span class="comment">//创建服务器名</span></span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf1-&gt;itemcontent, <span class="built_in"><span class="keyword">sizeof</span></span>(pconf1-&gt;itemcontent), <span class="string">&quot;1区&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    conf* pconf2 = <span class="keyword">new</span> conf;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf2-&gt;itemname, <span class="built_in"><span class="keyword">sizeof</span></span>(pconf2-&gt;itemname), <span class="string">&quot;ServerID&quot;</span>); <span class="comment">//服务器id</span></span><br><span class="line">    <span class="built_in">strcpy_s</span>(pconf2-&gt;itemcontent, <span class="built_in"><span class="keyword">sizeof</span></span>(pconf2-&gt;itemcontent), <span class="string">&quot;10000&quot;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;conf*&gt; conflist;</span><br><span class="line">    conflist.<span class="built_in">push_back</span>(pconf1);</span><br><span class="line">    conflist.<span class="built_in">push_back</span>(pconf2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* p = <span class="built_in">getinfo</span>(conflist, <span class="string">&quot;ServerName&quot;</span>); <span class="comment">//输出1区</span></span><br><span class="line">    cout &lt;&lt; p &lt;&lt; endl; <span class="comment">//字符串指针=值，所以直接输入p取整个即可 *p=区字符串第一个元素值</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//释放内存的问题，自己new的就要自己释放</span></span><br><span class="line">    vector&lt;conf*&gt;::iterator pos;  <span class="comment">//创建一个结构体指针的容器的迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (pos = conflist.<span class="built_in">begin</span>(); pos != conflist.<span class="built_in">end</span>(); pos++) &#123;</span><br><span class="line">        <span class="comment">//必须删除new出来的蓝色内存</span></span><br><span class="line">        <span class="built_in"><span class="keyword">delete</span></span> (*pos); <span class="comment">//*pos才是真正那个指针 *pos=取值，取的是&lt;conf*&gt;里面的conf * ，就是结构体指针</span></span><br><span class="line">        			<span class="comment">//没有破坏迭代器，只是把指向的内存删了，内存无效了</span></span><br><span class="line">    &#125;</span><br><span class="line">    conflist.<span class="built_in">clear</span>();<span class="comment">//系统也会自己帮你释放，因为容器的内存已经无效了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<hr>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>






]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的成员函数、对象拷贝、私有对象</title>
    <url>/20244.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">成员函数、对象拷贝、私有对象</span></strong></p>
<h2 id="一、类是我们自己定义的数据类型"><a href="#一、类是我们自己定义的数据类型" class="headerlink" title="一、类是我们自己定义的数据类型"></a><strong>一、类是我们自己定义的数据类型</strong></h2><p><strong>设计类时候要考虑：</strong></p>
<ol>
<li><strong>站在设计和实现者的角度考虑问题</strong></li>
<li><strong>站在使用者的角度来考虑</strong></li>
<li><strong>父类、子类</strong></li>
</ol>
<h2 id="二、类基础"><a href="#二、类基础" class="headerlink" title="二、类基础"></a><strong>二、类基础</strong></h2><ol>
<li><strong>一个类就是一个用户自己定义的数据类型，我们可以把类想象成一个命名空间，包着一堆东西（成员函数、成员变量）</strong></li>
<li><strong>一个类的构成:成员变量，成员函数（ 许多特殊的函数）</strong></li>
<li><strong>我们访问类成员时候，如果是类的对象，我们就使用对象名.成员名来访问成员</strong></li>
<li><strong>如果是使用这个对象的指针，我们就使用 指针名-&gt;成员名 来访问成员</strong></li>
<li><strong>public成员提供类的接口，暴露给外界调用。private成员提供各种实现类功能的细节方法，但不暴露给使用者，外界无法使用这些接口</strong></li>
<li><strong>struct 是成员默认为public的clas；struct A{….};</strong></li>
<li><strong>class的成员默认是private；class A{….};</strong></li>
<li><strong>struct和class基本可以作为等价</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student someone;</span><br><span class="line">    someone.num = <span class="number">100</span>;</span><br><span class="line">    student* pstu = &amp;someone;</span><br><span class="line">    pstu-&gt;num = <span class="number">106</span>;</span><br><span class="line">    cout &lt;&lt; someone.num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、成员函数"><a href="#三、成员函数" class="headerlink" title="三、成员函数"></a><strong>三、成员函数</strong></h2><p><strong>定义一个时钟类，且初始化时间</strong></p>
<h3 id="传统C语言写法"><a href="#传统C语言写法" class="headerlink" title="传统C语言写法"></a><strong>传统C语言写法</strong></h3><p><strong>初始化是通过外面构造一个函数来让他初始化</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Hour; <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">int</span> Minute; <span class="comment">//分</span></span><br><span class="line">    <span class="keyword">int</span> Second; <span class="comment">//秒</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initTime</span><span class="params">(Time&amp; stmptime, <span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec)</span> </span>&#123;  <span class="comment">//初始化的函数</span></span><br><span class="line">    stmptime.Hour = tmphour;</span><br><span class="line">    stmptime.Minute = tmpmin;</span><br><span class="line">    stmptime.Second = tmpsec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Time</span> <span class="title">mytime</span>;</span></span><br><span class="line">    <span class="built_in">initTime</span>(mytime, <span class="number">11</span>, <span class="number">14</span>, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; mytime.Hour &lt;&lt; endl;  <span class="comment">//打印11</span></span><br><span class="line">    cout &lt;&lt; mytime.Minute &lt;&lt; endl; <span class="comment">//打印14</span></span><br><span class="line">    cout &lt;&lt; mytime.Second &lt;&lt; endl;  <span class="comment">//打印5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="C-写法"><a href="#C-写法" class="headerlink" title="C++写法"></a><strong>C++写法</strong></h3><p><strong>是这个道理但不规范的写法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Hour; <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">int</span> Minute; <span class="comment">//分</span></span><br><span class="line">    <span class="keyword">int</span> Second; <span class="comment">//秒</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTime</span><span class="params">(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec)</span> </span>&#123;</span><br><span class="line">        Hour = tmphour;  <span class="comment">//可以直接调用本类里面的成员变量</span></span><br><span class="line">        Minute = tmpmin;</span><br><span class="line">        Second = tmpsec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Time</span> <span class="title">mytime</span>;</span></span><br><span class="line">    mytime.<span class="built_in">initTime</span>(<span class="number">11</span>, <span class="number">14</span>, <span class="number">5</span>); <span class="comment">//直接利用类里面的成员函数进行初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>标准规范的写法:</strong></p>
<p><strong>在Time.h中写:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MYTIME__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MYTIME__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Hour; <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">int</span> Minute; <span class="comment">//分</span></span><br><span class="line">    <span class="keyword">int</span> Second; <span class="comment">//秒  //成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTime</span><span class="params">(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec)</span></span>; <span class="comment">//成员函数的定义</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<p><strong>在cpp实现文件中写：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成员函数initTime的实现，::是作用域运算符，表示init这个函数属于Time类，声明只属于Time类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Time.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::initTime</span><span class="params">(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec)</span> </span>&#123;  </span><br><span class="line">    Hour = tmphour;  <span class="comment">//我们在成员函数中，可以直接使用之前在类定义的成员变量名</span></span><br><span class="line">    Minute = tmpmin;  <span class="comment">//不同类的Minute值不会冲突，成员变量的值不是唯一的，不同的类成员不同</span></span><br><span class="line">    Second = tmpsec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>cpp的使用文件：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//另一个文件的cpp使用</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Time.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Time</span> <span class="title">mytime</span>;</span></span><br><span class="line">    mytime.<span class="built_in">initTime</span>(<span class="number">11</span>, <span class="number">14</span>, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; mytime.Hour &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; mytime.Minute &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; mytime.Second &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PS:类的重复定义（也可以理解为声明）是可以的，但全局变量不能多次定义（在头文件中被cpp中#include）</strong></p>
<p><strong>类的init：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time mytime2 = mytime; <span class="comment">//四种类初始化的方式，属于拷贝，地址都不一样</span></span><br><span class="line">Time mytime3&#123; mytime &#125;;  <span class="comment">//把mytime的成员变量都赋值过去了</span></span><br><span class="line"><span class="function">Time <span class="title">mytime4</span><span class="params">(mytime)</span></span>;  <span class="comment">//每个成员变量都是逐个拷贝</span></span><br><span class="line">Time mytime5 = &#123; mytime &#125;;</span><br><span class="line">mytime5.Hour = <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果不使用初始化的函数，它的值就会不确定</strong></li>
</ul>
<h2 id="五、私有成员"><a href="#五、私有成员" class="headerlink" title="五、私有成员"></a><strong>五、私有成员</strong></h2><ul>
<li><p><strong>私有成员、函数可以在类内被其他函数调用，但不能被外界初始化类后调用;</strong></p>
</li>
<li><p><strong>私有成员、函数就是专门为其他函数的实现服务的，而不是直接作用于外界。</strong></p>
</li>
<li><p><strong>变量/函数往上找，先找到什么就是什么类型的变量/函数</strong></p>
</li>
</ul>
<p><strong>class默认为私有</strong></p>
<p><strong>h中：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MYTIME__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MYTIME__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Hour; <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">int</span> Minute; <span class="comment">//分</span></span><br><span class="line">    <span class="keyword">int</span> Second; <span class="comment">//秒</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTime</span><span class="params">(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Millisecond; <span class="comment">//毫秒，无法在别的cpp中给它赋值使用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initMillTime</span><span class="params">(<span class="keyword">int</span> mls)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<p><strong>cpp定义中：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::initTime</span><span class="params">(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec)</span> </span>&#123;</span><br><span class="line">    Hour = tmphour;  <span class="comment">//我们在成员函数中，可以直接使用之前在类定义的成员变量名</span></span><br><span class="line">    Minute = tmpmin;  <span class="comment">//不同类的Minute值不会冲突，成员变量的值不是唯一的，不同的类成员不同</span></span><br><span class="line">    Second = tmpsec;</span><br><span class="line">    <span class="built_in">initMillTime</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::initMillTime</span><span class="params">(<span class="keyword">int</span> mls)</span> </span>&#123;  <span class="comment">//不能被用户调用，但可以被定义</span></span><br><span class="line">    Millisecond = mls;  <span class="comment">//成员函数可以访问成员变量，不管成员变量是否是私有</span></span><br><span class="line">                        <span class="comment">//公有肯定可以，私有就是只给类内的成员函数服务的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>cpp使用：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Time</span> <span class="title">mytime</span>;</span></span><br><span class="line">   <span class="comment">// mytime.initMillTime(0); 非法，不能被外界调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的结构函数详解、explict、初始化列表</title>
    <url>/20276.html</url>
    <content><![CDATA[<script src="https://myhkw.cn/player/js/jquery.min.js" type="text/javascript"></script>
<script src="https://myhkw.cn/api/player/162426161349" id="myhk" key="162426161349" m="1"></script>

<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">结构函数详解、explict、初始化列表</span></strong></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h2><p><strong>构造函数的目的就是初始化类对象的函数（自动调用）</strong></p>
<ul>
<li><strong>在类中，有一种特殊的成员函数，它的名字和类名相同，我们在创建类对象的时候，这个特殊的成员函数会被系统自动调用。这个成员函数就叫做“构造函数”</strong></li>
<li><strong>有了构造函数就不怕对象忘记初始化，导致成员变量有不确定的值</strong></li>
</ul>
<p><strong>构造函数的写法：</strong></p>
<p><strong>h中写：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Time</span>(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec); <span class="comment">//构造函数声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>cpp实现中写定义：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> h</span></span><br><span class="line"></span><br><span class="line">Time::<span class="built_in">Time</span>(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec) &#123; <span class="comment">//构造函数不能有返回值</span></span><br><span class="line">    Hour = tmphour;  </span><br><span class="line">    Minute = tmpmin;  </span><br><span class="line">    Second = tmpsec;</span><br><span class="line">    <span class="built_in">initMillTime</span>(<span class="number">0</span>); <span class="comment">//私有函数的调用，OK的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>cpp使用中写：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> h</span></span><br><span class="line"><span class="comment">//5中初始化的方式，构造函数包含几个形参就需要带进去几个参数</span></span><br><span class="line">Time mytime = <span class="built_in">Time</span>(<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>); </span><br><span class="line"><span class="function">Time <span class="title">mtytime2</span><span class="params">(<span class="number">12</span>, <span class="number">13</span>, <span class="number">52</span>)</span></span>; </span><br><span class="line">Time mytime3 = Time&#123; <span class="number">12</span>,<span class="number">14</span>,<span class="number">52</span> &#125;;</span><br><span class="line">Time mytime4 = &#123; <span class="number">12</span>,<span class="number">13</span>,<span class="number">42</span> &#125;;</span><br><span class="line">Time mytime5&#123; <span class="number">12</span>,<span class="number">13</span>,<span class="number">42</span> &#125;;</span><br></pre></td></tr></table></figure>



<p><strong>特点:</strong></p>
<ol>
<li><strong>构造函数不能有返回值（连void都不写）</strong></li>
<li><strong>不可以手动调用构造函数，否则就会出错</strong></li>
<li><strong>声明的类型应该是public，因为我们创建一个对象需要系统帮我们调用构造函数，这说明他需要是一个public函数来给系统调用</strong><ul>
<li><strong>因为类缺少的成员是私有成员，所以我们必须说明构造函数是一个public函数，否则是无法直接创建该类的对象</strong></li>
</ul>
</li>
<li><strong>在构造函数中有多个参数，我们创建对象的时候也要带上这些参数</strong></li>
<li><strong>对象初始化需要带上构造函数声明上的全部参数</strong></li>
</ol>
<h2 id="多个构造函数"><a href="#多个构造函数" class="headerlink" title="多个构造函数"></a><strong>多个构造函数</strong></h2><p><strong>一个类中可以有个构造函数，但不同的构造函数总要有不同的东西（形参个数/形参类型）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time mytime = <span class="built_in">Time</span>(<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line"><span class="function">Time <span class="title">mtytime2</span><span class="params">(<span class="number">12</span>, <span class="number">13</span>, <span class="number">52</span>)</span></span>;</span><br><span class="line">Time mytime3 = Time&#123; <span class="number">12</span>,<span class="number">14</span>,<span class="number">52</span> &#125;;</span><br><span class="line">Time mytime4 = &#123; <span class="number">12</span>,<span class="number">13</span>,<span class="number">42</span> &#125;;</span><br><span class="line">Time mytime5&#123; <span class="number">12</span>,<span class="number">13</span>,<span class="number">42</span> &#125;;  <span class="comment">//调用了有三个参数的构造函数</span></span><br><span class="line">Time mytime7&#123;&#125;; <span class="comment">//调用了无参数的构造函数</span></span><br><span class="line"></span><br><span class="line">Time myTime20;  <span class="comment">//调用了无参数的构造函数</span></span><br><span class="line">Time myTime22 = myTime20;  <span class="comment">//没有调用无参数的构造函数,调用的是拷贝构造函数</span></span><br><span class="line"><span class="function">Time <span class="title">myTime23</span><span class="params">(myTime20)</span></span>;  <span class="comment">//没有调用无参数的构造函数,调用的是拷贝构造函数</span></span><br><span class="line">Time myTime24&#123;myTime20&#125;;  <span class="comment">//没有调用无参数的构造函数,调用的是拷贝构造函数</span></span><br><span class="line">Time myTime25 = &#123; myTime20 &#125;;  <span class="comment">//没有调用无参数的构造函数,调用的是拷贝构造函数</span></span><br></pre></td></tr></table></figure>



<h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a><strong>函数默认参数</strong></h2><ol>
<li><strong>函数的默认参数只能放到声明中,不能放在实现里面。（如果有没声明的函数则可以放在里面）</strong><ul>
<li><strong>函数默认参数有声明必须放到声明里面</strong></li>
</ul>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec = <span class="number">12</span>;); <span class="comment">//函数声明h</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>在具有多个函数默认参数的时候，有默认参数值的参数后面的参数都必须带有参数</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin = <span class="number">12</span>, <span class="keyword">int</span> tmpsec;); <span class="comment">//函数声明h 错误</span></span><br><span class="line"><span class="built_in">Time</span>(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin = <span class="number">12</span>, <span class="keyword">int</span> tmpsec= <span class="number">12</span>;); <span class="comment">//函数声明h 正确</span></span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong></p>
<ul>
<li><strong>有三个参数的构造函数带一个默认参数，如果有带两个参数的构造函数，当你赋2个值的时候就会报错，系统不知道调用哪一个。</strong></li>
</ul>
<h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a><strong>隐式转换</strong></h2><p><strong>系统会能够把把比如int类型转换成其他类型，比如说上面定义的Time类都行</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Time的构造函数带一个参数</span></span><br><span class="line">Time mytime = <span class="number">16</span>； <span class="comment">//int转Time类 == Time mytime = Time(16) </span></span><br><span class="line">Time mytime = &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;;  <span class="comment">//可以，相当于上面的Time mytime = 15</span></span><br></pre></td></tr></table></figure>



<p><strong>禁止隐式类型转换:</strong></p>
<ul>
<li><strong>我们不需要隐式转换的时候，使用explict在函数声明前面加就行</strong></li>
<li><strong>对于单参数的构造函数，我们一般都需要在函数声明之前加explict。</strong></li>
</ul>
<h2 id="构造函数初始化列表"><a href="#构造函数初始化列表" class="headerlink" title="构造函数初始化列表"></a><strong>构造函数初始化列表</strong></h2><p><strong>构造函数初始化列表，在大括号里面之前成员变量已经就初始化了</strong></p>
<ul>
<li><strong>注意写法：:成员变量(形参),成员变量(形参)</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">Time</span>(<span class="keyword">int</span> tmphour,<span class="keyword">int</span> tmpmin,<span class="keyword">int</span> tmpsec) <span class="comment">//构造函数不能有返回值，void也不行</span></span><br><span class="line">    :<span class="built_in">Hour</span>(tmphour),<span class="built_in">Minute</span>(tmpmin),<span class="built_in">Second</span>(tmpsec),<span class="built_in">initMillTime</span>(<span class="number">0</span>)  <span class="comment">//注意写法：:成员变量(形参)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用了1的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>提倡：</strong></p>
<ol>
<li><strong>显得专业，高大上</strong></li>
<li><strong>效率上更高</strong></li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li><strong>构造函数初始化列表不能把其他成员变量放入形参的位置，因为成员变量的初始化顺序是由类里面声明的顺序从上往下的，所以这样赋值的化很可能会出现问题。</strong></li>
</ul>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的inline、const、mutable、this、static</title>
    <url>/22425.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">inline、const、mutable、this、static</span></strong></p>
<h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a><strong>inline</strong></h2><ul>
<li><strong>在类定义中实现成员函数inline：类内的成员函数其实也叫类内的成员函数定义</strong></li>
<li><strong>这种直接在类的定义中实现的成员的函数，会被当作inline内联函数处理</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addhour</span><span class="params">(<span class="keyword">int</span> tmphour)</span> </span>&#123;</span><br><span class="line">        Hour += tmphour;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="成员函数末尾加const"><a href="#成员函数末尾加const" class="headerlink" title="成员函数末尾加const"></a><strong>成员函数末尾加const</strong></h2><p><strong>const:常量，在成员函数后面加入一个cosnt。不但要在成员函数声明中增加const，也要在成员函数定义中加入const。</strong></p>
<p><strong>作用：告诉系统，这个成员函数不会修改该对象里任何成员变量的值等等。也就是说，这个成员函数不会修改Time的任何状态；</strong></p>
<ul>
<li><strong>屁股后面加入一个const后缀，也称“常量成员函数”</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Time sdsf; <span class="comment">//代表不能改</span></span><br><span class="line">sdsfg.<span class="built_in">initMillTime</span>(); <span class="comment">//错误，initMillTime()不是const成员函数，initMillTime()只能被非const对象调用。</span></span><br></pre></td></tr></table></figure>



<p><strong>写常量成员函数的方法：</strong></p>
<p><strong>h中声明:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addhour</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>



<p><strong>cpp中实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::addhour</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    Minute = <span class="number">2</span>; <span class="comment">//错误，不能修改</span></span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>cpp中使用</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Time sdsf; <span class="comment">//代表不能改</span></span><br><span class="line">Time fdf;</span><br><span class="line">fdf.<span class="built_in">addhour</span>(); <span class="comment">//可以</span></span><br><span class="line">sdsf.<span class="built_in">addhour</span>(); <span class="comment">//可以</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>const成员函数，不管是不是const对象，都可以调用const成员函数。</strong></p>
</li>
<li><p><strong>而非const成员函数，是不能被const对象调用，只能被非const对象调用</strong></p>
</li>
</ul>
<p><strong>const不能放在普通函数后面。</strong></p>
<ul>
<li><strong>因为const代表成员函数不会改变对象的值</strong></li>
<li><strong>而普通函数没有对象，成员函数的概念</strong></li>
<li><strong>即一定要用在在类中声明时后面加const，并且在定义时成员函数后面加const</strong></li>
</ul>
<h2 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a><strong>mutable</strong></h2><ul>
<li><p><strong>不稳定，容易改变的意思</strong></p>
</li>
<li><p><strong>用于解决const对象仍然能够改变某些一定要改变值</strong></p>
</li>
<li><p><strong>用mutable修饰一个成员变量，一个成员变量一旦被mutable修饰了就表示这个成员变量永远处于可被修改的状态，即便是在const修饰的成员函数.。</strong></p>
</li>
</ul>
<h2 id="返回自身对象的引用this"><a href="#返回自身对象的引用this" class="headerlink" title="返回自身对象的引用this"></a><strong>返回自身对象的引用this</strong></h2><p><strong>h中声明:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Time&amp; <span class="title">add_hour</span><span class="params">(<span class="keyword">int</span> tmp)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>cpp实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Time&amp; <span class="title">Time::add_hour</span><span class="params">(<span class="keyword">int</span> tmp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    Hour += tmp;  <span class="comment">//和下面一个意思</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;Hour = <span class="number">3</span>; <span class="comment">//this其实就是这个对象的指针</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//把对象自己引用返回了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>cpp使用:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> Time sdsf; <span class="comment">//代表不能改</span></span><br><span class="line">	Time mytime;</span><br><span class="line">	mytime.<span class="built_in">add_hour</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>把对象自己返回回去了</strong></p>
<p><strong>mytime地址：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th><strong>名称</strong></th>
<th><strong>值</strong></th>
<th><strong>类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>◢</strong></td>
<td><strong>&amp;mytime</strong></td>
<td><strong>0x00bbf74c {Hour=12 Minute=13 Second=59 …}</strong></td>
<td>**Time ***</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th><strong>名称</strong></th>
<th><strong>值</strong></th>
<th><strong>类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>◢</strong></td>
<td><strong>this</strong></td>
<td><strong>0x00bbf74c {Hour=12 Minute=13 Second=59 …}</strong></td>
<td>**Time ***</td>
</tr>
</tbody></table>
<p><strong>表示this就是指向该对象的指针</strong></p>
<p>*<strong>this就代表 mytime；</strong></p>
<p><strong>调用成员函数的时候，编译器负责把这个对象的地址(&amp;mytime)传递给这个成员函数中一个隐藏的this形参</strong></p>
<p><strong>在系统看来，任何对类成员的直接访问都是被看作通过this来做隐式调用的</strong></p>
<ul>
<li><strong>this指针只能在成员函数中使用，全局函数、静态函数都不能使用this指针</strong></li>
<li><strong>在普通函数中，this是一个指向非const对象的const指针</strong></li>
<li><strong>伪代码:(Time * const this),不能改变指针指向</strong></li>
<li><strong>在const成员函数中，this指针一个指向const对象的const指针（const Time * const this），就是什么都不能改</strong></li>
</ul>
<p><strong>如果形参和成员变量名重合，可以用this-&gt;成员变量名 来与形参名区别开来</strong></p>
<p><strong>但一般我们不在函数中写this</strong></p>
<ul>
<li>*<em>除了定义Time&amp; sss；Time&amp; sss函数return <em>this ，这种情况</em></em></li>
</ul>
<h2 id="statci成员"><a href="#statci成员" class="headerlink" title="statci成员"></a><strong>statci成员</strong></h2><p><strong>普通函数使用：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">6</span>; <span class="comment">//局部静态，可以多次使用，下面的修改，下次再使用不会重新刷新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b =<span class="number">5</span>；   <span class="comment">//全局也是在静态存储区</span></span><br></pre></td></tr></table></figure>



<p><strong>全局的static只能在这个cpp文件整个使用，但是其他的cpp文件不能够调用(而单纯的全局变量是可以的)</strong></p>
<p><strong>注意static：</strong></p>
<ol>
<li><strong>在这个函数内（全局就是在这整个cpp中），多次调用不会初始化</strong></li>
<li><strong>但出了这个函数（全局出了这个cpp中），是不能够使用的</strong></li>
</ol>
<p><strong>有属于整个类的成员变量，这种成员变量就叫做static成员变量。</strong></p>
<p><strong>特点：不属于某个对象，属于整个类，我们一旦在某个对象中修改了这个成员变量的值，在其他对象中是能够直接看到修改的结果的</strong></p>
<p><strong>这种成员变量只有一个副本，对于这种成员变量的引用，我们用的是类名::成员变量名</strong></p>
<p><strong>成员函数前面也可以加static构成静态成员函数。属于整个类的成员函数。调用时 :类名::成员函数名(…..){一般只能调用static对象}</strong></p>
<p><strong>定义静态成员变量的方法：</strong></p>
<p><strong>我们一般会在某一个cpp源文件中的开头来定义这个静态成员变量。这样能够保证在调用任何函数之前，这个静态成员变量就已经被初始了</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Time::mystatic = <span class="number">15</span>;  <span class="comment">//不给初值的话默认给0，定义的时候不需要使用static，</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>只能在一个cpp里面定义初始化</strong></li>
</ul>
<p><strong>mystatic不属于任何对象，这个成员变量影响全部的对象，是独立但跟关联的成员变量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time mytime;</span><br><span class="line">Time mystime2;</span><br><span class="line">cout &lt;&lt; Time::mystatic &lt;&lt; endl;   <span class="comment">//15</span></span><br><span class="line">mytime.mystatic = <span class="number">13</span>;</span><br><span class="line">cout &lt;&lt; mytime.mystatic &lt;&lt; endl; <span class="comment">//13</span></span><br><span class="line">cout &lt;&lt; Time::mystatic &lt;&lt; endl;  <span class="comment">//13</span></span><br><span class="line">mytime2.mystatic = <span class="number">80</span>;</span><br><span class="line">cout &lt;&lt; mytime.mystatic &lt;&lt; endl;  <span class="comment">//80</span></span><br></pre></td></tr></table></figure>



<p><strong>写静态成员函数，它也是跨对象的</strong></p>
<p><strong>静态必须使用类名::定义，不管是变量/函数</strong></p>
<p><strong>使用的时候三种都表示一个意思：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">mstastatic</span>(<span class="number">14</span>);</span><br><span class="line">mytime.<span class="built_in">mstastatic</span>(<span class="number">13</span>);</span><br><span class="line">mytime2.<span class="built_in">mstastatic</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure>



<p><strong>但静态函数不能改非静态变量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::mstastatic</span><span class="params">(<span class="keyword">int</span> tevalue)</span> </span>&#123;</span><br><span class="line">	Minute = <span class="number">134</span>; <span class="comment">//不可以，它必须跟某个对象绑定</span></span><br><span class="line">	mystatic=<span class="number">233</span>; <span class="comment">//可以，它只跟类绑定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的友元函数、友元类、友元成员函数</title>
    <url>/22825.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">友元函数、友元类、友元成员函数<br></span></strong></p>
<ol>
<li><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><p>一、友元函数,这是个函数</p>
<ul>
<li>public，protected，private只允许本类的访问</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> Men&amp; tep)</span> </span>&#123;</span><br><span class="line">    tep.<span class="built_in">funcmy</span>();  <span class="comment">//funcmy()是men类的私有函数，所以调用失败了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>但只要让函数func成为类Men的友元函数，那么func这个函数就能访问Men类中的所有成员</li>
</ul>
<p>写法:</p>
<p>在类内声明里面不管什么地方写：</p>
<p>friend+函数声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> Men&amp; tep)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>友元函数必须不能在类里面，比如说可以在main函数外定义。</p>
</li>
<li><p>友元函数不属于类的成员，所以友元函数声明不受限制</p>
</li>
</ul>
<p>总结：友元函数func是个函数，通过在别的类里面用friend+函数声明，成为这个类的友元函数，拥有这个类全部的访问权</p>
<h2 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h2><ul>
<li>友元类是个类</li>
<li>可以把其他的类定义成友元类。如果你是我的友元类，那么你就可以在你的成员函数中访问我的私有成员，包括public、private、protected</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callss</span><span class="params">(<span class="keyword">int</span> x, A&amp; a)</span> </span>&#123;</span><br><span class="line">        a.data = x; <span class="comment">//肯定不行，不能访问A类的私有成员</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>当我们修改A，让类B成为A的友元类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span> <span class="comment">//虽然先定义的是A，但并没有报错</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callCAF</span><span class="params">(<span class="keyword">int</span> x, A&amp; a)</span> </span>&#123;</span><br><span class="line">        a.data = x; <span class="comment">//肯定不行，不能访问A类的私有成员</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	A a;</span><br><span class="line">	B b;</span><br><span class="line">    b.<span class="built_in">ccallCAF</span>(<span class="number">3</span>, a); <span class="comment">//行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<ul>
<li><p>每个类都负责控制自己的友元函数或者友元类：</p>
</li>
<li><p>友元关系不能被继承、</p>
</li>
<li><p>友元关系都是单项的，a是b的友元，不表示b是a的友元</p>
</li>
<li><p>友元没有传递性，比如类a是类b的友元，类b是类c的友元，并不表示类c是类a的友元</p>
</li>
<li><p>写友元成员函数，必须注意代码组织结构，因为里面有声明以及定义</p>
</li>
</ul>
<p>写法:</p>
<p>在A类声明中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>;</span> <span class="comment">//类声明，要用到这里面的成员函数就不行;错误。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;C.h&quot;</span> <span class="comment">//确保编译器确定类C里面有callCAF的函数</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">C::callCAF</span><span class="params">(<span class="keyword">int</span> x; A&amp; A)</span></span>; <span class="comment">//该函数时友元成员函数的声明</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<ul>
<li>在类里面构造别人类的友元函数这个函数必须是public属性，私有的不行</li>
</ul>
<ul>
<li><p>优点：允许在特定情况下某些非成员函数访问类中的protected和private成员，从而提出友元函数，是protect，private成员更灵活</p>
</li>
<li><p>缺点：破坏了类的封装性质，降低了类的可靠性以及维护性；</p>
</li>
</ul>
</li>
</ol>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的拷贝构造函数</title>
    <url>/22025.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">拷贝构造函数</span></strong></p>
<h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><ul>
<li>默认情况下，类对象拷贝是每个成员变量逐个拷贝</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time mytime; <span class="comment">//无参的构造函数不能带()，带()无参就是代表方法了，而不是生成对象</span></span><br><span class="line"><span class="function">Time <span class="title">mytime3</span><span class="params">(mytime)</span></span>; <span class="comment">//都是拷贝</span></span><br><span class="line">Time mytime4 = &#123; mytime &#125;;</span><br><span class="line">Time mytime6 = mytime;</span><br></pre></td></tr></table></figure>

<p>346都是拷贝出来的，mytime每个值都被拷贝一份给346</p>
<ul>
<li>如果一个类的构造函数的第一个参数是所属的类类型的引用。如果还有其他的额外参数，那么这些额外的参数都有默认的值，这个构造函数就叫做拷贝构造函数</li>
<li>函数默认参数必须放在函数声明中，除非该函数没有函数声明</li>
</ul>
<p>拷贝构造函数的作用：</p>
<ul>
<li>会在一定的时机，会被系统自动调用</li>
</ul>
<p>写法：</p>
<p>h中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>(<span class="keyword">const</span> Time&amp; tmptime,<span class="keyword">int</span> b =<span class="number">4</span>); <span class="comment">//第一个参数是所属类的引用，如果给其他参数必须给初始值</span></span><br><span class="line"><span class="comment">//Time(Time&amp; tmptime, int a = 4,int b =3); //错误，只能有一个拷贝构造函数</span></span><br></pre></td></tr></table></figure>



<p>cpp中写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">Time</span>(<span class="keyword">const</span> Time&amp; tmpvel, <span class="keyword">int</span> b)&#123; <span class="comment">//一般拷贝构造函数都用const Time&amp; vel</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用了拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time mytime; <span class="comment">//无参的构造函数不能带()，带()无参就是代表方法了，而不是生成对象</span></span><br><span class="line"><span class="function">Time <span class="title">mytime3</span><span class="params">(mytime)</span></span>; <span class="comment">//都是拷贝   &quot;调用了拷贝构造函数&quot;</span></span><br><span class="line">Time mytime4 = &#123; mytime &#125;;<span class="comment">//都是拷贝  &quot;调用了拷贝构造函数&quot;</span></span><br><span class="line">Time mytime6 = mytime;<span class="comment">//都是拷贝  &quot;调用了拷贝构造函数&quot;</span></span><br><span class="line">Time mytime7;</span><br><span class="line">mytime7 = mytime <span class="comment">//不是采用拷贝构造函数了</span></span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ol>
<li>建议拷贝构造函数第一个参数总是带着const</li>
<li>拷贝构造函数一般不要声明成explicit</li>
<li>成员变量逐个拷贝，但他会在我们自己定义的拷贝构造函数的存在而丢失了作用，我们自己构造的拷贝构造函数使系统给你构造的合成拷贝构造函数失效了</li>
<li>如果是编译器给我们构造的合成拷贝构造函数，这个合成拷贝构造函数会帮我们把对象的成员变量逐个复制到另外一个对象的成员变量中</li>
<li>每个成员类型决定它如何拷贝，比如说成员变量是整型，就直接拷贝过来</li>
<li>如果成员变量是类类型的话，那么就会调用这个类的拷贝构造函数来拷贝</li>
<li>如果你自己定义了拷贝构造函数，那么就取代了系统合成的拷贝构造函数，这个时候你就必须自己在拷贝构造函数里面给成员变量赋值，以免系统自动随意给你值</li>
</ol>
<p>还有一些会发生拷贝函数调用的情况:</p>
<ol>
<li>将一个对象作为实参传递给一个非引用类型的形参  func(mytime);</li>
<li>从一个函数中返回一个对象的时候；</li>
</ol>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的基类指针、虚和纯虚函数、多态性、虚析构函数</title>
    <url>/22625.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">基类指针、虚和纯虚函数、多态性、虚析构函数<br></span></strong></p>
<h2 id="基类、派生类指针"><a href="#基类、派生类指针" class="headerlink" title="基类、派生类指针"></a>基类、派生类指针</h2><h3 id="派生类指针"><a href="#派生类指针" class="headerlink" title="派生类指针"></a>派生类指针</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human* phuman = <span class="keyword">new</span> Human;  <span class="comment">//基类指针</span></span><br><span class="line">Men* pmen = <span class="keyword">new</span>  Men; <span class="comment">//派生类指针</span></span><br><span class="line"><span class="comment">//新玩法：父类指针可以new一个子类对象</span></span><br></pre></td></tr></table></figure>



<h3 id="基类指针"><a href="#基类指针" class="headerlink" title="基类指针"></a>基类指针</h3><ul>
<li>父类指针不能调动子类函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human* phuman = <span class="keyword">new</span> Men; <span class="comment">//父类指针可以生成一个子类指针</span></span><br><span class="line">phuman-&gt;<span class="built_in">funchuman</span>();  <span class="comment">//可以</span></span><br><span class="line"><span class="comment">//phuman-&gt;funmen(); </span></span><br><span class="line"><span class="comment">//虽然你new的是子类对象，但你是父类指针，无法调用子类函数</span></span><br><span class="line">phuman-&gt;<span class="built_in">eat</span>(); <span class="comment">//调用的是父类的eat函数，而不是men的eat函数</span></span><br></pre></td></tr></table></figure>



<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>需要一个解决方法使我们只定义一个对象指针，就能调用父类以及各个子类的同名函数</p>
<p>解决办法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human* phuman = <span class="keyword">new</span> Men;</span><br><span class="line">phuman-&gt;eat;<span class="comment">//调用的是父类的eat函数，无法使用子类的eat函数</span></span><br></pre></td></tr></table></figure>



<ul>
<li>如果我们想通过一个父类指针调用父类、子类中的同名同参数的函数的话，对这个函数也是有要求:<ul>
<li>在父类中，eat函数声明之前必须要加virtual声明eat()函数成虚函数</li>
</ul>
</li>
</ul>
<p>父类中操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;人类吃各种粮食&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>一旦某个函数(在基类)声明成虚函数，那么子类的同名函数都是属于virtual</li>
</ul>
<p>改造后：</p>
<p>h中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>



<p>CPP使用中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human* phuman = <span class="keyword">new</span> Men; <span class="comment">//父类指针可以生成一个子类指针</span></span><br><span class="line">phuman-&gt;<span class="built_in">eat</span>();<span class="comment">//调用的是men子类的指针</span></span><br><span class="line"><span class="keyword">delete</span> phuman;</span><br><span class="line"></span><br><span class="line">phuman = <span class="keyword">new</span> Women;</span><br><span class="line">phuman-&gt;<span class="built_in">eat</span>();<span class="comment">//调用的是women子类的指针</span></span><br><span class="line"><span class="keyword">delete</span> phuman;</span><br><span class="line"></span><br><span class="line">phuman = <span class="keyword">new</span> Human;</span><br><span class="line">phuman-&gt;<span class="built_in">eat</span>();<span class="comment">//调用的Human类的指针</span></span><br><span class="line"><span class="keyword">delete</span> phuman;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>父类的同名函数不是虚函数的时候，new出来的指针不管是那个子类，都是只能调用父类的函数</li>
<li>当父类的同名函数是虚函数的时候，new子类出来的指针，虽然是父类指针，但调动的可以是子类函数，主要是看它new谁</li>
</ul>
<h3 id="override关键字"><a href="#override关键字" class="headerlink" title="override关键字"></a>override关键字</h3><ul>
<li>为了避免你在子类中写错虚函数，在C++11中可以在函数声明中增加一个override关键字<ul>
<li>这个关键字 用在“子类”中</li>
</ul>
</li>
<li>override关键字可以用来说明派生类中的虚函数，你用了这个关键字之后，编译器就会认为你这个eat覆盖了父类中的同名同参的函数，那么编译器就会在父类中找到同名同参的虚函数，如果没找到，编译就会报错。这样，如果你没写好虚函数，那么可以帮你纠错。</li>
<li>一般override在子类声明里面写</li>
</ul>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul>
<li><p>final与override相反</p>
</li>
<li><p>final也是虚函数专用，但是用在父类中，如果我们在父类的函数声明中加入final，那么任何尝试覆盖父类函数的行为都会报错，拒绝给你访问</p>
</li>
</ul>
<p>总结：</p>
<ul>
<li>调用虚函数执行的是“动态绑定”。动态表示的是我们程序运行的时候才知道我们使用了那个子类或是父类的eat()函数</li>
<li>动态的绑定的是是Men还是，Women取决于new的是Men还是Women；</li>
<li>动态绑定:运行的时候才知道运行的是那个eat函数。</li>
</ul>
<p>不用虚函数的话，生成那个对象，调用的eat肯定是属于它自己类的函数，不可能是其他子类或者父类的函数。</p>
<ul>
<li>这样就体现不出来了</li>
</ul>
<h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><ul>
<li>多态性：知识针对虚函数来说可以理解</li>
</ul>
<p>多态性的体现：</p>
<ul>
<li>体现具有继承关系的父类和子类之间，子类重新定义(重写)父类的成员函数eat()，同时父类把这个eat()函数声明成了virtual虚函数</li>
<li>通过父类指针，只有运行到了程序运行时期，找到了绑定到父类指针上的对象，这个对象他有可能是某个子类对象，也可能是父类对象</li>
<li>然后系统内部实际上要查一个虚函数表，找到eat函数的入口地址，从而调用父类或子类的eat函数，这就是运行时期的多态性</li>
</ul>
<h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><ul>
<li>纯虚函数 是在基类中声明的虚函数，但是他在基类中没有定义，但是要求任何派生类都要定义该虚函数的实现方法</li>
</ul>
<p>基类中实现纯虚函数的方法:</p>
<ul>
<li>在基类的虚函数，它没有定义，但让他在声明中等于0</li>
</ul>
<p>humanh中:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat2</span><span class="params">()</span> </span>= <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>cpp使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human human;  <span class="comment">//报错</span></span><br><span class="line">Human* phuman = <span class="keyword">new</span> Men;  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>



<ul>
<li>一旦一个类中有纯虚函数，那么你就不能生成这个类的对象了(父类指针也不行);</li>
<li>那么这个类就成为了抽象类了</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li><p>一旦有纯虚函数，那么这个类就变成抽象类</p>
</li>
<li><p>一旦基类中的虚函数没有定义，而是直接让他等于0，那么这个类就成为了抽象类</p>
</li>
</ul>
<p>作用：</p>
<ul>
<li>主要用来统一管理子类对象</li>
</ul>
<p>记住两点：</p>
<ol>
<li>函数虚函数的类 叫抽象类，不能用来定义该类对象，主要用来做基类来生成子类用的</li>
<li>子类必须实现该基类中定义的纯虚函数;</li>
</ol>
<p>纯虚函数不实现该基类的虚函数是不能给你生成的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Human* phuman = new Men;</span><br></pre></td></tr></table></figure>



<p>想让这个实现的办法：</p>
<ul>
<li>子类实现该虚函数</li>
</ul>
<p>h中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat2</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>或cpp定义里实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>纯虚函数不能new自己这个父类</li>
</ul>
<h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><ul>
<li>基类的虚构函数一般写出虚函数(虚析构函数)</li>
</ul>
<p>普通的虚构函数的问题：</p>
<ul>
<li>父类指针只执行了自己的父类析构函数</li>
<li>没调用子类的析构函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Human* phuman = <span class="keyword">new</span> Men;</span><br><span class="line"><span class="keyword">delete</span> phuman;  <span class="comment">//没有执行子类的析构函数</span></span><br></pre></td></tr></table></figure>



<p>结论：用基类指针new子类对象的时候，在delete的时候系统不会调用派生类的析构函数，这就会发生问题</p>
<p>解决方法:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Human</span>();</span><br></pre></td></tr></table></figure>



<p>在public继承中，基类对派生类及其对象的操作，只能影响到那些从基类继承下来的成员</p>
<ul>
<li>如果想要用基类对非继承成员进行操作，则要把这个基类的函数定义为虚函数，析构函数也如此</li>
<li>另外就是基类中的析构函数的虚属性也会被继承给子类，这样的话子类中的析构函数也就自然而然成为了虚函数，虽然名字和基类的析构函数不同</li>
<li>delete phuman的时候肯定是要调用父类的析构函数，但在父类中想要调用子类的Men的析构函数，那么Human这个类中的析构函数就要声明为virtual，也就是说C++中为了获得运行时候的多态行为，所调用的成员函数必须是virtual；</li>
</ul>
<p>结论：</p>
<ol>
<li>如果一个类想要做积累，我们务必要把这个基类的析构函数写成virtual析构函数</li>
<li>只要基类的析构函数是虚函数，就能够保证我们delete基类指针时候能运行正确的析构函数版本</li>
<li>普通类我们可以不写析构函数，但如果是基类，就必须写一个析构函数，并且还是虚析构函数</li>
<li>虚函数会增加内存开销，类里面定义虚函数，编译器就会给这个类增加虚函数表，在这个表存虚函数的指针</li>
</ol>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的派生类、调用顺序、访问等级与函数遮蔽</title>
    <url>/22525.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">派生类、调用顺序、访问等级与函数遮蔽<br></span></strong></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p>继承这种概念是我们面向对象程序设计的核心思想之一；</p>
</li>
<li><p>继承：</p>
<ol>
<li>我们首先要定义一个父类。父类中定义一些公用的成员变量，成员函数。</li>
<li>然后我们可以通过继承父类来构建新的类：子类。写代码的时候，我们只需要写子类相关的一些内容即可；</li>
</ol>
</li>
<li><p>子类一般比父类更加强大</p>
</li>
<li><p>继承可以继承多个父类</p>
</li>
</ul>
<h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>F10往下走:不进入函数   F11：往下走(进入函数)</p>
<p>类之间有一种层次关系，有父亲类、孩子类</p>
<ul>
<li>车这个类，当成父类(也叫基类，超类)，派生出卡车、轿车，他们属于孩子类（子类/派生类）</li>
<li>有父亲类和孩子类，构成了层次的关系</li>
</ul>
<p>继承的语法:</p>
<p>h中:</p>
<ul>
<li>class 子类名：继承方式 父类名{ };</li>
</ul>
<p>….</p>
<p>继承图：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/u=3651103621,3426519438&fm=26&fmt=auto&gp=0.webp"></p>
<h2 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h2><p>继承的时候构造函数的执行顺序是</p>
<ol>
<li>父类的构造函数</li>
<li>子类的构造函数</li>
</ol>
<h2 id="public、protected、private"><a href="#public、protected、private" class="headerlink" title="public、protected、private"></a>public、protected、private</h2><p>三种访问权限：</p>
<p>public：任意实体所访问</p>
<p>protected：只允许本类和子类的成员函数访问</p>
<p>private：只允许本类的成员函数访问</p>
<h2 id="同名函数遮蔽"><a href="#同名函数遮蔽" class="headerlink" title="同名函数遮蔽"></a>同名函数遮蔽</h2><p>子类中如果有同名函数，那么父类中不管有几个同名函数，那么子类的对象都无法访问父类的了，子类把父类中的同名函数取代了</p>
<p>办法：</p>
<ol>
<li>在子类的成员函数中，用父类::父类的成员函数强行使用(在子类的同名函数中使用)</li>
<li>使用using关键字<ul>
<li>using：让父类同名函数在子类中可见</li>
<li>通过using这个关键字，让父类的同名函数中可见就是直接让它在子类重载</li>
</ul>
</li>
</ol>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的类内初始化、默认构造函数、=default</title>
    <url>/22517.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">类内初始化、默认构造函数、=default</span></strong></p>
<h2 id="类相关非成员函数"><a href="#类相关非成员函数" class="headerlink" title="类相关非成员函数"></a>类相关非成员函数</h2><p>有点关系，但关系不大，可以放在类外作为普通函数</p>
<p>实现：</p>
<p>h内填：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>&#123;</span></span><br><span class="line">......</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteTime</span><span class="params">(Time&amp; mytime)</span></span>;</span><br></pre></td></tr></table></figure>



<p>cpp实现内填:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteTime</span><span class="params">(Time &amp;mytime)</span> </span>&#123;  <span class="comment">//用了类的引用，注意不能填Time::</span></span><br><span class="line">    cout &lt;&lt; mytime.Hour &lt;&lt; endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>cpp使用:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Time <span class="title">mytime</span><span class="params">(<span class="number">13</span>, <span class="number">14</span>, <span class="number">145</span>)</span></span>;</span><br><span class="line">    <span class="built_in">WriteTime</span>(mytime); <span class="comment">//普通函数直接写，不需要使用调用符号.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="类内初始化"><a href="#类内初始化" class="headerlink" title="类内初始化"></a>类内初始化</h3><ul>
<li>在C++11内我们可以为类内的成员变量提供一个初始值，那么我们在创建对象的时候，这个初始化值就用来初始化该成员变量。</li>
</ul>
<p>类内初始化就是直接在h声明的时候直接给值：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Second = <span class="number">4</span>; <span class="comment">//秒</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>构造函数也可以初始化，它会把类内初始化给覆盖。</p>
<p>但我们一般也使用构造函数进行初始化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">Time</span>() :<span class="built_in">Hour</span>(<span class="number">12</span>),<span class="built_in">Minute</span>(<span class="number">13</span>)....&#123;</span><br><span class="line">  .....  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="const成员变量的初始化"><a href="#const成员变量的初始化" class="headerlink" title="const成员变量的初始化"></a>const成员变量的初始化</h3><p>const必须给初值</p>
<ol>
<li><p>方法1：</p>
<p>h内：</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> testcvel =<span class="number">80</span> ; <span class="comment">//可以</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>方法2：</p>
<p>h内不给初值：</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> testcvel;</span><br></pre></td></tr></table></figure>

<p>cpp实现内：</p>
<ul>
<li>每个构造函数都得赋初值，可以用:vale() 赋值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">Time</span>() :<span class="built_in">testcvel</span>(<span class="number">34</span>)&#123;  <span class="comment">//给值后才真正具有const作用，之前只是声明并未实现const</span></span><br><span class="line">    Hour = <span class="number">12</span>;</span><br><span class="line">    Minute = <span class="number">13</span>;</span><br><span class="line">    Second = <span class="number">59</span>;</span><br><span class="line">    <span class="built_in">initMillTime</span>(<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用了2的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Time::<span class="built_in">Time</span>(<span class="keyword">int</span> tmphour, <span class="keyword">int</span> tmpmin, <span class="keyword">int</span> tmpsec) :<span class="built_in">testcvel</span>(<span class="number">23</span>)&#123; </span><br><span class="line">    Hour = tmphour;</span><br><span class="line">    Minute = tmpmin;</span><br><span class="line">    Second = tmpsec;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;调用了1的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">     <span class="comment">//私有函数的调用，OK的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>const成员变量的初始化，在构造函数的初始化列表中进行，不可以通过赋值语句进行初始化</li>
</ul>
<h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><p>没有参数的构造函数就叫做默认构造函数</p>
<ul>
<li>如果没有写构造函数，那么这个类会通过特殊的构造函数来进行初始化，这个特殊的构造函数就叫做“默认构造函数”，也就是无参数的构造函数（它的值会随机）</li>
<li>原来，在我们类定义中，如果没有构造函数的情况下，编译器会为我们隐式自定义一个默认的构造函数（无参）。称为“合成的默认构造函数”</li>
</ul>
<p>“合成的默认函数”：没有给值的会随机给乱值，给值的直接赋值，但它的作用很小</p>
<ul>
<li>如果你自己定义了构造函数（不管带几个参数），系统就不会构造合成的默认构造函数了，你初始化使用的时候不带参数就会报错（除非你定义的就是无参数的构造函数）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>() &#123;&#125;; <span class="comment">//在h加入&#123;&#125;可以让编译器自动生成函数体，就不需要在cpp实现里面再写函数实现了Time(int)&#123;&#125;;</span></span><br></pre></td></tr></table></figure>



<h2 id="default，-delete；"><a href="#default，-delete；" class="headerlink" title="=default，=delete；"></a>=default，=delete；</h2><ul>
<li><p>C++11标准引用的</p>
<p>在h头文件中我们直接写：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>() = <span class="keyword">default</span>; <span class="comment">//编译器为这种=default的函数自动生成函数体</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编译器自动帮我们生成函数体</li>
</ul>
<p>错误:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>(<span class="keyword">int</span>) =<span class="keyword">default</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li> 带了参数就不是可默认的特殊函数。</li>
</ul>
<ul>
<li><p>普通函数不能写=default</p>
</li>
<li><p>特殊的构造函数才能使用=default</p>
</li>
<li><p>带参数的构造函数(普通)不能使用default</p>
</li>
</ul>
<p>当然也可以</p>
<p>在h中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>();</span><br></pre></td></tr></table></figure>

<p>在cpp中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">Time</span>() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure>





<p>在h内：</p>
<ul>
<li>=default  可以等价于{}</li>
<li>让系统帮我们写构造函数的函数体</li>
</ul>
<ul>
<li>=delete（让程序员显式的禁用构造函数）</li>
</ul>
<p>h：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Time</span>() = <span class="keyword">delete</span>; <span class="comment">//禁止系统给你生成不带参数的默认构造函数</span></span><br></pre></td></tr></table></figure>



<p>若cpp：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time mytime; <span class="comment">//就会报错，因为你不让系统给你生成不带参数的默认构造函数，你不带参数，无对应的构造函数就不能生成对象</span></span><br></pre></td></tr></table></figure>






<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的重载运算符与拷贝运算符、析构函数</title>
    <url>/22225.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">C++</span><span id="green-block">基础语法</span><span id="gray-block">重载运算符与拷贝运算符、析构函数<br>tags:</span></strong></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p>运算符：=、++、–、==…..</p>
<p> 两个对象真的不能够进行==比较吗?</p>
<ul>
<li>是可以的，我们需要重载”==”运算符</li>
<li>说白了就是我们要写一个成员函数，这个成员函数名“operator==”,这个成员函数体里面，我们要写一些比较逻辑</li>
</ul>
<p>伪代码: </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(mytime.Hour = mytime2.Hour)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>重载运算符本质上是一个函数。整个函数的正式名字 ：operator关键字 接 运算符</li>
<li>既然重载运算符本身也是一个函数，那么会有返回类型和参数列表</li>
<li>有些运算符，如果我们不字节写，该运算符的重载，系统会自动给我们生成一个。比如赋值运算符</li>
</ul>
<h3 id="拷贝赋值运算符"><a href="#拷贝赋值运算符" class="headerlink" title="拷贝赋值运算符"></a>拷贝赋值运算符</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time myTime6;</span><br><span class="line">myTime6 = myTime; </span><br></pre></td></tr></table></figure>



<ul>
<li>=：赋值运算符，这个myTime6 = myTime; 既没调用构造函数，也没调用拷贝构造函数</li>
<li>我们自己不重载运算符，编译器也会帮我们自己生成一个赋值运算符</li>
<li>一般就是将非static成员赋值给赋值运算符左侧的对象对应的成员变量之中去</li>
<li>如果你这个成员是个类的话，还可能调用这个类的拷贝赋值运算符</li>
</ul>
<ul>
<li>为了精准控制Time类的赋值动作，我们往往会重载赋值运算符</li>
</ul>
<p>写法:</p>
<p>h中写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Time&amp;);  <span class="comment">//他是个函数</span></span><br></pre></td></tr></table></figure>

<p>cpp实现写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time&amp; Time::<span class="keyword">operator</span> = (<span class="keyword">const</span> Time&amp;) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用了赋值运算符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//time&amp; 返回return *this； 	`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>析构函数就是和构造函数相反的</p>
<p>对象在销毁的时候，会自动调用析构函数</p>
<ul>
<li>如果我们自己不写析构函数的时候，编译器也会生成一个默认的习惯函数。默认析构函数的函数体为{}，表示默认的析构函数没干什么有意义的事情</li>
<li>构造函数相当于new，那么析构函数可以当作delete</li>
<li>析构函数也是类的成员函数，名字是：~类名   构成，没有返回值，无参，不能被重载，一个给定的类，只能有一个析构函数</li>
</ul>
<p>函数重载：</p>
<ul>
<li>就是系统允许函数名字相同，但是这些同名函数的参数个数或类型不同，</li>
<li>系统根据参数的类型或长度不同，区别出你想要那个函数。</li>
</ul>
<p>h内：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~<span class="built_in">Time</span>();  <span class="comment">//和拷贝构造函数一样只能有一个</span></span><br></pre></td></tr></table></figure>



<p>cpp实现内：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time::<span class="built_in">Time</span>()&#123;.....&#125;  <span class="comment">//不能有返回值</span></span><br></pre></td></tr></table></figure>



<p>析构函数做了的事情：</p>
<ol>
<li><p>先执行函数体函数的函数体</p>
</li>
<li><p>再把这个类的对象进行销毁</p>
<ul>
<li>成员变量初始化和销毁的时机：</li>
</ul>
<ol>
<li>先定义的先初始化</li>
<li>先定义的后销毁</li>
</ol>
</li>
</ol>
<h2 id="用new生成对象"><a href="#用new生成对象" class="headerlink" title="用new生成对象"></a>用new生成对象</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time* pmytime5 = <span class="keyword">new</span> Time;</span><br><span class="line">Time* pmytime6 = <span class="keyword">new</span> <span class="built_in">Time</span>();</span><br><span class="line"><span class="keyword">delete</span> pmytime5;</span><br><span class="line"><span class="keyword">delete</span> pmytime6;</span><br></pre></td></tr></table></figure>



<p>自己new在堆里面的，必须自己delete，否则就会造成释放</p>
<p>你什么时候你new，系统立马调用类的构造函数</p>
<p>你什么时候delete掉，系统就会立马调用类的析构函数</p>
<p>一定要new和delete同时使用，防止内存泄漏过多</p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>C++</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>基础内容学习</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas入门</title>
    <url>/21423.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><h2 id="1-创建Series对象"><a href="#1-创建Series对象" class="headerlink" title="1.创建Series对象"></a>1.创建Series对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">34</span>,<span class="number">22</span>])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([ 1, 34, 22])
</code></pre>
<h3 id="1-1通过列表进行创建"><a href="#1-1通过列表进行创建" class="headerlink" title="1.1通过列表进行创建"></a>1.1通过列表进行创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series([<span class="number">23</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">45</span>,<span class="number">5</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0    23
1     2
2     1
3    45
4     5
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(s)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>pandas.core.series.Series
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整型的索引序列索引</span></span><br><span class="line">s.index <span class="comment">#有点像字典</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>RangeIndex(start=0, stop=5, step=1)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.values  <span class="comment">#转换成数组对象，因为是基于numpy上创建的</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([23,  2,  1, 45,  5], dtype=int64)
</code></pre>
<h3 id="1-2通过元组创建"><a href="#1-2通过元组创建" class="headerlink" title="1.2通过元组创建"></a>1.2通过元组创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series((<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)) s1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0    11    32    4dtype: int64
</code></pre>
<h3 id="1-3通过数组对象"><a href="#1-3通过数组对象" class="headerlink" title="1.3通过数组对象"></a>1.3通过数组对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = pd.Series(a) <span class="comment">#只有数组对象变成Series才变成int32，其他都是int64s2</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0     11    342    22dtype: int32
</code></pre>
<h3 id="1-4-通过字典创建"><a href="#1-4-通过字典创建" class="headerlink" title="1.4 通过字典创建"></a>1.4 通过字典创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = pd.Series(a,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a     1b    34c    22dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;名字&quot;</span>:<span class="string">&quot;马克&quot;</span>,<span class="string">&quot;年龄&quot;</span>:<span class="string">&quot;12&quot;</span>,<span class="string">&quot;父母&quot;</span>:np.nan&#125;</span><br><span class="line">s3 = pd.Series(d)s3  <span class="comment"># 字典生成的Seires是无序的</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>名字     马克年龄     12父母    NaNdtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = pd .Series(d,index=[<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;名字&quot;</span>,<span class="string">&quot;父母&quot;</span>])  <span class="comment"># 固定index顺序，无内容就会用NaN代替s3</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄     12名字     马克父母    NaNdtype: object
</code></pre>
<h2 id="2-简单的使用"><a href="#2-简单的使用" class="headerlink" title="2.简单的使用"></a>2.简单的使用</h2><h3 id="2-1-索引"><a href="#2-1-索引" class="headerlink" title="2.1 索引"></a>2.1 索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3.index</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Index([&#39;年龄&#39;, &#39;名字&#39;, &#39;父母&#39;], dtype=&#39;object&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄     12名字     马克父母    NaNdtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3[<span class="number">0</span>]  <span class="comment">#索引就是下标，支持负号索引</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&#39;12&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.标签名索引s3[&#x27;年龄&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&#39;12&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3[[<span class="number">1</span>,<span class="number">2</span>]]  <span class="comment">#选取的是第二行和第三行</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>名字     马克父母    NaNdtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下标切片</span></span><br><span class="line">s3[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment">#末尾取不到</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄    12名字    马克dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#标签切片，可以取到末尾</span></span><br><span class="line">s3[<span class="string">&quot;年龄&quot;</span>:<span class="string">&#x27;父母&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄     12名字     马克父母    NaNdtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line">s2 &gt;<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a    Falseb     Truec     Truedtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[s2&gt;<span class="number">2</span>]  </span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>b    34c    22dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 数组广播</span></span><br><span class="line">s2+<span class="number">3</span>  <span class="comment">#索引与数据对应关系不会受运算结果影响</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a     4b    37c    25dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.name =<span class="string">&#x27;人数&#x27;</span> <span class="comment">#给这个Series加说明s2</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a     1b    34c    22Name: 人数, dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.index.name =<span class="string">&#x27;班级&#x27;</span> <span class="comment">#给这个Series的索引加说明】</span></span><br><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>班级a     1b    34c    22Name: 人数, dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.T <span class="comment">#无法使用转置，因为一维数组无法进行行列互换</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>班级a     1b    34c    22Name: 人数, dtype: int32
</code></pre>
<h2 id="2-简单函数"><a href="#2-简单函数" class="headerlink" title="2.简单函数"></a>2.简单函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>班级a     1b    34c    22Name: 人数, dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.head() <span class="comment">#不加就默认前5行</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>班级a     1b    34c    22Name: 人数, dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.tail() <span class="comment">#不加就默认后5行</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>班级a     1b    34c    22Name: 人数, dtype: int32
</code></pre>
<h3 id="1-检测缺少值"><a href="#1-检测缺少值" class="headerlink" title="1.检测缺少值"></a>1.检测缺少值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3.isnull() <span class="comment"># 找缺失值</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄    False名字    False父母     Truedtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3.notnull() <span class="comment"># 找不缺失值</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄     True名字     True父母    Falsedtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~s3.notnull()  <span class="comment">#取反也能用</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>年龄    False名字    False父母     Truedtype: bool
</code></pre>
<h2 id="DataFrame-–表格型数据结构"><a href="#DataFrame-–表格型数据结构" class="headerlink" title="DataFrame –表格型数据结构"></a>DataFrame –表格型数据结构</h2><h3 id="1-创建方式"><a href="#1-创建方式" class="headerlink" title="1.创建方式"></a>1.创建方式</h3><h3 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data =&#123;<span class="string">&#x27;a&#x27;</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;b&#x27;</span> : (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>),<span class="string">&#x27;c&#x27;</span> : np.arange(<span class="number">7</span>,<span class="number">10</span>)&#125;df = pd.DataFrame(data)df  <span class="comment">#用列</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>4</td>
      <td>7</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>5</td>
      <td>8</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>6</td>
      <td>9</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(df)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>pandas.core.frame.DataFrame
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index 属性 行索引df.index</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>RangeIndex(start=0, stop=3, step=1)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], dtype=&#39;object&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[1, 4, 7],       [2, 5, 8],       [3, 6, 9]], dtype=int64)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(data,index=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>],columns=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>])  <span class="comment">#只能重命名行，改列名只能改变顺序，不能重命名</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>b</th>
      <th>c</th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>A</th>
      <td>4</td>
      <td>7</td>
      <td>1</td>
    </tr>
    <tr>
      <th>B</th>
      <td>5</td>
      <td>8</td>
      <td>2</td>
    </tr>
    <tr>
      <th>C</th>
      <td>6</td>
      <td>9</td>
      <td>3</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.series组成字典构造</span></span><br><span class="line">dataframedf2 = pd.DataFrame(&#123; <span class="string">&#x27;a&#x27;</span>:pd.Series(np.arange(<span class="number">3</span>)),<span class="string">&#x27;b&#x27;</span>: pd.Series(np.arange(<span class="number">3</span>,<span class="number">5</span>))&#125;)</span><br><span class="line">df2  </span><br><span class="line"><span class="comment">#理解为多个Series组成DataFrame的每一列</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.嵌套的字典组成字典构造</span></span><br><span class="line">DataFrame data1 =&#123;<span class="string">&#x27;a&#x27;</span>:&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">3.6</span>,<span class="string">&quot;banana&quot;</span>:<span class="number">5.6</span>&#125;,<span class="string">&#x27;b&#x27;</span>:&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">2.6</span>,<span class="string">&quot;banana&quot;</span>:<span class="number">1.6</span>&#125;,<span class="string">&#x27;c&#x27;</span>:&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">2.2</span>&#125;&#125;df3 = pd.DataFrame(data1)</span><br><span class="line">df3  <span class="comment">#先列后行</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>apple</th>
      <td>3.6</td>
      <td>2.6</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>banana</th>
      <td>5.6</td>
      <td>1.6</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>apple     3.6banana    5.6Name: a, dtype: float64
</code></pre>
<h3 id="1-2-列表类"><a href="#1-2-列表类" class="headerlink" title="1.2 列表类"></a>1.2 列表类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.DataFrame(arr,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">df4</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>b</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>c</th>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.DataFrame(arr,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])<span class="comment">#不能增加列了，因为数组已经固定形状了df4</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>b</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>c</th>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.字典使用构成列表构造</span></span><br><span class="line">dataframel1=[&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">3.4</span>,<span class="string">&#x27;banana&#x27;</span>:<span class="number">2.3</span>&#125;,&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;banana&#x27;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">3.4</span>&#125;]</span><br><span class="line">df5 = pd.DataFrame(l1)df5</span><br></pre></td></tr></table></figure>

<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>apple</th>
      <th>banana</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3.4</td>
      <td>2.3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.4</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l2 = [pd.Series(np.arange(<span class="number">3</span>)),pd.Series(np.arange(<span class="number">5</span>))]</span><br><span class="line">df6 = pd.DataFrame(l2)df6</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df6.T  <span class="comment">#表能行列互换，而Series不行</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>NaN</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.index.name =<span class="string">&#x27;次数&#x27;</span></span><br><span class="line">df3.columns.name =<span class="string">&#x27;次数&#x27;</span>  <span class="comment">#不代表某一列，只是代表意思df3</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>次数</th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
    <tr>
      <th>次数</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>apple</th>
      <td>3.6</td>
      <td>2.6</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>banana</th>
      <td>5.6</td>
      <td>1.6</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0    11    22    3Name: a, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3[<span class="string">&#x27;a&#x27;</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>3.6
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5.loc[<span class="number">0</span>] <span class="comment">#使用的是括号，loc标签索引,是先行后列</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>apple     3.4banana    2.3Name: 0, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>apple     3.4banana    2.3Name: 0, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5[<span class="string">&#x27;apple&#x27;</span>] = <span class="number">89</span></span><br><span class="line">df5</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>apple</th>
      <th>banana</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>89</td>
      <td>2.3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>89</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>89</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5[<span class="string">&#x27;apple&#x27;</span>] = [<span class="number">32</span>,<span class="number">4</span>,<span class="number">1</span>]  <span class="comment">#用这种方式改比较好df5</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>apple</th>
      <th>banana</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>32</td>
      <td>2.3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df6 =df5[<span class="string">&#x27;apple&#x27;</span>][<span class="number">0</span>] =<span class="number">2</span> <span class="comment">#对原数组没有改变，所以有警告df6结果：</span></span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\ipykernel_launcher.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy  &quot;&quot;&quot;Entry point for launching an IPython kernel.





2
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增</span></span><br><span class="line">df5[<span class="string">&#x27;a&#x27;</span>] =<span class="number">9</span> <span class="comment">#增加a列df5</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>apple</th>
      <th>banana</th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2</td>
      <td>2.3</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>1.0</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>NaN</td>
      <td>9</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5.loc[<span class="string">&#x27;d&#x27;</span>] =<span class="number">10</span></span><br><span class="line">df5   <span class="comment">#增加d列</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>apple</th>
      <th>banana</th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2</td>
      <td>2.3</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>1.0</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>NaN</td>
      <td>9</td>
    </tr>
    <tr>
      <th>d</th>
      <td>10</td>
      <td>10.0</td>
      <td>10</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5.append([<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">df5 <span class="comment">#增加没用</span></span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\pandas\core\indexes\api.py:107: RuntimeWarning: &#39;&lt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;, sort order is undefined for incomparable objects  result = result.union(other)
</code></pre>
<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>apple</th>
      <th>banana</th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2</td>
      <td>2.3</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>1.0</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>NaN</td>
      <td>9</td>
    </tr>
    <tr>
      <th>d</th>
      <td>10</td>
      <td>10.0</td>
      <td>10</td>
    </tr>
  </tbody>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df5.append(<span class="string">&#x27;e&#x27;</span>:[<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>,],ignore_index=<span class="literal">True</span>) <span class="comment">#错误的df5 #增加没用  </span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-80-58044b003f0c&gt;&quot;, line 1    df5.append(&#39;e&#39;:[0,9,3,3,],ignore_index=True) #错误的                  ^SyntaxError: invalid syntax
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame()</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">#慎用，需要设置前面的列</span></span><br></pre></td></tr></table></figure>



<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.append([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>7</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> df3[<span class="string">&#x27;a&#x27;</span>]  <span class="comment">#删除某列df3</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>次数</th>
      <th>b</th>
      <th>c</th>
    </tr>
    <tr>
      <th>次数</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>apple</th>
      <td>2.6</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>banana</th>
      <td>1.6</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.drop(<span class="string">&#x27;b&#x27;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment">#axis代表轴，1为列，0为行 inplace默认为farse 不修改原数组，需要变量去接受</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.loc[<span class="string">&#x27;banana&#x27;</span>:<span class="string">&#x27;apple&#x27;</span>:-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>次数</th>
      <th>c</th>
    </tr>
    <tr>
      <th>次数</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>banana</th>
      <td>NaN</td>
    </tr>
    <tr>
      <th>apple</th>
      <td>2.2</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#iloc 必须下标  loc必须为行名</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4.append(df5)</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\pandas\core\indexes\range.py:465: RuntimeWarning: &#39;&lt;&#39; not supported between instances of &#39;int&#39; and &#39;str&#39;, sort order is undefined for incomparable objects  return self._int64index.union(other)
</code></pre>
<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>apple</th>
      <th>banana</th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>4.0</td>
      <td>5.0</td>
      <td>6.0</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>c</th>
      <td>8.0</td>
      <td>9.0</td>
      <td>10.0</td>
      <td>11.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>2.3</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>d</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>10.0</td>
      <td>10.0</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([df4,df5])</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\pandas\core\indexes\range.py:465: RuntimeWarning: &#39;&lt;&#39; not supported between instances of &#39;int&#39; and &#39;str&#39;, sort order is undefined for incomparable objects
  return self._int64index.union(other)
</code></pre>
<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>apple</th>
      <th>banana</th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>4.0</td>
      <td>5.0</td>
      <td>6.0</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>c</th>
      <td>8.0</td>
      <td>9.0</td>
      <td>10.0</td>
      <td>11.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>2.3</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>d</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>10.0</td>
      <td>10.0</td>
    </tr>
  </tbody>
</table>










<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas对齐运算</title>
    <url>/21549.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series(np.arange(<span class="number">4</span>),index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">s2 = pd.Series(np.arange(<span class="number">5</span>),index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
b    1
c    2
d    3
dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
c    1
e    2
f    3
g    4
dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 + s2 <span class="comment">#任何数据加上nan都变成nan</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0.0
b    NaN
c    3.0
d    NaN
e    NaN
f    NaN
g    NaN
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.add(s2)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0.0
b    NaN
c    3.0
d    NaN
e    NaN
f    NaN
g    NaN
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.add(s2,fill_value=<span class="number">0</span>)  <span class="comment">#把默认的nan改为0</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0.0
b    1.0
c    3.0
d    3.0
e    2.0
f    3.0
g    4.0
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.DataFrame</span></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>),index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],columns= <span class="built_in">list</span>(<span class="string">&#x27;ABC&#x27;</span>))</span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],columns= <span class="built_in">list</span>(<span class="string">&#x27;ABD&#x27;</span>))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>d</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>f</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 + df2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>c</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>d</th>
      <td>12.0</td>
      <td>14.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>f</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.add(df2,fill_value=<span class="number">0</span>) <span class="comment">#把nan改为0，但如果两个表都为nan那么结果就只能为nan</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.0</td>
      <td>2.0</td>
      <td>2.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6.0</td>
      <td>7.0</td>
      <td>8.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>d</th>
      <td>12.0</td>
      <td>14.0</td>
      <td>11.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>f</th>
      <td>6.0</td>
      <td>7.0</td>
      <td>NaN</td>
      <td>8.0</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>/df1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>inf</td>
      <td>1.000000</td>
      <td>0.500000</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0.333333</td>
      <td>0.250000</td>
      <td>0.200000</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0.166667</td>
      <td>0.142857</td>
      <td>0.125000</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0.111111</td>
      <td>0.100000</td>
      <td>0.090909</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.rdiv(<span class="number">1</span>)  <span class="comment">#1是分子 df1是分母  r表示反方向</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>inf</td>
      <td>1.000000</td>
      <td>0.500000</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0.333333</td>
      <td>0.250000</td>
      <td>0.200000</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0.166667</td>
      <td>0.142857</td>
      <td>0.125000</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0.111111</td>
      <td>0.100000</td>
      <td>0.090909</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.div(<span class="number">1</span>)  <span class="comment">#表示df1除以1</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>




<h1 id="混合运算符"><a href="#混合运算符" class="headerlink" title="混合运算符"></a>混合运算符</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = df1.iloc[<span class="number">0</span>]</span><br><span class="line">s3</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>A    0
B    1
C    2
Name: a, dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s4 = df1[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">s4</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
b    3
c    6
d    9
Name: A, dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 - s3  <span class="comment">#数组的广播，表示DataFrame的每一行都减去Series</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>3</td>
      <td>3</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>6</td>
      <td>6</td>
    </tr>
    <tr>
      <th>d</th>
      <td>9</td>
      <td>9</td>
      <td>9</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.sub(s4,axis=<span class="number">0</span>)  <span class="comment">#改为从左往右减</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
  </tbody>
</table>


<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas索引操作</title>
    <url>/21554.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series(<span class="built_in">range</span>(<span class="number">5</span>),index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
b    1
c    2
d    3
e    4
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(s)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>pandas.core.series.Series
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.index[<span class="number">0</span>] =<span class="string">&#x27;A&#x27;</span> <span class="comment">#报错，不可修改</span></span><br></pre></td></tr></table></figure>


<pre><code>TypeError: Index does not support mutable operations
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1 = pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],columns = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(pd1.index))</span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.indexes.base.Index&#39;&gt;
</code></pre>
<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
  </tbody>
</table>





<h1 id="索引基本操作"><a href="#索引基本操作" class="headerlink" title="索引基本操作"></a>索引基本操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
b    1
c    2
d    3
e    4
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 1.增加</span></span><br><span class="line">s[<span class="string">&#x27;f&#x27;</span>] =<span class="number">9</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
b    1
c    2
d    3
e    4
f    9
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series(&#123;<span class="string">&quot;g&quot;</span> : <span class="number">999</span>&#125;)</span><br><span class="line">s1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>g    999
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = s.append(s1)</span><br><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a      0b      1c      2d      3e      4f      9g    999dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s + s1  <span class="comment">#不能组合起来</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a   NaN
b   NaN
c   NaN
d   NaN
e   NaN
f   NaN
g   NaN
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1[<span class="string">&quot;D&quot;</span>] = <span class="number">999</span></span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>999</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
      <td>999</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>999</td>
    </tr>
  </tbody>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1[<span class="number">2</span>] = [<span class="number">9</span>,<span class="number">11</span> ,<span class="number">12</span>]</span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>999</td>
      <td>9</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
      <td>999</td>
      <td>11</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>999</td>
      <td>12</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插入列</span></span><br><span class="line">pd1.insert(<span class="number">1</span>,<span class="string">&#x27;E&#x27;</span>,<span class="number">0</span>)  <span class="comment">#第一个参数插入的索引，第二个是列名，第三个是值pd1</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>999</td>
      <td>9</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>0</td>
      <td>4</td>
      <td>5</td>
      <td>999</td>
      <td>11</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>0</td>
      <td>7</td>
      <td>8</td>
      <td>999</td>
      <td>12</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插入行</span></span><br><span class="line">pd1.loc[<span class="string">&#x27;d&#x27;</span>] = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>]  <span class="comment">#数的个数必须对应pd1</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>999</td>
      <td>9</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>0</td>
      <td>4</td>
      <td>5</td>
      <td>999</td>
      <td>11</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>0</td>
      <td>7</td>
      <td>8</td>
      <td>999</td>
      <td>12</td>
    </tr>
    <tr>
      <th>d</th>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>4</td>
      <td>1</td>
      <td>2</td>
    </tr>
  </tbody>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd2 = pd1.append(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;E&#x27;</span>:<span class="number">2</span>&#125;,ignore_index=<span class="literal">True</span>) <span class="comment">#原本的就没了，重新重排成1-npd2</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>999.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>999.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>6.0</td>
      <td>0.0</td>
      <td>7.0</td>
      <td>8.0</td>
      <td>999.0</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>10.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>





<h2 id="2删除"><a href="#2删除" class="headerlink" title="2删除"></a>2删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> s[<span class="string">&#x27;f&#x27;</span>] <span class="comment">#只能删一次</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> (pd1[<span class="string">&#x27;D&#x27;</span>],pd1[<span class="number">2</span>])</span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>0</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>0</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>4</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1.drop([<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;C&#x27;</span>],axis=<span class="number">1</span>) <span class="comment">#列</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>d</th>
      <td>2</td>
      <td>2</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1.drop([<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],axis=<span class="number">0</span>) <span class="comment">#行</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>0</td>
      <td>4</td>
      <td>5</td>
    </tr>
  </tbody>
</table>





<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0
b    1
c    2
d    3
e    4
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s[<span class="string">&#x27;a&#x27;</span>] </span><br><span class="line">s.a</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">pd1.A  <span class="comment">#查完后就可以修改了</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0b    3c    6d    2Name: A, dtype: int64
</code></pre>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1.A = <span class="number">99</span></span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>99</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>99</td>
      <td>0</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>99</td>
      <td>0</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>99</td>
      <td>3</td>
      <td>2</td>
      <td>4</td>
    </tr>
  </tbody>
</table>





<h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0b    1c    2d    3e    4dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = s.reindex([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>])  <span class="comment">#重新排列索引顺序，没出现的索引默认赋值为nans2</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    0.0c    2.0b    1.0d    3.0e    4.0f    NaNg    NaNdtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd2 = pd1.reindex([<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])  <span class="comment">#排行pd2</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>E</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>b</th>
      <td>99</td>
      <td>0</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>a</th>
      <td>99</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>c</th>
      <td>99</td>
      <td>0</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>99</td>
      <td>3</td>
      <td>2</td>
      <td>4</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd3 = pd1.reindex(columns=[<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])pd3 = pd1.reindex([<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>],axis=<span class="number">1</span>)  <span class="comment">#排列pd3</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>E</th>
      <th>B</th>
      <th>A</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>99</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0</td>
      <td>4</td>
      <td>99</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0</td>
      <td>7</td>
      <td>99</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>3</td>
      <td>2</td>
      <td>99</td>
      <td>4</td>
    </tr>
  </tbody>
</table>





<h2 id="重命名rename"><a href="#重命名rename" class="headerlink" title="重命名rename"></a>重命名rename</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd4 = pd3.rename(columns=&#123;<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;A1&#x27;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;B1&#x27;</span>,<span class="string">&#x27;C&#x27;</span>:<span class="string">&#x27;C1&#x27;</span>,<span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;D1&#x27;</span>&#125;) <span class="comment">#改列名 用字典修改，区分大小写pd4</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>D1</th>
      <th>B1</th>
      <th>A1</th>
      <th>C1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>99</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0</td>
      <td>4</td>
      <td>99</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0</td>
      <td>7</td>
      <td>99</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d</th>
      <td>3</td>
      <td>2</td>
      <td>99</td>
      <td>4</td>
    </tr>
  </tbody>
</table>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd4 = pd3.rename(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;b1&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;d1&#x27;</span>&#125;,axis=<span class="number">0</span>) <span class="comment">#改行名pd4</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>E</th>
      <th>B</th>
      <th>A</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a1</th>
      <td>0</td>
      <td>1</td>
      <td>99</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b1</th>
      <td>0</td>
      <td>4</td>
      <td>99</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c1</th>
      <td>0</td>
      <td>7</td>
      <td>99</td>
      <td>8</td>
    </tr>
    <tr>
      <th>d1</th>
      <td>3</td>
      <td>2</td>
      <td>99</td>
      <td>4</td>
    </tr>
  </tbody>
</table>



<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas函数应用</title>
    <url>/21551.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h1 id="1-可以直接使用numpy的函数"><a href="#1-可以直接使用numpy的函数" class="headerlink" title="1.可以直接使用numpy的函数"></a>1.可以直接使用numpy的函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>))</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.768221</td>
      <td>-0.182766</td>
      <td>-1.159739</td>
      <td>0.199530</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-0.287240</td>
      <td>1.501903</td>
      <td>-2.696326</td>
      <td>-0.179408</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.181625</td>
      <td>-0.813152</td>
      <td>0.173545</td>
      <td>-0.767402</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1.000738</td>
      <td>-0.116408</td>
      <td>-0.774351</td>
      <td>0.142482</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.686464</td>
      <td>-0.160113</td>
      <td>0.927968</td>
      <td>0.106557</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.<span class="built_in">abs</span>(df)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.768221</td>
      <td>0.182766</td>
      <td>1.159739</td>
      <td>0.199530</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.287240</td>
      <td>1.501903</td>
      <td>2.696326</td>
      <td>0.179408</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.181625</td>
      <td>0.813152</td>
      <td>0.173545</td>
      <td>0.767402</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000738</td>
      <td>0.116408</td>
      <td>0.774351</td>
      <td>0.142482</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.686464</td>
      <td>0.160113</td>
      <td>0.927968</td>
      <td>0.106557</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.<span class="built_in">max</span>(df) <span class="comment">#求每一列</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    1.181625
1    1.501903
2    0.927968
3    0.199530
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.<span class="built_in">max</span>(df,axis=<span class="number">1</span>) <span class="comment"># 求每一行</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    0.768221
1    1.501903
2    1.181625
3    0.142482
4    0.927968
dtype: float64
</code></pre>
<h1 id="2-apply-和applymap"><a href="#2-apply-和applymap" class="headerlink" title="2. apply 和applymap"></a>2. apply 和applymap</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.768221</td>
      <td>-0.182766</td>
      <td>-1.159739</td>
      <td>0.199530</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-0.287240</td>
      <td>1.501903</td>
      <td>-2.696326</td>
      <td>-0.179408</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.181625</td>
      <td>-0.813152</td>
      <td>0.173545</td>
      <td>-0.767402</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1.000738</td>
      <td>-0.116408</td>
      <td>-0.774351</td>
      <td>0.142482</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.686464</td>
      <td>-0.160113</td>
      <td>0.927968</td>
      <td>0.106557</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x:x.<span class="built_in">max</span>()</span><br><span class="line">df.apply(f)  <span class="comment">#默认是行方向上的</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    1.181625
1    1.501903
2    0.927968
3    0.199530
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.apply(f,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    0.768221
1    1.501903
2    1.181625
3    0.142482
4    0.927968
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f2 = <span class="keyword">lambda</span> x:<span class="string">&#x27;%.2f&#x27;</span>%x</span><br><span class="line">df.applymap(f2) <span class="comment">#将函数应用到每个数据上，写出def也可以</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.77</td>
      <td>-0.18</td>
      <td>-1.16</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-0.29</td>
      <td>1.50</td>
      <td>-2.70</td>
      <td>-0.18</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.18</td>
      <td>-0.81</td>
      <td>0.17</td>
      <td>-0.77</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1.00</td>
      <td>-0.12</td>
      <td>-0.77</td>
      <td>0.14</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.69</td>
      <td>-0.16</td>
      <td>0.93</td>
      <td>0.11</td>
    </tr>
  </tbody>
</table>




<h1 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series(np.arange(<span class="number">4</span>),index = <span class="built_in">list</span>(<span class="string">&#x27;dbca&#x27;</span>))</span><br><span class="line">s1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>d    0
b    1
c    2
a    3
dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.sort_index()  <span class="comment"># 默认升序</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    3
b    1
c    2
d    0
dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.sort_index(ascending=<span class="literal">False</span>)  <span class="comment">#不识别汉字</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>d    0
c    2
b    1
a    3
dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.sort_values()</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>d    0
b    1
c    2
a    3
dtype: int32
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>),index=<span class="built_in">list</span>(<span class="string">&#x27;bdca&#x27;</span>),columns = <span class="built_in">list</span>(<span class="string">&#x27;BCA&#x27;</span>))</span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>B</th>
      <th>C</th>
      <th>A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>b</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>d</th>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>a</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>b</th>
      <td>2</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>d</th>
      <td>5</td>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>c</th>
      <td>8</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>a</th>
      <td>11</td>
      <td>9</td>
      <td>10</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1[<span class="string">&#x27;C&#x27;</span>] = <span class="number">0</span></span><br><span class="line">pd1.loc[<span class="string">&#x27;d&#x27;</span>] =<span class="number">0</span></span><br><span class="line">pd1</span><br></pre></td></tr></table></figure>

<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>B</th>
      <th>C</th>
      <th>A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>b</th>
      <td>0</td>
      <td>0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>0</td>
      <td>8</td>
    </tr>
    <tr>
      <th>a</th>
      <td>9</td>
      <td>0</td>
      <td>11</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd1.sort_values(by=[<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]) <span class="comment">#B相同的时候看A，再看C，多重标准</span></span><br></pre></td></tr></table></figure>

<p> 结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>B</th>
      <th>C</th>
      <th>A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>d</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0</td>
      <td>0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>c</th>
      <td>6</td>
      <td>0</td>
      <td>8</td>
    </tr>
    <tr>
      <th>a</th>
      <td>9</td>
      <td>0</td>
      <td>11</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd2 = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>],<span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,-<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>],<span class="string">&#x27;c&#x27;</span>:[<span class="number">0</span>,<span class="number">6</span>,-<span class="number">3</span>,<span class="number">2</span>]&#125;)</span><br><span class="line">pd2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7</td>
      <td>-1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>4</td>
      <td>-3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>8</td>
      <td>2</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd2.sort_values(by=<span class="string">&#x27;b&#x27;</span>) <span class="comment">#指定某一列进行排序</span></span><br><span class="line">pd2</span><br></pre></td></tr></table></figure>

<p>结果:    </p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7</td>
      <td>-1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>4</td>
      <td>-3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>8</td>
      <td>2</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd2[<span class="string">&#x27;a&#x27;</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">pd2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7</td>
      <td>-1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>4</td>
      <td>-3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>8</td>
      <td>2</td>
    </tr>
  </tbody>
</table>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd2.sort_values(by = <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>8</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7</td>
      <td>-1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>4</td>
      <td>-3</td>
    </tr>
  </tbody>
</table>




<h1 id="4-唯一值和成员属性"><a href="#4-唯一值和成员属性" class="headerlink" title="4.唯一值和成员属性"></a>4.唯一值和成员属性</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">s1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    2
a    6
c    8
c    9
c    8
c    3
c    6
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = s1.unique()</span><br><span class="line">arr</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>array([2, 6, 8, 9, 3], dtype=int64)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.index.is_unique</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>False
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[<span class="string">&#x27;a&#x27;</span>][<span class="number">0</span>:<span class="number">1</span>] <span class="comment">#需要用切片</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    2
dtype: int64
</code></pre>
<h2 id="数据个数统计"><a href="#数据个数统计" class="headerlink" title="数据个数统计"></a>数据个数统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.value_counts() <span class="comment">#数据统计</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>6    2
8    2
3    1
2    1
9    1
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.isin([<span class="number">8</span>]) <span class="comment">#检测这个值在不在</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    False
a    False
c     True
c    False
c     True
c    False
c    False
dtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.isin([<span class="number">8</span>,<span class="number">2</span>]) <span class="comment">#检测这两个值在不在</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a     True
a    False
c     True
c    False
c     True
c    False
c    False
dtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>],<span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,-<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>],<span class="string">&#x27;c&#x27;</span>:[<span class="number">0</span>,<span class="number">6</span>,-<span class="number">3</span>,<span class="number">2</span>]&#125;)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7</td>
      <td>-1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>4</td>
      <td>-3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>8</td>
      <td>2</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.isin([<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>2</th>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <th>3</th>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.a.value_counts()  <span class="comment">#a这列数据统计</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>7    1
3    1
9    1
0    1
Name: a, dtype: int64
</code></pre>
<h1 id="5-处理缺失值"><a href="#5-处理缺失值" class="headerlink" title="5.处理缺失值"></a>5.处理缺失值</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = pd.DataFrame([np.random.randn(<span class="number">3</span>), [<span class="number">1.</span>, <span class="number">2.</span>, np.nan],</span><br><span class="line">                    [np.nan, <span class="number">4.</span>, np.nan], [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]])</span><br><span class="line">df3</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>-1.566819</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>4.00000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.000000</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.isnull() <span class="comment">#很难检测</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1</th>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>2</th>
      <td>True</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>3</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.isnull().<span class="built_in">sum</span>() <span class="comment">#加上sum统计缺失值，0列有1个</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    1
1    0
2    2
dtype: int64
</code></pre>
<h2 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.删除</span></span><br><span class="line">df3.dropna()<span class="comment">#去掉缺失值，哪一行有就删哪一行</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>-1.566819</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.000000</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.dropna(axis=<span class="number">1</span>) <span class="comment">#那一列有缺失值就删那一列</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-0.41316</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2.00000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4.00000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2.00000</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.dropna(how=<span class="string">&#x27;all&#x27;</span>) <span class="comment">#要全部为nan才删除 默认为any</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>-1.566819</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>4.00000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.000000</td>
    </tr>
  </tbody>
</table>




<h2 id="2-填充缺失值"><a href="#2-填充缺失值" class="headerlink" title="2.填充缺失值"></a>2.填充缺失值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.fillna(<span class="number">0</span>) <span class="comment">#把nan的值填充为0，但有时候求了平均那些就不合理了</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>-1.566819</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.000000</td>
      <td>4.00000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.000000</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#填充平均值</span></span><br><span class="line">df3[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">df3</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>4.00000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.fillna(method=<span class="string">&#x27;ffill&#x27;</span>) <span class="comment">#根据上面的数据填充到下面来</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.000000</td>
      <td>4.00000</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.fillna(method=<span class="string">&#x27;bfill&#x27;</span>) <span class="comment">#根据下面的数据填充到上面来</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.498577</td>
      <td>-0.41316</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.000000</td>
      <td>4.00000</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.000000</td>
      <td>2.00000</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>


<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas统计计算和描述</title>
    <url>/21636.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=pd.DataFrame([[<span class="number">1.4</span>,np.nan],[<span class="number">7.1</span>,-<span class="number">4.5</span>],</span><br><span class="line">                [np.nan,np.nan],[<span class="number">0.75</span>,-<span class="number">1.3</span>]],</span><br><span class="line">                index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">                columns=[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1.40</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>7.10</td>
      <td>-4.5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0.75</td>
      <td>-1.3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>a    1.40
b    2.60
c    0.00
d   -0.55
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.idxmax()  <span class="comment">#找最大的行</span></span><br></pre></td></tr></table></figure>




<pre><code>one    b
two    d
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.cumsum()  <span class="comment">#往下聚合，斐波那契数列，自动忽略缺失值，只对DataFrame对象有用</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1.40</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>8.50</td>
      <td>-4.5</td>
    </tr>
    <tr>
      <th>c</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>d</th>
      <td>9.25</td>
      <td>-5.8</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.describe()  <span class="comment">#进行详细的统计</span></span><br><span class="line"><span class="comment">#1. 缺失值情况</span></span><br><span class="line"><span class="comment">#2. 平均值</span></span><br><span class="line"><span class="comment">#3. 最大值和最小值  异常值</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>3.000000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>3.083333</td>
      <td>-2.900000</td>
    </tr>
    <tr>
      <th>std</th>
      <td>3.493685</td>
      <td>2.262742</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.750000</td>
      <td>-4.500000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>1.075000</td>
      <td>-3.700000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1.400000</td>
      <td>-2.900000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>4.250000</td>
      <td>-2.100000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>7.100000</td>
      <td>-1.300000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()  <span class="comment">#表的信息</span></span><br><span class="line"><span class="comment">#1. 缺失值情况</span></span><br><span class="line"><span class="comment">#2. 平均值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Index: 4 entries, a to d
Data columns (total 2 columns):
one    3 non-null float64
two    2 non-null float64
dtypes: float64(2)
memory usage: 256.0+ bytes
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;three&#x27;</span>] = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
      <th>three</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1.40</td>
      <td>NaN</td>
      <td>1</td>
    </tr>
    <tr>
      <th>b</th>
      <td>7.10</td>
      <td>-4.5</td>
      <td>2</td>
    </tr>
    <tr>
      <th>c</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>3</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0.75</td>
      <td>-1.3</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.describe()  <span class="comment">#因为是字符串类型无法进行加减，眼见不一定为实，所以需要使用info找类型</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>3.000000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>3.083333</td>
      <td>-2.900000</td>
    </tr>
    <tr>
      <th>std</th>
      <td>3.493685</td>
      <td>2.262742</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.750000</td>
      <td>-4.500000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>1.075000</td>
      <td>-3.700000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1.400000</td>
      <td>-2.900000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>4.250000</td>
      <td>-2.100000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>7.100000</td>
      <td>-1.300000</td>
    </tr>
  </tbody>
</table>
</div>

<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas层级索引</title>
    <url>/21635.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series(np.random.randn(<span class="number">12</span>),index=[[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]])</span><br><span class="line">s1  <span class="comment">#层级索引，索引对象有两层</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a  0    1.078566
   1    0.448853
   2   -1.244759
b  0    1.355274
   1    0.985126
   2   -1.794095
c  0   -0.323329
   1   -1.009308
   2   -0.141174
d  0   -0.258205
   1    0.794214
   2    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.values</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([ 1.07856561,  0.44885274, -1.24475853,  1.35527405,  0.9851262 ,
       -1.79409542, -0.32332902, -1.0093075 , -0.14117406, -0.25820478,
        0.79421376,  1.11484842])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.index</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>MultiIndex(levels=[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [0, 1, 2]],
           labels=[[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]])
</code></pre>
<h1 id="层级索引"><a href="#层级索引" class="headerlink" title="层级索引"></a>层级索引</h1><ul>
<li>数据重塑</li>
<li>分组操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a  0    1.078566
   1    0.448853
   2   -1.244759
b  0    1.355274
   1    0.985126
   2   -1.794095
c  0   -0.323329
   1   -1.009308
   2   -0.141174
d  0   -0.258205
   1    0.794214
   2    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>1.3552740496781421
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[<span class="string">&#x27;b&#x27;</span>] <span class="comment">#先外层选取</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0    1.355274
1    0.985126
2   -1.794095
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[<span class="string">&#x27;b&#x27;</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0.9851261951239859
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a  0    1.078566
   1    0.448853
   2   -1.244759
b  0    1.355274
   1    0.985126
   2   -1.794095
c  0   -0.323329
   1   -1.009308
   2   -0.141174
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[:,<span class="number">0</span>] <span class="comment">#选全部0的数据，先外层筛选，再内层筛选</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a    1.078566
b    1.355274
c   -0.323329
d   -0.258205
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.loc[:,[<span class="number">0</span>,<span class="number">1</span>]]  <span class="comment"># 选每个的前2个</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a  0    1.078566
   1    0.448853
b  0    1.355274
   1    0.985126
c  0   -0.323329
   1   -1.009308
d  0   -0.258205
   1    0.794214
dtype: float64
</code></pre>
<h1 id="swaplevel"><a href="#swaplevel" class="headerlink" title="swaplevel"></a>swaplevel</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1  </span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a  0    1.078566
   1    0.448853
   2   -1.244759
b  0    1.355274
   1    0.985126
   2   -1.794095
c  0   -0.323329
   1   -1.009308
   2   -0.141174
d  0   -0.258205
   1    0.794214
   2    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 =s1.swaplevel()  <span class="comment">#交换内外两层索引</span></span><br><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
1  a    0.448853
2  a   -1.244759
0  b    1.355274
1  b    0.985126
2  b   -1.794095
0  c   -0.323329
1  c   -1.009308
2  c   -0.141174
0  d   -0.258205
1  d    0.794214
2  d    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a    1.078566
b    1.355274
c   -0.323329
d   -0.258205
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.loc[[<span class="number">0</span>,<span class="number">1</span>]] <span class="comment">#,代表这两个都，:代表到</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
1  a    0.448853
0  b    1.355274
1  b    0.985126
0  c   -0.323329
1  c   -1.009308
0  d   -0.258205
1  d    0.794214
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.unstack()  <span class="comment">#将层级索引的Series转换成DataFrame对象</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1.078566</td>
      <td>0.448853</td>
      <td>-1.244759</td>
    </tr>
    <tr>
      <th>b</th>
      <td>1.355274</td>
      <td>0.985126</td>
      <td>-1.794095</td>
    </tr>
    <tr>
      <th>c</th>
      <td>-0.323329</td>
      <td>-1.009308</td>
      <td>-0.141174</td>
    </tr>
    <tr>
      <th>d</th>
      <td>-0.258205</td>
      <td>0.794214</td>
      <td>1.114848</td>
    </tr>
  </tbody>
</table>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.unstack().T.stack()  <span class="comment">#把dataframe对象转换成series</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
   b    1.355274
   c   -0.323329
   d   -0.258205
1  a    0.448853
   b    0.985126
   c   -1.009308
   d    0.794214
2  a   -1.244759
   b   -1.794095
   c   -0.141174
   d    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>a    1.078566
b    1.355274
c   -0.323329
d   -0.258205
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2.loc[[<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
1  a    0.448853
0  b    1.355274
1  b    0.985126
0  c   -0.323329
1  c   -1.009308
0  d   -0.258205
1  d    0.794214
dtype: float64
</code></pre>
<h1 id="sortlevel"><a href="#sortlevel" class="headerlink" title="sortlevel"></a>sortlevel</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
1  a    0.448853
2  a   -1.244759
0  b    1.355274
1  b    0.985126
2  b   -1.794095
0  c   -0.323329
1  c   -1.009308
2  c   -0.141174
0  d   -0.258205
1  d    0.794214
2  d    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = s2.unstack()</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      <th>d</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.078566</td>
      <td>1.355274</td>
      <td>-0.323329</td>
      <td>-0.258205</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.448853</td>
      <td>0.985126</td>
      <td>-1.009308</td>
      <td>0.794214</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1.244759</td>
      <td>-1.794095</td>
      <td>-0.141174</td>
      <td>1.114848</td>
    </tr>
  </tbody>
</table>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.swaplevel()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
1  a    0.448853
2  a   -1.244759
0  b    1.355274
1  b    0.985126
2  b   -1.794095
0  c   -0.323329
1  c   -1.009308
2  c   -0.141174
0  d   -0.258205
1  d    0.794214
2  d    1.114848
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = s1.swaplevel().sortlevel() <span class="comment">#先排外层再排内层</span></span><br><span class="line">s2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0  a    1.078566
   b    1.355274
   c   -0.323329
   d   -0.258205
1  a    0.448853
   b    0.985126
   c   -1.009308
   d    0.794214
2  a   -1.244759
   b   -1.794095
   c   -0.141174
   d    1.114848
dtype: float64
</code></pre>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas数据的存储和读取</title>
    <url>/21637.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">基础内容</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h1 id="1-文本格式文件"><a href="#1-文本格式文件" class="headerlink" title="1.文本格式文件"></a>1.文本格式文件</h1><h2 id="1-1csv文件"><a href="#1-1csv文件" class="headerlink" title="1.1csv文件"></a>1.1csv文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;数据\ex1.csv&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>)  <span class="comment">#记得配置python指定解释器</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      <th>d</th>
      <th>message</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>hello</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>world</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
      <td>python</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;数据\ex1.csv&#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)  <span class="comment">#记得配置python指定解释器 ,sep指定分隔符,header默认指定第一行作为列名称</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>a</td>
      <td>b</td>
      <td>c</td>
      <td>d</td>
      <td>message</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>hello</td>
    </tr>
    <tr>
      <th>2</th>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>world</td>
    </tr>
    <tr>
      <th>3</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
      <td>python</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定列名称</span></span><br><span class="line">df3 = pd.read_csv(<span class="string">&#x27;数据\ex2.csv&#x27;</span>,names=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;Message&#x27;</span>],engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">df3</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>Message</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>hello</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>world</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
      <td>python</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index_col = 某一列名称  指定这一列作为行索引对象</span></span><br><span class="line"><span class="comment"># index_col  指定某列作为行索引对象</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;数据\ex2.csv&#x27;</span>,names=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;Message&#x27;</span>],index_col=<span class="string">&#x27;Message&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
    <tr>
      <th>Message</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>hello</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>world</th>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>python</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = pd.read_csv(<span class="string">&#x27;数据/csv_mindex.csv&#x27;</span>,index_col=[<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>],engine=<span class="string">&#x27;python&#x27;</span>) <span class="comment">#同时指定多列作为行索引</span></span><br><span class="line">df2  </span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>value1</th>
      <th>value2</th>
    </tr>
    <tr>
      <th>key1</th>
      <th>key2</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="4" valign="top">one</th>
      <th>a</th>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>b</th>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>c</th>
      <td>5</td>
      <td>6</td>
    </tr>
    <tr>
      <th>d</th>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th rowspan="4" valign="top">two</th>
      <th>a</th>
      <td>9</td>
      <td>10</td>
    </tr>
    <tr>
      <th>b</th>
      <td>11</td>
      <td>12</td>
    </tr>
    <tr>
      <th>c</th>
      <td>13</td>
      <td>14</td>
    </tr>
    <tr>
      <th>d</th>
      <td>15</td>
      <td>16</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2.loc[<span class="string">&#x27;one&#x27;</span>].loc[<span class="string">&#x27;a&#x27;</span>]  <span class="comment">#DataFrame先列后行  用高级索引操作区去处理它</span></span><br></pre></td></tr></table></figure>




<pre><code>value1    1
value2    2
Name: a, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保存数据到csv文件</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
    <tr>
      <th>Message</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>hello</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>world</th>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
    </tr>
    <tr>
      <th>python</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(<span class="string">&#x27;out.csv&#x27;</span>,index=<span class="literal">False</span>) <span class="comment">#行索引也在里面，所以需要把index改为False不保存行索引，列名称是header也可以改False</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2Excel文件"><a href="#1-2Excel文件" class="headerlink" title="1.2Excel文件"></a>1.2Excel文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.read_excel(<span class="string">&#x27;数据\ex1.xlsx&#x27;</span>)  <span class="comment">#b不用加解释器</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      <th>d</th>
      <th>message</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>hello</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>world</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
      <td>python</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = pd.read_excel(<span class="string">&#x27;数据\ex1.xlsx&#x27;</span>,sheet_name=<span class="number">1</span>)  <span class="comment">#sheet_name改成第二个表</span></span><br><span class="line">df3</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.to_excel(<span class="string">&#x27;ex2.xlsx&#x27;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h2 id="1-3TXT文本类型"><a href="#1-3TXT文本类型" class="headerlink" title="1.3TXT文本类型"></a>1.3TXT文本类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.read_table(<span class="string">&#x27;数据\ex3.txt&#x27;</span>,sep=<span class="string">&#x27;\s+&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">df4</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>aaa</th>
      <td>-0.264438</td>
      <td>-1.026059</td>
      <td>-0.619500</td>
    </tr>
    <tr>
      <th>bbb</th>
      <td>0.927272</td>
      <td>0.302904</td>
      <td>-0.032399</td>
    </tr>
    <tr>
      <th>ccc</th>
      <td>-0.264273</td>
      <td>-0.386314</td>
      <td>-0.217601</td>
    </tr>
    <tr>
      <th>ddd</th>
      <td>-0.871858</td>
      <td>-0.348382</td>
      <td>1.100491</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4.to_csv(<span class="string">&#x27;out.txt&#x27;</span>) <span class="comment">#用csv保存txt方法</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4特大文件读取"><a href="#1-4特大文件读取" class="headerlink" title="1.4特大文件读取"></a>1.4特大文件读取</h2><p>常用编码格式</p>
<ul>
<li>gbk</li>
<li>utf-8</li>
<li>gb2312</li>
<li>gb18030</li>
<li>utf-8-sig</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">agg1 = pd.read_csv(<span class="string">&#x27;数据/agg_match_stats_0.csv&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>,chunksize=<span class="number">5</span>)  <span class="comment"># chunksize=5设置数据块大小，防死机</span></span><br><span class="line">agg1.get_chunk() <span class="comment">#显示代码块</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>game_size</th>
      <th>match_id</th>
      <th>match_mode</th>
      <th>party_size</th>
      <th>player_assists</th>
      <th>player_dbno</th>
      <th>player_dist_ride</th>
      <th>player_dist_walk</th>
      <th>player_dmg</th>
      <th>player_kills</th>
      <th>player_name</th>
      <th>player_survive_time</th>
      <th>team_id</th>
      <th>team_placement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2017-11-26T20:59:40+0000</td>
      <td>37</td>
      <td>2U4GBNA0YmnNZYkzjkfgN4ev-hXSrak_BSey_YEG6kIuDG...</td>
      <td>tpp</td>
      <td>2</td>
      <td>0</td>
      <td>1</td>
      <td>2870.72400</td>
      <td>1784.847780</td>
      <td>117</td>
      <td>1</td>
      <td>SnuffIes</td>
      <td>1106.320</td>
      <td>4</td>
      <td>18</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2017-11-26T20:59:40+0000</td>
      <td>37</td>
      <td>2U4GBNA0YmnNZYkzjkfgN4ev-hXSrak_BSey_YEG6kIuDG...</td>
      <td>tpp</td>
      <td>2</td>
      <td>0</td>
      <td>1</td>
      <td>2938.40723</td>
      <td>1756.079710</td>
      <td>127</td>
      <td>1</td>
      <td>Ozon3r</td>
      <td>1106.315</td>
      <td>4</td>
      <td>18</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2017-11-26T20:59:40+0000</td>
      <td>37</td>
      <td>2U4GBNA0YmnNZYkzjkfgN4ev-hXSrak_BSey_YEG6kIuDG...</td>
      <td>tpp</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0.00000</td>
      <td>224.157562</td>
      <td>67</td>
      <td>0</td>
      <td>bovize</td>
      <td>235.558</td>
      <td>5</td>
      <td>33</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2017-11-26T20:59:40+0000</td>
      <td>37</td>
      <td>2U4GBNA0YmnNZYkzjkfgN4ev-hXSrak_BSey_YEG6kIuDG...</td>
      <td>tpp</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0.00000</td>
      <td>92.935150</td>
      <td>0</td>
      <td>0</td>
      <td>sbahn87</td>
      <td>197.553</td>
      <td>5</td>
      <td>33</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2017-11-26T20:59:40+0000</td>
      <td>37</td>
      <td>2U4GBNA0YmnNZYkzjkfgN4ev-hXSrak_BSey_YEG6kIuDG...</td>
      <td>tpp</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>2619.07739</td>
      <td>2510.447000</td>
      <td>175</td>
      <td>2</td>
      <td>GeminiZZZ</td>
      <td>1537.495</td>
      <td>14</td>
      <td>11</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="其他数据来源格式"><a href="#其他数据来源格式" class="headerlink" title="其他数据来源格式"></a>其他数据来源格式</h2><ul>
<li>json</li>
<li>HDF5</li>
<li>web API</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.read_html(<span class="string">&#x27;https://s.askci.com/stock/a/&#x27;</span>)[<span class="number">3</span>]  <span class="comment">#只要网站上有table数据，不需要requests就能全部读取出来,可以使用[]来选表</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>序号</th>
      <th>股票代码</th>
      <th>股票简称</th>
      <th>公司名称</th>
      <th>省份</th>
      <th>城市</th>
      <th>主营业务收入(202103)</th>
      <th>净利润(202103)</th>
      <th>员工人数</th>
      <th>上市日期</th>
      <th>招股书</th>
      <th>公司财报</th>
      <th>行业分类</th>
      <th>产品类型</th>
      <th>主营业务</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>平安银行</td>
      <td>平安银行股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>--</td>
      <td>101.32亿</td>
      <td>36115</td>
      <td>1991-04-03</td>
      <td>--</td>
      <td>NaN</td>
      <td>银行</td>
      <td>商业银行业务</td>
      <td>经有关监管机构批准的各项商业银行业务</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>2</td>
      <td>万科A</td>
      <td>万科企业股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>622.64亿</td>
      <td>25.07亿</td>
      <td>140565</td>
      <td>1991-01-29</td>
      <td>--</td>
      <td>NaN</td>
      <td>房地产开发</td>
      <td>房地产、物业管理、投资咨询</td>
      <td>房地产开发和物业服务。</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>4</td>
      <td>国华网安</td>
      <td>深圳国华网安科技股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>3653.12万</td>
      <td>429.93万</td>
      <td>264</td>
      <td>1991-01-14</td>
      <td>--</td>
      <td>NaN</td>
      <td>生物医药</td>
      <td>移动应用安全服务、移动互联网游戏</td>
      <td>移动应用安全服务业务。</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>5</td>
      <td>ST星源</td>
      <td>深圳世纪星源股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>4816.16万</td>
      <td>831.65万</td>
      <td>629</td>
      <td>1990-12-10</td>
      <td>--</td>
      <td>NaN</td>
      <td>环保工程、物业管理</td>
      <td>酒店经营、物业管理、环保业务</td>
      <td>绿色低碳城市社区建设相关的服务业务</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>6</td>
      <td>深振业A</td>
      <td>深圳市振业(集团)股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>9.18亿</td>
      <td>2.84亿</td>
      <td>397</td>
      <td>1992-04-27</td>
      <td>--</td>
      <td>NaN</td>
      <td>房地产开发</td>
      <td>房地产</td>
      <td>从事房地产开发与销售。</td>
    </tr>
    <tr>
      <th>5</th>
      <td>6</td>
      <td>7</td>
      <td>*ST全新</td>
      <td>深圳市全新好股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>1315.51万</td>
      <td>-132.39万</td>
      <td>76</td>
      <td>1992-04-13</td>
      <td>--</td>
      <td>NaN</td>
      <td>物业经营</td>
      <td>物业管理及停车费、房屋租赁、一次性口罩、纳米胶囊、杀菌纸巾</td>
      <td>物业管理和房屋租赁业等</td>
    </tr>
    <tr>
      <th>6</th>
      <td>7</td>
      <td>8</td>
      <td>神州高铁</td>
      <td>神州高铁技术股份有限公司</td>
      <td>北京</td>
      <td>北京市</td>
      <td>1.49亿</td>
      <td>-8726.28万</td>
      <td>2394</td>
      <td>1992-05-07</td>
      <td>--</td>
      <td>NaN</td>
      <td>轨道交通设备</td>
      <td>轨道交通</td>
      <td>专业致力于提供轨道交通运营检修装备与数据、线路运营、维保服务。</td>
    </tr>
    <tr>
      <th>7</th>
      <td>8</td>
      <td>9</td>
      <td>中国宝安</td>
      <td>中国宝安集团股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>37.15亿</td>
      <td>3.54亿</td>
      <td>13345</td>
      <td>1991-06-25</td>
      <td>--</td>
      <td>NaN</td>
      <td>综合</td>
      <td>高新技术产业、生物医药、房地产</td>
      <td>新能源、新材料及其它高新技术产业、生物医药业、房地产业以及其他行业</td>
    </tr>
    <tr>
      <th>8</th>
      <td>9</td>
      <td>10</td>
      <td>美丽生态</td>
      <td>深圳美丽生态股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>2.28亿</td>
      <td>777.80万</td>
      <td>278</td>
      <td>1995-10-27</td>
      <td>--</td>
      <td>NaN</td>
      <td>园林工程</td>
      <td>燃气销售服务、园林建设、园林设计、苗木销售</td>
      <td>从事苗木种植、园林绿化工程施工和养护为一体的综合性园林服务。</td>
    </tr>
    <tr>
      <th>9</th>
      <td>10</td>
      <td>11</td>
      <td>深物业A</td>
      <td>深圳市物业发展(集团)股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>8.91亿</td>
      <td>2.07亿</td>
      <td>8035</td>
      <td>1992-03-30</td>
      <td>--</td>
      <td>NaN</td>
      <td>房地产开发</td>
      <td>产城空间开发、物业管理服务、产业生态运营、餐饮业务、工程监理业务</td>
      <td>从事房地产开发经营，兼营物业管理、房屋租赁、出租车客运、餐饮服务等。</td>
    </tr>
    <tr>
      <th>10</th>
      <td>11</td>
      <td>12</td>
      <td>南玻A</td>
      <td>中国南玻集团股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>30.07亿</td>
      <td>5.78亿</td>
      <td>10558</td>
      <td>1992-02-28</td>
      <td>--</td>
      <td>NaN</td>
      <td>玻璃</td>
      <td>玻璃业务、电子玻璃及显示器件业务、太阳能及其他业务</td>
      <td>研发、生产制造和销售优质浮法玻璃和工程玻璃、太阳能玻璃和硅材料、光伏电池和组件等可再生能源产...</td>
    </tr>
    <tr>
      <th>11</th>
      <td>12</td>
      <td>14</td>
      <td>沙河股份</td>
      <td>沙河实业股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>809.13万</td>
      <td>-938.72万</td>
      <td>153</td>
      <td>1992-06-02</td>
      <td>--</td>
      <td>NaN</td>
      <td>房地产开发</td>
      <td>房地产销售</td>
      <td>从事房地产开发与经营、现代服务型产业用房运营与管理。</td>
    </tr>
    <tr>
      <th>12</th>
      <td>13</td>
      <td>16</td>
      <td>深康佳A</td>
      <td>康佳集团股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>98.22亿</td>
      <td>1873.52万</td>
      <td>17216</td>
      <td>1992-03-27</td>
      <td>--</td>
      <td>NaN</td>
      <td>电视机</td>
      <td>工贸业务、彩电业务、环保业务、白电业务、半导体业务</td>
      <td>消费类电子业务、工贸业务、环保业务、半导体业务。</td>
    </tr>
    <tr>
      <th>13</th>
      <td>14</td>
      <td>17</td>
      <td>深中华A</td>
      <td>深圳中华自行车(集团)股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>2316.33万</td>
      <td>-21.15万</td>
      <td>65</td>
      <td>1992-03-31</td>
      <td>--</td>
      <td>NaN</td>
      <td>自行车</td>
      <td>自行车及零配件销售、锂电池材料、珠宝黄金</td>
      <td>自行车及锂电池材料业务、珠宝黄金业务。</td>
    </tr>
    <tr>
      <th>14</th>
      <td>15</td>
      <td>19</td>
      <td>深粮控股</td>
      <td>深圳市深粮控股股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>25.29亿</td>
      <td>1.40亿</td>
      <td>1246</td>
      <td>1992-10-12</td>
      <td>--</td>
      <td>NaN</td>
      <td>软饮料</td>
      <td>食品和饮料及茶加工、粮油贸易及加工、粮油仓储物流及服务</td>
      <td>批发零售业务、食品加工制造业务、租赁及商务服务业务。</td>
    </tr>
    <tr>
      <th>15</th>
      <td>16</td>
      <td>20</td>
      <td>深华发A</td>
      <td>深圳中恒华发股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>1.91亿</td>
      <td>556.65万</td>
      <td>1132</td>
      <td>1992-04-28</td>
      <td>--</td>
      <td>NaN</td>
      <td>电子零部件</td>
      <td>显示器、注塑件、EPS产品、物业租赁、废料收入、水电费及其他</td>
      <td>精密注塑件的加工、销售;液晶显示器的加工、销售;轻型包装材料的加工、销售以及物业租赁业务。</td>
    </tr>
    <tr>
      <th>16</th>
      <td>17</td>
      <td>21</td>
      <td>深科技</td>
      <td>深圳长城开发科技股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>38.27亿</td>
      <td>2.31亿</td>
      <td>27051</td>
      <td>1994-02-02</td>
      <td>--</td>
      <td>NaN</td>
      <td>PC、服务器及硬件</td>
      <td>存储半导体业务、自有产品、高端制造</td>
      <td>计算机硬件、通讯设备等。</td>
    </tr>
    <tr>
      <th>17</th>
      <td>18</td>
      <td>23</td>
      <td>深天地A</td>
      <td>深圳市天地(集团)股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>3.91亿</td>
      <td>2753.23万</td>
      <td>984</td>
      <td>1993-04-29</td>
      <td>--</td>
      <td>NaN</td>
      <td>商品混凝土</td>
      <td>房地产、工业、租赁</td>
      <td>商品混凝土的生产和销售、房地产的开发及物业管理等。</td>
    </tr>
    <tr>
      <th>18</th>
      <td>19</td>
      <td>25</td>
      <td>特力A</td>
      <td>深圳市特力(集团)股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>1.44亿</td>
      <td>2155.02万</td>
      <td>302</td>
      <td>1993-06-21</td>
      <td>--</td>
      <td>NaN</td>
      <td>汽车销售</td>
      <td>汽车销售、汽车维修及检测、珠宝批发及零售、物业租赁及服务</td>
      <td>汽车销售、汽车检测、维修及配件销售；资源性资产管理；珠宝服务业务。</td>
    </tr>
    <tr>
      <th>19</th>
      <td>20</td>
      <td>26</td>
      <td>飞亚达</td>
      <td>飞亚达精密科技股份有限公司</td>
      <td>广东</td>
      <td>深圳市</td>
      <td>13.78亿</td>
      <td>1.18亿</td>
      <td>4901</td>
      <td>1993-06-03</td>
      <td>--</td>
      <td>NaN</td>
      <td>珠宝首饰</td>
      <td>手表品牌业务、手表零售服务业务、精密科技业务、租赁业务</td>
      <td>主要从事钟表及其零配件的设计、开发、制造、销售和维修业务，包括"飞亚达"表的产品经营和世界名...</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据连接</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+pymysql://root:@localhost:3306/db2&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询语句</span></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">select * from class;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">df = pd.read_sql(sql,engine)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  读取</span></span><br><span class="line">conn =pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,passwd=<span class="string">&#x27;&#x27;</span>,db=<span class="string">&#x27;db2&#x27;</span>,port=<span class="number">3306</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">sql_query = <span class="string">&quot;select * from class;&quot;</span></span><br><span class="line">df = pd.read_sql(sql_query,con=conn)</span><br><span class="line"><span class="comment"># conn.close()</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#保存:</span></span><br><span class="line">df5.to_sql(<span class="string">&#x27;frame999&#x27;</span>,engine,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas数据清洗</title>
    <url>/21711.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">数据清洗</span></strong></p>
<h1 id="数据中显性的问题"><a href="#数据中显性的问题" class="headerlink" title="数据中显性的问题"></a>数据中显性的问题</h1><h1 id="1-异常数据"><a href="#1-异常数据" class="headerlink" title="1. 异常数据"></a>1. 异常数据</h1><h1 id="2-缺失数据"><a href="#2-缺失数据" class="headerlink" title="2. 缺失数据"></a>2. 缺失数据</h1><h1 id="3-重复数据"><a href="#3-重复数据" class="headerlink" title="3. 重复数据"></a>3. 重复数据</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;数据/guazi.csv&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>4</th>
      <td>leixing</td>
      <td>nianfen</td>
      <td>licheng</td>
      <td>didian</td>
      <td>shoujia</td>
      <td>yuanjia</td>
    </tr>
    <tr>
      <th>5</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>6</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>7</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>8</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>9</th>
      <td>leixing</td>
      <td>nianfen</td>
      <td>licheng</td>
      <td>didian</td>
      <td>shoujia</td>
      <td>yuanjia</td>
    </tr>
    <tr>
      <th>10</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>11</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>12</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>13</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2010 rows × 6 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.info() <span class="comment">#object无法减</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 2010 entries, 0 to 2009
Data columns (total 6 columns):
leixing    2010 non-null object
nianfen    2010 non-null object
licheng    2010 non-null object
didian     2010 non-null object
shoujia    2010 non-null object
yuanjia    1937 non-null object
dtypes: object(6)
memory usage: 94.3+ KB
</code></pre>
<h1 id="1-异常数据-1"><a href="#1-异常数据-1" class="headerlink" title="1.异常数据"></a>1.异常数据</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.drop([<span class="number">4</span>,<span class="number">9</span>],inplace=<span class="literal">True</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>5</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>6</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>7</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>8</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>10</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>11</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>12</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>13</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2008 rows × 6 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.reset_index(drop=<span class="literal">True</span>) <span class="comment">#重新生成行索引序列，去除原本的行索引</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>4</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>5</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>6</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>7</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>8</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>9</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>10</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>11</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>12</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>15</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>21</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>23</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>27</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>29</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1978</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1979</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2008 rows × 6 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[data[<span class="string">&#x27;didian&#x27;</span>] != <span class="string">&#x27;didian&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>5</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>6</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>7</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>8</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>10</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>11</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>12</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>13</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2008 rows × 6 columns</p>
</div>



<h2 id="2-重复数据"><a href="#2-重复数据" class="headerlink" title="2.重复数据"></a>2.重复数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = pd.DataFrame(&#123;<span class="string">&#x27;k1&#x27;</span>:[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>]*<span class="number">3</span>+[<span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">                     <span class="string">&#x27;k2&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">data2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>two</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>one</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>one</td>
      <td>3</td>
    </tr>
    <tr>
      <th>5</th>
      <td>two</td>
      <td>4</td>
    </tr>
    <tr>
      <th>6</th>
      <td>two</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2.duplicated(keep=<span class="string">&#x27;first&#x27;</span>) <span class="comment">#检测每一行的重复值，每列都必须相同,把后面的作为重复值,f改last可以查前面的</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    False
1    False
2    False
3    False
4    False
5    False
6     True
dtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2[<span class="string">&#x27;k3&#x27;</span>] =<span class="built_in">range</span>(<span class="number">7</span>)</span><br><span class="line">data2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
      <th>k3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>two</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>one</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>one</td>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>two</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>6</th>
      <td>two</td>
      <td>4</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2.duplicated([<span class="string">&#x27;k1&#x27;</span>])  <span class="comment">#看k1重复</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    False
1    False
2     True
3     True
4     True
5     True
6     True
dtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2.duplicated([<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>])  <span class="comment">#看k1，k2是否重复</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    False
1    False
2    False
3    False
4    False
5    False
6     True
dtype: bool
</code></pre>
<h3 id="案例操作"><a href="#案例操作" class="headerlink" title="案例操作"></a>案例操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(data.duplicated()).<span class="built_in">sum</span>()  <span class="comment">#聚合查询有8条重复数据</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>8
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.drop_duplicates(inplace=<span class="literal">True</span>) <span class="comment">#删除原来重复的，只能运行一次</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data  <span class="comment">#删掉了8条</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>32</th>
      <td>现代 途胜 2015款 1.6T 双离合两驱智能型</td>
      <td>2016年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>11.41万</td>
      <td>19.50万</td>
    </tr>
    <tr>
      <th>33</th>
      <td>雪佛兰 科帕奇 2014款 2.4L 两驱城市版 7座</td>
      <td>2015年</td>
      <td>4.1万公里</td>
      <td>长沙</td>
      <td>9.14万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>34</th>
      <td>雪佛兰 迈锐宝 2014款 2.0L 自动豪华版</td>
      <td>2014年</td>
      <td>6.4万公里</td>
      <td>长沙</td>
      <td>8.32万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>35</th>
      <td>大众 速腾 2013款 2.0TSI GLI</td>
      <td>2013年</td>
      <td>9.8万公里</td>
      <td>长沙</td>
      <td>9.48万</td>
      <td>24.50万</td>
    </tr>
    <tr>
      <th>36</th>
      <td>现代 名图 2017款 1.8L 自动智能型GLS</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>10.26万</td>
      <td>16.30万</td>
    </tr>
    <tr>
      <th>37</th>
      <td>起亚K5 2015款 2.0L 自动LUX</td>
      <td>2015年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>补贴后9.94万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>38</th>
      <td>长安CS75 2016款 2.0L 手动豪华型 国V</td>
      <td>2016年</td>
      <td>6.7万公里</td>
      <td>长沙</td>
      <td>6.01万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>39</th>
      <td>传祺GS4 2016款 235T G-DCT豪华版</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>补贴后8.14万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2000 rows × 6 columns</p>
</div>



<h2 id="3-缺失数据"><a href="#3-缺失数据" class="headerlink" title="3. 缺失数据"></a>3. 缺失数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1 = pd.Series([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,np.nan,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">data1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0      a
1      b
2    NaN
3      d
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1.isnull()</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    False
1    False
2     True
3    False
dtype: bool
</code></pre>
<h2 id="2-删除"><a href="#2-删除" class="headerlink" title="2.删除"></a>2.删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1.dropna()</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    a
1    b
3    d
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1[data1.notnull()] <span class="comment">#提取非空的</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    a
1    b
3    d
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0      a
1      b
2    NaN
3      d
dtype: object
</code></pre>
<h1 id="3-填充"><a href="#3-填充" class="headerlink" title="3.填充"></a>3.填充</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1[<span class="number">2</span>] =<span class="string">&#x27;c&#x27;</span></span><br><span class="line">data1</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    a
1    b
2    c
3    d
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1.fillna(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    a
1    b
2    c
3    d
dtype: object
</code></pre>
<h3 id="案例操作-1"><a href="#案例操作-1" class="headerlink" title="案例操作"></a>案例操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>32</th>
      <td>现代 途胜 2015款 1.6T 双离合两驱智能型</td>
      <td>2016年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>11.41万</td>
      <td>19.50万</td>
    </tr>
    <tr>
      <th>33</th>
      <td>雪佛兰 科帕奇 2014款 2.4L 两驱城市版 7座</td>
      <td>2015年</td>
      <td>4.1万公里</td>
      <td>长沙</td>
      <td>9.14万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>34</th>
      <td>雪佛兰 迈锐宝 2014款 2.0L 自动豪华版</td>
      <td>2014年</td>
      <td>6.4万公里</td>
      <td>长沙</td>
      <td>8.32万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>35</th>
      <td>大众 速腾 2013款 2.0TSI GLI</td>
      <td>2013年</td>
      <td>9.8万公里</td>
      <td>长沙</td>
      <td>9.48万</td>
      <td>24.50万</td>
    </tr>
    <tr>
      <th>36</th>
      <td>现代 名图 2017款 1.8L 自动智能型GLS</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>10.26万</td>
      <td>16.30万</td>
    </tr>
    <tr>
      <th>37</th>
      <td>起亚K5 2015款 2.0L 自动LUX</td>
      <td>2015年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>补贴后9.94万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>38</th>
      <td>长安CS75 2016款 2.0L 手动豪华型 国V</td>
      <td>2016年</td>
      <td>6.7万公里</td>
      <td>长沙</td>
      <td>6.01万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>39</th>
      <td>传祺GS4 2016款 235T G-DCT豪华版</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>补贴后8.14万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2000 rows × 6 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>leixing     0
nianfen     0
licheng     0
didian      0
shoujia     0
yuanjia    73
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.dropna()</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>32</th>
      <td>现代 途胜 2015款 1.6T 双离合两驱智能型</td>
      <td>2016年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>11.41万</td>
      <td>19.50万</td>
    </tr>
    <tr>
      <th>33</th>
      <td>雪佛兰 科帕奇 2014款 2.4L 两驱城市版 7座</td>
      <td>2015年</td>
      <td>4.1万公里</td>
      <td>长沙</td>
      <td>9.14万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>34</th>
      <td>雪佛兰 迈锐宝 2014款 2.0L 自动豪华版</td>
      <td>2014年</td>
      <td>6.4万公里</td>
      <td>长沙</td>
      <td>8.32万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>35</th>
      <td>大众 速腾 2013款 2.0TSI GLI</td>
      <td>2013年</td>
      <td>9.8万公里</td>
      <td>长沙</td>
      <td>9.48万</td>
      <td>24.50万</td>
    </tr>
    <tr>
      <th>36</th>
      <td>现代 名图 2017款 1.8L 自动智能型GLS</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>10.26万</td>
      <td>16.30万</td>
    </tr>
    <tr>
      <th>38</th>
      <td>长安CS75 2016款 2.0L 手动豪华型 国V</td>
      <td>2016年</td>
      <td>6.7万公里</td>
      <td>长沙</td>
      <td>6.01万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>40</th>
      <td>别克 君威 2012款 2.0L 舒适版</td>
      <td>2013年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.82万</td>
      <td>20.20万</td>
    </tr>
    <tr>
      <th>41</th>
      <td>大众 途观 2012款 1.8TSI 自动两驱菁英版</td>
      <td>2012年</td>
      <td>13.5万公里</td>
      <td>长沙</td>
      <td>10.03万</td>
      <td>27.70万</td>
    </tr>
    <tr>
      <th>42</th>
      <td>长安CS75 2014款 1.8T 自动精英型 国V</td>
      <td>2016年</td>
      <td>2.4万公里</td>
      <td>长沙</td>
      <td>7.38万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>43</th>
      <td>宝马7系 2009款 730Li领先型(进口)</td>
      <td>2010年</td>
      <td>7.7万公里</td>
      <td>长沙</td>
      <td>24.75万</td>
      <td>100.70万</td>
    </tr>
    <tr>
      <th>44</th>
      <td>福特 福克斯 2015款 三厢 1.6L 自动风尚型</td>
      <td>2014年</td>
      <td>9.9万公里</td>
      <td>长沙</td>
      <td>6.02万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>1927 rows × 6 columns</p>
</div>



<h1 id="数据里面隐性问题"><a href="#数据里面隐性问题" class="headerlink" title="数据里面隐性问题"></a>数据里面隐性问题</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><h2 id="求差价"><a href="#求差价" class="headerlink" title="求差价"></a>求差价</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
      <th>k3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>two</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>one</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>one</td>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>two</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>6</th>
      <td>two</td>
      <td>4</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2[<span class="string">&#x27;k3-k2&#x27;</span>] = data2[<span class="string">&#x27;k3&#x27;</span>] - data2[<span class="string">&#x27;k2&#x27;</span>]</span><br><span class="line">data2</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
      <th>k3</th>
      <th>k3-k2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>1</td>
      <td>0</td>
      <td>-1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>two</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>one</td>
      <td>2</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
      <td>3</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>one</td>
      <td>3</td>
      <td>4</td>
      <td>1</td>
    </tr>
    <tr>
      <th>5</th>
      <td>two</td>
      <td>4</td>
      <td>5</td>
      <td>1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>two</td>
      <td>4</td>
      <td>6</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="利用函数或者映射进行数据转换"><a href="#利用函数或者映射进行数据转换" class="headerlink" title="利用函数或者映射进行数据转换"></a>利用函数或者映射进行数据转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大小写格式不统一</span></span><br><span class="line">data3 = pd.DataFrame(&#123;<span class="string">&#x27;food&#x27;</span>: [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;Mango&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>: [<span class="number">4</span>, <span class="number">3</span>, <span class="number">3.5</span>, <span class="number">6</span>, <span class="number">12</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">data3</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>food</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Apple</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>banana</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>orange</td>
      <td>3.5</td>
    </tr>
    <tr>
      <th>3</th>
      <td>apple</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Mango</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>tomato</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data3[<span class="string">&#x27;food&#x27;</span>] == <span class="string">&#x27;Apple&#x27;</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0     True
1    False
2    False
3    False
4    False
5    False
Name: food, dtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data3[<span class="string">&#x27;food&#x27;</span>].<span class="built_in">str</span>.lower  <span class="comment">#使用字符串方法</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>&lt;bound method _noarg_wrapper.&lt;locals&gt;.wrapper of &lt;pandas.core.strings.StringMethods object at 0x0000022735053860&gt;&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">meat = &#123;</span><br><span class="line">    <span class="string">&#x27;apple&#x27;</span>:<span class="string">&#x27;fruit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;banana&#x27;</span>:<span class="string">&#x27;fruit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;orange&#x27;</span>:<span class="string">&#x27;fruit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mango&#x27;</span>:<span class="string">&#x27;fruit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tomato&#x27;</span>:<span class="string">&#x27;vagetables&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">low = data3[<span class="string">&#x27;food&#x27;</span>].<span class="built_in">str</span>.lower()</span><br><span class="line">low</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0     apple
1    banana
2    orange
3     apple
4     mango
5    tomato
Name: food, dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data3[<span class="string">&#x27;class&#x27;</span>] = data3[<span class="string">&#x27;food&#x27;</span>].<span class="built_in">map</span>(meat)  <span class="comment">#映射，food填写键，data3的class填写内容</span></span><br><span class="line">data3</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>food</th>
      <th>price</th>
      <th>class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Apple</td>
      <td>4.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>banana</td>
      <td>3.0</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>2</th>
      <td>orange</td>
      <td>3.5</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>3</th>
      <td>apple</td>
      <td>6.0</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Mango</td>
      <td>12.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>tomato</td>
      <td>3.0</td>
      <td>vagetables</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data3[<span class="string">&#x27;class1&#x27;</span>] =  low.<span class="built_in">map</span>(meat)</span><br><span class="line">data3</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>food</th>
      <th>price</th>
      <th>class</th>
      <th>class1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Apple</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>1</th>
      <td>banana</td>
      <td>3.0</td>
      <td>fruit</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>2</th>
      <td>orange</td>
      <td>3.5</td>
      <td>fruit</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>3</th>
      <td>apple</td>
      <td>6.0</td>
      <td>fruit</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Mango</td>
      <td>12.0</td>
      <td>NaN</td>
      <td>fruit</td>
    </tr>
    <tr>
      <th>5</th>
      <td>tomato</td>
      <td>3.0</td>
      <td>vagetables</td>
      <td>vagetables</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="替换值"><a href="#替换值" class="headerlink" title="替换值"></a>替换值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data4 = pd.Series([<span class="number">1</span>,-<span class="number">999</span>,<span class="number">2</span>,-<span class="number">1000</span>,<span class="number">3</span>])</span><br><span class="line">data4</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0       1
1    -999
2       2
3   -1000
4       3
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data4.replace(-<span class="number">999</span>,np.nan)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0       1.0
1       NaN
2       2.0
3   -1000.0
4       3.0
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data4.replace([-<span class="number">999</span>,-<span class="number">1000</span>],[np.nan,<span class="number">0</span>])  <span class="comment">#一一对应</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    1.0
1    NaN
2    2.0
3    0.0
4    3.0
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data4.replace(&#123;-<span class="number">999</span>:np.nan,-<span class="number">1000</span>:<span class="number">0</span>&#125;,regex=<span class="literal">True</span>) <span class="comment">#regex 打开正则表达式模式</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    1.0
1    NaN
2    2.0
3    0.0
4    3.0
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data4[:] = <span class="string">&#x27;a&#x27;</span>  <span class="comment">#只能字符串类型的</span></span><br><span class="line">data4</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    a
1    a
2    a
3    a
4    a
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data4.replace(<span class="string">&#x27;[a-z]&#x27;</span>,<span class="string">&#x27;999&#x27;</span>,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)  <span class="comment">#必须用， 并且需要是字符串类型的</span></span><br><span class="line">data4</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>0    999
1    999
2    999
3    999
4    999
dtype: object
</code></pre>
<h1 id="案例操作-2"><a href="#案例操作-2" class="headerlink" title="案例操作"></a>案例操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.60万</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.50万</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.90万</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00万</td>
      <td>28.40万</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48万</td>
      <td>17.00万</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51万</td>
      <td>15.20万</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26万</td>
      <td>11.30万</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>补贴后8.33万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70万</td>
      <td>17.10万</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36万</td>
      <td>14.60万</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14万</td>
      <td>12.50万</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65万</td>
      <td>5.40万</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>补贴后5.09万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53万</td>
      <td>14.80万</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30万</td>
      <td>13.60万</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06万</td>
      <td>19.60万</td>
    </tr>
    <tr>
      <th>32</th>
      <td>现代 途胜 2015款 1.6T 双离合两驱智能型</td>
      <td>2016年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>11.41万</td>
      <td>19.50万</td>
    </tr>
    <tr>
      <th>33</th>
      <td>雪佛兰 科帕奇 2014款 2.4L 两驱城市版 7座</td>
      <td>2015年</td>
      <td>4.1万公里</td>
      <td>长沙</td>
      <td>9.14万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>34</th>
      <td>雪佛兰 迈锐宝 2014款 2.0L 自动豪华版</td>
      <td>2014年</td>
      <td>6.4万公里</td>
      <td>长沙</td>
      <td>8.32万</td>
      <td>20.30万</td>
    </tr>
    <tr>
      <th>35</th>
      <td>大众 速腾 2013款 2.0TSI GLI</td>
      <td>2013年</td>
      <td>9.8万公里</td>
      <td>长沙</td>
      <td>9.48万</td>
      <td>24.50万</td>
    </tr>
    <tr>
      <th>36</th>
      <td>现代 名图 2017款 1.8L 自动智能型GLS</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>10.26万</td>
      <td>16.30万</td>
    </tr>
    <tr>
      <th>37</th>
      <td>起亚K5 2015款 2.0L 自动LUX</td>
      <td>2015年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>补贴后9.94万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>38</th>
      <td>长安CS75 2016款 2.0L 手动豪华型 国V</td>
      <td>2016年</td>
      <td>6.7万公里</td>
      <td>长沙</td>
      <td>6.01万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>39</th>
      <td>传祺GS4 2016款 235T G-DCT豪华版</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>补贴后8.14万</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18万</td>
      <td>15.70万</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00万</td>
      <td>21.00万</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.00万</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65万</td>
      <td>9.00万</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>16.20万</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45万</td>
      <td>10.70万</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79万</td>
      <td>11.90万</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10万</td>
      <td>13.90万</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80万</td>
      <td>28.20万</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63万</td>
      <td>13.00万</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>17.60万</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36万</td>
      <td>7.00万</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80万</td>
      <td>13.50万</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98万</td>
      <td>23.40万</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90万</td>
      <td>15.10万</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>11.80万</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00万</td>
      <td>13.80万</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>9.90万</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00万</td>
      <td>10.80万</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00万</td>
      <td>15.50万</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00万</td>
      <td>49.90万</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00万</td>
      <td>43.20万</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00万</td>
      <td>14.10万</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60万</td>
      <td>27.40万</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50万</td>
      <td>25.80万</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00万</td>
      <td>21.30万</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00万</td>
      <td>38.90万</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20万</td>
      <td>11.50万</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40万</td>
      <td>11.30万</td>
    </tr>
  </tbody>
</table>
<p>2000 rows × 6 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;yuanjia&#x27;</span>] = data[<span class="string">&#x27;yuanjia&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;万&#x27;</span>,<span class="string">&#x27;&#x27;</span>).astype(<span class="string">&#x27;float&#x27;</span>)  <span class="comment">#把万字去掉，并且把str改为float类型</span></span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77万</td>
      <td>34.6</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96万</td>
      <td>44.5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87万</td>
      <td>15.2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27万</td>
      <td>14.9</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>补贴后11.97万</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;shoujia&#x27;</span>] = data[<span class="string">&#x27;shoujia&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;万&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">data[<span class="string">&#x27;shoujia&#x27;</span>] = data[<span class="string">&#x27;shoujia&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;补贴后&#x27;</span>,<span class="string">&#x27;&#x27;</span>).astype(<span class="string">&#x27;float&#x27;</span>)  <span class="comment">#把万字和补贴后去掉，并且把str改为float类型</span></span><br><span class="line">data.head() </span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77</td>
      <td>34.6</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96</td>
      <td>44.5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87</td>
      <td>15.2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27</td>
      <td>14.9</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>11.97</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;chajia&#x27;</span>] = data[<span class="string">&#x27;yuanjia&#x27;</span>] - data[<span class="string">&#x27;shoujia&#x27;</span>]</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>leixing</th>
      <th>nianfen</th>
      <th>licheng</th>
      <th>didian</th>
      <th>shoujia</th>
      <th>yuanjia</th>
      <th>chajia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>凯迪拉克ATS-L 2016款 28T 时尚型</td>
      <td>2016年</td>
      <td>2.5万公里</td>
      <td>长沙</td>
      <td>16.77</td>
      <td>34.6</td>
      <td>17.83</td>
    </tr>
    <tr>
      <th>1</th>
      <td>奥迪A6L 2014款 TFSI 标准型</td>
      <td>2014年</td>
      <td>13.8万公里</td>
      <td>长沙</td>
      <td>21.96</td>
      <td>44.5</td>
      <td>22.54</td>
    </tr>
    <tr>
      <th>2</th>
      <td>本田 思域 2016款 1.8L 自动舒适版</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>8.87</td>
      <td>15.2</td>
      <td>6.33</td>
    </tr>
    <tr>
      <th>3</th>
      <td>大众 朗逸 2015款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>10.5万公里</td>
      <td>长沙</td>
      <td>7.27</td>
      <td>14.9</td>
      <td>7.63</td>
    </tr>
    <tr>
      <th>14</th>
      <td>别克 君威 2014款 GS 2.0T 燃情运动版</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>11.97</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>5.6万公里</td>
      <td>长沙</td>
      <td>4.89</td>
      <td>12.5</td>
      <td>7.61</td>
    </tr>
    <tr>
      <th>16</th>
      <td>宝马1系 2013款 改款 116i 领先型(进口)</td>
      <td>2014年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>12.00</td>
      <td>28.4</td>
      <td>16.40</td>
    </tr>
    <tr>
      <th>17</th>
      <td>马自达 昂克赛拉 2014款 三厢 1.5L 自动豪华型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>9.09</td>
      <td>15.1</td>
      <td>6.01</td>
    </tr>
    <tr>
      <th>18</th>
      <td>吉利 博瑞 2015款 1.8T 尊贵型</td>
      <td>2016年</td>
      <td>5.1万公里</td>
      <td>长沙</td>
      <td>8.48</td>
      <td>17.0</td>
      <td>8.52</td>
    </tr>
    <tr>
      <th>19</th>
      <td>丰田 雷凌 2017款 改款 185T CVT精英版</td>
      <td>2017年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>9.43</td>
      <td>13.8</td>
      <td>4.37</td>
    </tr>
    <tr>
      <th>20</th>
      <td>吉利 博瑞 2016款 1.8T 舒适型</td>
      <td>2017年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>7.51</td>
      <td>15.2</td>
      <td>7.69</td>
    </tr>
    <tr>
      <th>21</th>
      <td>雪铁龙 世嘉 2016款 经典 三厢 1.6L 自动品尚型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>5.26</td>
      <td>11.3</td>
      <td>6.04</td>
    </tr>
    <tr>
      <th>22</th>
      <td>奔驰B级 2009款 B 200 时尚型(进口)</td>
      <td>2011年</td>
      <td>6.9万公里</td>
      <td>长沙</td>
      <td>8.33</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>23</th>
      <td>日产 逍客 2017款 2.0L CVT智享版</td>
      <td>2018年</td>
      <td>1.6万公里</td>
      <td>长沙</td>
      <td>12.70</td>
      <td>17.1</td>
      <td>4.40</td>
    </tr>
    <tr>
      <th>24</th>
      <td>日产 骐达 2011款 1.6L CVT智能型</td>
      <td>2011年</td>
      <td>7.5万公里</td>
      <td>长沙</td>
      <td>5.20</td>
      <td>13.6</td>
      <td>8.40</td>
    </tr>
    <tr>
      <th>25</th>
      <td>本田 凌派 2013款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>8.5万公里</td>
      <td>长沙</td>
      <td>8.36</td>
      <td>14.6</td>
      <td>6.24</td>
    </tr>
    <tr>
      <th>26</th>
      <td>Smart smart fortwo 2012款 1.0 MHD 硬顶标准版</td>
      <td>2014年</td>
      <td>6.0万公里</td>
      <td>长沙</td>
      <td>5.14</td>
      <td>12.5</td>
      <td>7.36</td>
    </tr>
    <tr>
      <th>27</th>
      <td>五菱宏光 2014款 1.5L S标准型</td>
      <td>2017年</td>
      <td>1.2万公里</td>
      <td>长沙</td>
      <td>3.65</td>
      <td>5.4</td>
      <td>1.75</td>
    </tr>
    <tr>
      <th>28</th>
      <td>菲亚特 致悦 2014款 1.4T 自动时尚版</td>
      <td>2015年</td>
      <td>8.7万公里</td>
      <td>长沙</td>
      <td>5.09</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>29</th>
      <td>哈弗H6 2015款 运动版 1.5T 自动两驱豪华型</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.53</td>
      <td>14.8</td>
      <td>7.27</td>
    </tr>
    <tr>
      <th>30</th>
      <td>日产 骐达 2014款 1.6L CVT智能型</td>
      <td>2015年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>7.30</td>
      <td>13.6</td>
      <td>6.30</td>
    </tr>
    <tr>
      <th>31</th>
      <td>日产 逍客 2012款 2.0XV 雷 CVT 2WD</td>
      <td>2013年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>8.06</td>
      <td>19.6</td>
      <td>11.54</td>
    </tr>
    <tr>
      <th>32</th>
      <td>现代 途胜 2015款 1.6T 双离合两驱智能型</td>
      <td>2016年</td>
      <td>5.4万公里</td>
      <td>长沙</td>
      <td>11.41</td>
      <td>19.5</td>
      <td>8.09</td>
    </tr>
    <tr>
      <th>33</th>
      <td>雪佛兰 科帕奇 2014款 2.4L 两驱城市版 7座</td>
      <td>2015年</td>
      <td>4.1万公里</td>
      <td>长沙</td>
      <td>9.14</td>
      <td>20.3</td>
      <td>11.16</td>
    </tr>
    <tr>
      <th>34</th>
      <td>雪佛兰 迈锐宝 2014款 2.0L 自动豪华版</td>
      <td>2014年</td>
      <td>6.4万公里</td>
      <td>长沙</td>
      <td>8.32</td>
      <td>20.3</td>
      <td>11.98</td>
    </tr>
    <tr>
      <th>35</th>
      <td>大众 速腾 2013款 2.0TSI GLI</td>
      <td>2013年</td>
      <td>9.8万公里</td>
      <td>长沙</td>
      <td>9.48</td>
      <td>24.5</td>
      <td>15.02</td>
    </tr>
    <tr>
      <th>36</th>
      <td>现代 名图 2017款 1.8L 自动智能型GLS</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>10.26</td>
      <td>16.3</td>
      <td>6.04</td>
    </tr>
    <tr>
      <th>37</th>
      <td>起亚K5 2015款 2.0L 自动LUX</td>
      <td>2015年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>9.94</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>38</th>
      <td>长安CS75 2016款 2.0L 手动豪华型 国V</td>
      <td>2016年</td>
      <td>6.7万公里</td>
      <td>长沙</td>
      <td>6.01</td>
      <td>10.7</td>
      <td>4.69</td>
    </tr>
    <tr>
      <th>39</th>
      <td>传祺GS4 2016款 235T G-DCT豪华版</td>
      <td>2016年</td>
      <td>3.5万公里</td>
      <td>长沙</td>
      <td>8.14</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>大众 高尔夫 2016款 1.6L 自动舒适型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>10.18</td>
      <td>15.7</td>
      <td>5.52</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>本田CR-V 2012款 2.0L 两驱都市版</td>
      <td>2012年</td>
      <td>11.0万公里</td>
      <td>长沙</td>
      <td>10.00</td>
      <td>21.0</td>
      <td>11.00</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>哈弗H6 2014款 运动版 1.5T 手动两驱精英型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>7.00</td>
      <td>14.0</td>
      <td>7.00</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>长安CS35 2017款 1.6L 自动豪华型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>6.65</td>
      <td>9.0</td>
      <td>2.35</td>
    </tr>
    <tr>
      <th>1984</th>
      <td>标致408 2014款 1.8L 自动豪华版</td>
      <td>2015年</td>
      <td>6.8万公里</td>
      <td>长沙</td>
      <td>8.00</td>
      <td>16.2</td>
      <td>8.20</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>启辰T70 2015款 2.0L 手动睿趣版</td>
      <td>2015年</td>
      <td>3.3万公里</td>
      <td>长沙</td>
      <td>5.45</td>
      <td>10.7</td>
      <td>5.25</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>大众 朗逸 2015款 1.6L 手动风尚版</td>
      <td>2016年</td>
      <td>2.0万公里</td>
      <td>长沙</td>
      <td>6.79</td>
      <td>11.9</td>
      <td>5.11</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>丰田 卡罗拉 2014款 1.6L CVT GL-i</td>
      <td>2015年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>9.10</td>
      <td>13.9</td>
      <td>4.80</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱豪华型</td>
      <td>2014年</td>
      <td>6.1万公里</td>
      <td>长沙</td>
      <td>14.80</td>
      <td>28.2</td>
      <td>13.40</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>东风风神AX7 2016款 1.4T 手动智逸型</td>
      <td>2016年</td>
      <td>1.9万公里</td>
      <td>长沙</td>
      <td>6.63</td>
      <td>13.0</td>
      <td>6.37</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>标致408 2016款 1.6T 自动豪华版</td>
      <td>2016年</td>
      <td>3.4万公里</td>
      <td>长沙</td>
      <td>9.00</td>
      <td>17.6</td>
      <td>8.60</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>长安商用 欧尚 2016款 1.5L 手动豪华型7座</td>
      <td>2016年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>4.36</td>
      <td>7.0</td>
      <td>2.64</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>丰田 卡罗拉 2014款 1.6L 手动GL-i真皮版</td>
      <td>2014年</td>
      <td>3.7万公里</td>
      <td>长沙</td>
      <td>7.80</td>
      <td>13.5</td>
      <td>5.70</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>现代ix35 2010款 2.0L 自动四驱尊贵版GLS</td>
      <td>2011年</td>
      <td>12.9万公里</td>
      <td>长沙</td>
      <td>7.98</td>
      <td>23.4</td>
      <td>15.42</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>福特 福克斯 2017款 三厢 1.6L 自动风尚型智行版</td>
      <td>2017年</td>
      <td>2.6万公里</td>
      <td>长沙</td>
      <td>8.90</td>
      <td>15.1</td>
      <td>6.20</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>吉利 帝豪GS 2016款 运动版 1.3T 自动臻尚型</td>
      <td>2017年</td>
      <td>2.2万公里</td>
      <td>长沙</td>
      <td>7.00</td>
      <td>11.8</td>
      <td>4.80</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>大众 捷达 2015款 质惠版 1.6L 自动舒适型</td>
      <td>2014年</td>
      <td>7.8万公里</td>
      <td>长沙</td>
      <td>6.00</td>
      <td>11.5</td>
      <td>5.50</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>别克 英朗 2017款 15N 自动精英型</td>
      <td>2017年</td>
      <td>1.3万公里</td>
      <td>长沙</td>
      <td>9.00</td>
      <td>13.8</td>
      <td>4.80</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>吉利 帝豪 2017款 三厢百万款 1.5L CVT向上版</td>
      <td>2017年</td>
      <td>1.8万公里</td>
      <td>长沙</td>
      <td>6.00</td>
      <td>9.9</td>
      <td>3.90</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>本田 锋范经典 2012款 1.5L 手动精英版</td>
      <td>2013年</td>
      <td>8.6万公里</td>
      <td>长沙</td>
      <td>5.00</td>
      <td>10.8</td>
      <td>5.80</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>大众 宝来 2012款 1.4T 自动舒适型</td>
      <td>2012年</td>
      <td>5.0万公里</td>
      <td>长沙</td>
      <td>6.00</td>
      <td>15.5</td>
      <td>9.50</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>宝马5系 2013款 525Li 领先型</td>
      <td>2013年</td>
      <td>10.2万公里</td>
      <td>长沙</td>
      <td>26.00</td>
      <td>49.9</td>
      <td>23.90</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>奔驰E级 2015款 E 180 L 运动型</td>
      <td>2016年</td>
      <td>4.8万公里</td>
      <td>长沙</td>
      <td>29.00</td>
      <td>43.2</td>
      <td>14.20</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>东南DX7 2017款 1.5T 自动豪华型</td>
      <td>2017年</td>
      <td>4.0万公里</td>
      <td>长沙</td>
      <td>7.00</td>
      <td>14.1</td>
      <td>7.10</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>福特 翼虎 2015款 2.0L GTDi 四驱精英型</td>
      <td>2016年</td>
      <td>4.2万公里</td>
      <td>长沙</td>
      <td>15.60</td>
      <td>27.4</td>
      <td>11.80</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>大众 途观 2013款 1.8TSI 自动两驱舒适版</td>
      <td>2014年</td>
      <td>7.3万公里</td>
      <td>长沙</td>
      <td>13.50</td>
      <td>25.8</td>
      <td>12.30</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>现代ix35 2012款 2.0L 自动两驱精英版GLS</td>
      <td>2012年</td>
      <td>7.1万公里</td>
      <td>长沙</td>
      <td>8.00</td>
      <td>21.3</td>
      <td>13.30</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>宝马3系 2014款 320Li 时尚型</td>
      <td>2015年</td>
      <td>4.6万公里</td>
      <td>长沙</td>
      <td>23.00</td>
      <td>38.9</td>
      <td>15.90</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>标致308 2014款 乐享版 经典 1.6L 手动优尚型</td>
      <td>2015年</td>
      <td>3.0万公里</td>
      <td>长沙</td>
      <td>6.20</td>
      <td>11.5</td>
      <td>5.30</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>大众POLO 2014款 1.6L 自动舒适版</td>
      <td>2016年</td>
      <td>2.9万公里</td>
      <td>长沙</td>
      <td>7.40</td>
      <td>11.3</td>
      <td>3.90</td>
    </tr>
  </tbody>
</table>
<p>2000 rows × 7 columns</p>
</div>



<h2 id="离散化和面元划分"><a href="#离散化和面元划分" class="headerlink" title="离散化和面元划分"></a>离散化和面元划分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ages = [<span class="number">20</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">37</span>, <span class="number">31</span>, <span class="number">61</span>, <span class="number">45</span>, <span class="number">41</span>, <span class="number">32</span>,<span class="number">200</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#面元</span></span><br><span class="line">bins = [<span class="number">18</span>,<span class="number">25</span>,<span class="number">35</span>,<span class="number">60</span>,<span class="number">100</span>]</span><br><span class="line">c = pd.cut(ages,bins)  <span class="comment">#划分空间，左闭右开</span></span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (60, 100], (35, 60], (35, 60], (25, 35], NaN]
Length: 13
Categories (4, interval[int64]): [(18, 25] &lt; (25, 35] &lt; (35, 60] &lt; (60, 100]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.codes</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>array([ 0,  0,  0,  1,  0,  0,  2,  1,  3,  2,  2,  1, -1], dtype=int8)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.value_counts(c)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>(18, 25]     5
(35, 60]     3
(25, 35]     3
(60, 100]    1
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names=[<span class="string">&#x27;年轻人&#x27;</span>,<span class="string">&#x27;青壮年&#x27;</span>,<span class="string">&#x27;中年&#x27;</span>,<span class="string">&#x27;老年&#x27;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.cut(ages,bins,labels=names)  <span class="comment">#第一个填样本，第二个填范围，第三个填标签分组</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>[年轻人, 年轻人, 年轻人, 青壮年, 年轻人, ..., 老年, 中年, 中年, 青壮年, NaN]
Length: 13
Categories (4, object): [年轻人 &lt; 青壮年 &lt; 中年 &lt; 老年]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data6 = np.random.rand(<span class="number">20</span>)</span><br><span class="line">data6</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>array([0.50296563, 0.57831354, 0.01261546, 0.47309773, 0.49185722,
       0.73357696, 0.69708086, 0.17210179, 0.84081213, 0.28237651,
       0.98370474, 0.11451226, 0.66201322, 0.2007213 , 0.95141259,
       0.02424174, 0.58532002, 0.9883519 , 0.87129067, 0.50047906])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = pd.cut(data6,<span class="number">4</span>,precision=<span class="number">2</span>) <span class="comment">#precision保存两位，自动帮你分为4个部分</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.value_counts(catas)  <span class="comment">#统计范围</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>(0.5, 0.74]      6
(0.74, 0.99]     5
(0.012, 0.26]    5
(0.26, 0.5]      4
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = pd.qcut(data6,[<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0.5</span>,<span class="number">0.9</span>,<span class="number">1.</span>])  <span class="comment">#按照比值，10% 10-50% qcut按照比值</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.value_counts(catas)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>(0.5, 0.74]      6
(0.74, 0.99]     5
(0.012, 0.26]    5
(0.26, 0.5]      4
dtype: int64
</code></pre>
<h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.arange(<span class="number">20</span>).reshape((<span class="number">5</span>,<span class="number">4</span>)))</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>2</th>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
    <tr>
      <th>3</th>
      <td>12</td>
      <td>13</td>
      <td>14</td>
      <td>15</td>
    </tr>
    <tr>
      <th>4</th>
      <td>16</td>
      <td>17</td>
      <td>18</td>
      <td>19</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sam = np.random.permutation(<span class="number">5</span>)</span><br><span class="line">sam</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>array([0, 4, 2, 1, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.take(sam)   <span class="comment">#按照你数组的顺序改变行的排序</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>16</td>
      <td>17</td>
      <td>18</td>
      <td>19</td>
    </tr>
    <tr>
      <th>2</th>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>3</th>
      <td>12</td>
      <td>13</td>
      <td>14</td>
      <td>15</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[[<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]]  <span class="comment">#等价于这个</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>16</td>
      <td>17</td>
      <td>18</td>
      <td>19</td>
    </tr>
    <tr>
      <th>2</th>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <th>3</th>
      <td>12</td>
      <td>13</td>
      <td>14</td>
      <td>15</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随机采样</span></span><br><span class="line">df.sample(n=<span class="number">2</span>) <span class="comment">#随便拿两行，就是两个样本</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
    </tr>
    <tr>
      <th>4</th>
      <td>16</td>
      <td>17</td>
      <td>18</td>
      <td>19</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><ul>
<li>字符串函数</li>
<li>正则</li>
<li>pandas字符串函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data7 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;dave@qq.com&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;steve@gmail.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;sam@gmail.com&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;mark@qq.com&#x27;</span>&#125;</span><br><span class="line">data7 = pd.Series(data7)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data7</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a        dave@qq.com
b    steve@gmail.com
c      sam@gmail.com
d        mark@qq.com
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串函数</span></span><br><span class="line">data8 = data7.apply(<span class="keyword">lambda</span> x:x.split(<span class="string">&#x27;@&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">data8</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a     dave
b    steve
c      sam
d     mark
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">data9 = data7.apply(<span class="keyword">lambda</span> x:<span class="string">&#x27;qq邮箱&#x27;</span> <span class="keyword">if</span> re.search(<span class="string">&#x27;qq&#x27;</span>,x) <span class="keyword">else</span>  <span class="string">&#x27;谷歌邮箱&#x27;</span>)</span><br><span class="line">data9</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    qq邮箱
b    谷歌邮箱
c    谷歌邮箱
d    qq邮箱
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## pandas字符串的函数</span></span><br><span class="line">data7.<span class="built_in">str</span>.contains(<span class="string">&#x27;gmail&#x27;</span>) <span class="comment">#str的contains查询是否包含</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    False
b     True
c     True
d    False
dtype: bool
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data7.<span class="built_in">str</span>[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a    dave@
b    steve
c    sam@g
d    mark@
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data7.<span class="built_in">str</span>.replace(<span class="string">&#x27;@qq.com&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  <span class="comment">#需要使用字符串的replace方法而不是datarame的                                                                                </span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a               dave
b    steve@gmail.com
c      sam@gmail.com
d               mark
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data7.replace(&#123;<span class="string">&#x27;@(.*?).com&#x27;</span>:<span class="string">&#x27;@qq.com&#x27;</span>&#125;,regex=<span class="literal">True</span>)  <span class="comment">#都改为qq邮箱</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>a     dave@qq.com
b    steve@qq.com
c      sam@qq.com
d     mark@qq.com
dtype: object
</code></pre>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>

]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas数据规整和分组聚合</title>
    <url>/21810.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">数据规整和分组聚合</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h1 id="1-数据合并"><a href="#1-数据合并" class="headerlink" title="1. 数据合并"></a>1. 数据合并</h1><h2 id="1-1-合并数据"><a href="#1-1-合并数据" class="headerlink" title="1.1 合并数据"></a>1.1 合并数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">x</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[1, 2],
       [3, 4]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line">y</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[5, 6],
       [7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate([x,y])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate([x,y],axis =<span class="number">1</span>)  <span class="comment">#axis换轴合并</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[1, 2, 5, 6],
       [3, 4, 7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pandas合并</span></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>),index=<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>),columns=[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)+<span class="number">5</span>,index=<span class="built_in">list</span>(<span class="string">&#x27;ac&#x27;</span>),columns=[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }


<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>b</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>c</th>
      <td>4</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>5</td>
      <td>6</td>
    </tr>
    <tr>
      <th>c</th>
      <td>7</td>
      <td>8</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.实现方式</span></span><br><span class="line">np.concatenate([df1,df2])  <span class="comment">#np将内容合并忽略行列索引</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([[0, 1],
       [2, 3],
       [4, 5],
       [5, 6],
       [7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.append(df2)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>b</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>c</th>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>a</th>
      <td>5</td>
      <td>6</td>
    </tr>
    <tr>
      <th>c</th>
      <td>7</td>
      <td>8</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.实现方式2</span></span><br><span class="line">pd.concat([df1,df2])  <span class="comment">#进行上下合并</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>b</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>c</th>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <th>a</th>
      <td>5</td>
      <td>6</td>
    </tr>
    <tr>
      <th>c</th>
      <td>7</td>
      <td>8</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([df1,df2],axis=<span class="number">1</span>,sort=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>one</th>
      <th>two</th>
      <th>one</th>
      <th>two</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>1</td>
      <td>5.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>b</th>
      <td>2</td>
      <td>3</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>c</th>
      <td>4</td>
      <td>5</td>
      <td>7.0</td>
      <td>8.0</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="1-2数据的连接"><a href="#1-2数据的连接" class="headerlink" title="1.2数据的连接"></a>1.2数据的连接</h2><ul>
<li>pd.merge</li>
<li>join</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>A</th>
      <th>B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K2</td>
      <td>A2</td>
      <td>B2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K3</td>
      <td>A3</td>
      <td>B3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">right</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K1</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K2</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K3</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left,right)  <span class="comment">#如果一个有k4一个没有k4，那么merge就不会有k4，就是取交集，默认只能左右连接</span></span><br><span class="line"><span class="comment">#表放的位置不一样，结果就会不一样</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K2</td>
      <td>A2</td>
      <td>B2</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K3</td>
      <td>A3</td>
      <td>B3</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key1</th>
      <th>key2</th>
      <th>A</th>
      <th>B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K2</td>
      <td>K1</td>
      <td>A3</td>
      <td>B3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">right</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key1</th>
      <th>key2</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>K0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K1</td>
      <td>K0</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K1</td>
      <td>K0</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K2</td>
      <td>K0</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left,right,on=<span class="string">&#x27;key1&#x27;</span>) <span class="comment">#on指定将key作为桥梁，一般默认为全部相同的列名称作为桥梁</span></span><br><span class="line"><span class="comment">#默认inner内连接 交集</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key1</th>
      <th>key2_x</th>
      <th>A</th>
      <th>B</th>
      <th>key2_y</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>K0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>K0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
      <td>K0</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
      <td>K0</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>K2</td>
      <td>K1</td>
      <td>A3</td>
      <td>B3</td>
      <td>K0</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">&#x27;outer&#x27;</span>) <span class="comment">#outer就是外连接，相当于并集</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key1</th>
      <th>key2</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>K2</td>
      <td>K1</td>
      <td>A3</td>
      <td>B3</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>K2</td>
      <td>K0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left,right,how=<span class="string">&#x27;left&#x27;</span>) <span class="comment">#left表示左连接，缺少的以nan填充，以左边为标准</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key1</th>
      <th>key2</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K1</td>
      <td>K0</td>
      <td>A2</td>
      <td>B2</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>K2</td>
      <td>K1</td>
      <td>A3</td>
      <td>B3</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left,right,left_on=<span class="string">&#x27;key1&#x27;</span>,right_on=<span class="string">&#x27;key2&#x27;</span>) <span class="comment">#将左边的key1和右边的key2作为桥梁连接，与on起冲突</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key1_x</th>
      <th>key2_x</th>
      <th>A</th>
      <th>B</th>
      <th>key1_y</th>
      <th>key2_y</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>K0</td>
      <td>K0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>K1</td>
      <td>K0</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>K1</td>
      <td>K0</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K0</td>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>K2</td>
      <td>K0</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>K0</td>
      <td>K0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>K1</td>
      <td>K0</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>K1</td>
      <td>K0</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>7</th>
      <td>K0</td>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>K2</td>
      <td>K0</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;mark&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>],</span><br><span class="line">                   <span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;IT部&#x27;</span>,<span class="string">&#x27;HR部&#x27;</span>,<span class="string">&#x27;运营部&#x27;</span>,<span class="string">&#x27;设计部&#x27;</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;mark&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>],</span><br><span class="line">                   <span class="string">&#x27;date&#x27;</span>:[<span class="number">2004</span>,<span class="number">2008</span>,<span class="number">2012</span>,<span class="number">2014</span>]&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>group</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>mark</td>
      <td>IT部</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Bob</td>
      <td>HR部</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Sam</td>
      <td>运营部</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jake</td>
      <td>设计部</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Sam</td>
      <td>2004</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Bob</td>
      <td>2008</td>
    </tr>
    <tr>
      <th>2</th>
      <td>mark</td>
      <td>2012</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jake</td>
      <td>2014</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df1,df2) <span class="comment">#而是把对应的name名字作为桥梁合并，不是像contcat把序号相同的合并</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>group</th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>mark</td>
      <td>IT部</td>
      <td>2012</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Bob</td>
      <td>HR部</td>
      <td>2008</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Sam</td>
      <td>运营部</td>
      <td>2004</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jake</td>
      <td>设计部</td>
      <td>2014</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;data1&#x27;</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">&#x27;data1&#x27;</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;, index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>data1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>b</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>b</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>a</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>c</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>a</td>
      <td>5</td>
    </tr>
    <tr>
      <th>5</th>
      <td>a</td>
      <td>1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>b</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>4</td>
    </tr>
    <tr>
      <th>b</th>
      <td>6</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj1,df_obj2,left_on=<span class="string">&#x27;key&#x27;</span>,right_index=<span class="literal">True</span>)  <span class="comment">#左边的key和右边的index行索引进行连接</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>data1_x</th>
      <th>data1_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>b</td>
      <td>9</td>
      <td>6</td>
    </tr>
    <tr>
      <th>1</th>
      <td>b</td>
      <td>1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>6</th>
      <td>b</td>
      <td>4</td>
      <td>6</td>
    </tr>
    <tr>
      <th>2</th>
      <td>a</td>
      <td>3</td>
      <td>4</td>
    </tr>
    <tr>
      <th>4</th>
      <td>a</td>
      <td>5</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>a</td>
      <td>1</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj2,df_obj1,right_on=<span class="string">&#x27;key&#x27;</span>,left_index=<span class="literal">True</span>)  <span class="comment">#左右很重要，双重改变即不变</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data1_x</th>
      <th>key</th>
      <th>data1_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>4</td>
      <td>a</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>a</td>
      <td>5</td>
    </tr>
    <tr>
      <th>5</th>
      <td>4</td>
      <td>a</td>
      <td>1</td>
    </tr>
    <tr>
      <th>0</th>
      <td>6</td>
      <td>b</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>6</td>
      <td>b</td>
      <td>1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>6</td>
      <td>b</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj2,df_obj1,right_on=<span class="string">&#x27;key&#x27;</span>,left_index=<span class="literal">True</span>,suffixes=(<span class="string">&#x27;_left&#x27;</span>,<span class="string">&#x27;_right&#x27;</span>)) <span class="comment">#把xy改成left和right</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data1_left</th>
      <th>key</th>
      <th>data1_right</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>4</td>
      <td>a</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>a</td>
      <td>5</td>
    </tr>
    <tr>
      <th>5</th>
      <td>4</td>
      <td>a</td>
      <td>1</td>
    </tr>
    <tr>
      <th>0</th>
      <td>6</td>
      <td>b</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>6</td>
      <td>b</td>
      <td>1</td>
    </tr>
    <tr>
      <th>6</th>
      <td>6</td>
      <td>b</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left2 = pd.DataFrame([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>], [<span class="number">5.</span>, <span class="number">6.</span>]],</span><br><span class="line">                     index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>],</span><br><span class="line">                     columns=[<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>])</span><br><span class="line"></span><br><span class="line">right2 = pd.DataFrame([[<span class="number">7.</span>, <span class="number">8.</span>], [<span class="number">9.</span>, <span class="number">10.</span>], [<span class="number">11.</span>, <span class="number">12.</span>], [<span class="number">13</span>, <span class="number">14</span>]],</span><br><span class="line">                      index=[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>],</span><br><span class="line">                      columns=[<span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;综合&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(left2,right2,how=<span class="string">&#x27;outer&#x27;</span>,left_index=<span class="literal">True</span>,right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>语文</th>
      <th>数学</th>
      <th>英语</th>
      <th>综合</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>7.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>c</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>9.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>d</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>11.0</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>e</th>
      <td>5.0</td>
      <td>6.0</td>
      <td>13.0</td>
      <td>14.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left2.join(right2,how=<span class="string">&#x27;outer&#x27;</span>) <span class="comment">#有使用条件:不能有重复的列名，默认使用行索引来连接</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>语文</th>
      <th>数学</th>
      <th>英语</th>
      <th>综合</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>7.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>c</th>
      <td>3.0</td>
      <td>4.0</td>
      <td>9.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>d</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>11.0</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>e</th>
      <td>5.0</td>
      <td>6.0</td>
      <td>13.0</td>
      <td>14.0</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="2-数据重塑和轴向旋转"><a href="#2-数据重塑和轴向旋转" class="headerlink" title="2. 数据重塑和轴向旋转"></a>2. 数据重塑和轴向旋转</h1><ul>
<li>stack()</li>
<li>unstack()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&#x27;date&#x27;</span>:[<span class="string">&#x27;2018-11-22&#x27;</span>,<span class="string">&#x27;2018-11-22&#x27;</span>,<span class="string">&#x27;2018-11-23&#x27;</span>,<span class="string">&#x27;2018-11-23&#x27;</span>,<span class="string">&#x27;2018-11-24&#x27;</span>],</span><br><span class="line">                  <span class="string">&#x27;class&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                  <span class="string">&#x27;values&#x27;</span>:[<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>],</span><br><span class="line">                   <span class="string">&#x27;values1&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;,columns=[<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;values&#x27;</span>,<span class="string">&#x27;values1&#x27;</span>])</span><br><span class="line">df3</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>class</th>
      <th>values</th>
      <th>values1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2018-11-22</td>
      <td>a</td>
      <td>5</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2018-11-22</td>
      <td>b</td>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2018-11-23</td>
      <td>b</td>
      <td>2</td>
      <td>6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2018-11-23</td>
      <td>c</td>
      <td>6</td>
      <td>8</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2018-11-24</td>
      <td>c</td>
      <td>1</td>
      <td>9</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把date作为行索引，class作为列索引，来重塑</span></span><br><span class="line">df4 = df3.pivot(<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;class&#x27;</span>)<span class="comment">#,&#x27;values&#x27;)  </span></span><br><span class="line"><span class="comment">#第三个为指定的列作为数据内容,不设置就剩下的为数据内容</span></span><br><span class="line">df4</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead tr th &#123;
    text-align: left;
&#125;

.dataframe thead tr:last-of-type th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="3" halign="left">values</th>
      <th colspan="3" halign="left">values1</th>
    </tr>
    <tr>
      <th>class</th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2018-11-22</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2018-11-23</th>
      <td>NaN</td>
      <td>2.0</td>
      <td>6.0</td>
      <td>NaN</td>
      <td>6.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>2018-11-24</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>9.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>date
2018-11-22    5.0
2018-11-23    NaN
2018-11-24    NaN
Name: a, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>class</th>
      <th>values</th>
      <th>values1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2018-11-22</td>
      <td>a</td>
      <td>5</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2018-11-22</td>
      <td>b</td>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2018-11-23</td>
      <td>b</td>
      <td>2</td>
      <td>6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2018-11-23</td>
      <td>c</td>
      <td>6</td>
      <td>8</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2018-11-24</td>
      <td>c</td>
      <td>1</td>
      <td>9</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.set_index([<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;class&#x27;</span>]).unstack() <span class="comment">#设置好行列索引后，用unstack()展开层级索引                                                                                                   </span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead tr th &#123;
    text-align: left;
&#125;

.dataframe thead tr:last-of-type th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="3" halign="left">values</th>
      <th colspan="3" halign="left">values1</th>
    </tr>
    <tr>
      <th>class</th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2018-11-22</th>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2018-11-23</th>
      <td>NaN</td>
      <td>2.0</td>
      <td>6.0</td>
      <td>NaN</td>
      <td>6.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>2018-11-24</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>9.0</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="3-数据分组和聚合"><a href="#3-数据分组和聚合" class="headerlink" title="3. 数据分组和聚合"></a>3. 数据分组和聚合</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;fruit&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;color&#x27;</span>:[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;cyan&#x27;</span>,<span class="string">&#x27;cyan&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>:[<span class="number">8.5</span>,<span class="number">6.8</span>,<span class="number">5.6</span>,<span class="number">7.8</span>,<span class="number">6.4</span>]&#125;)</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fruit</th>
      <th>color</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>apple</td>
      <td>red</td>
      <td>8.5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>banana</td>
      <td>yellow</td>
      <td>6.8</td>
    </tr>
    <tr>
      <th>2</th>
      <td>orange</td>
      <td>yellow</td>
      <td>5.6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>apple</td>
      <td>cyan</td>
      <td>7.8</td>
    </tr>
    <tr>
      <th>4</th>
      <td>banana</td>
      <td>cyan</td>
      <td>6.4</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>求苹果的平均价格</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1[df1[<span class="string">&#x27;fruit&#x27;</span>]==<span class="string">&#x27;apple&#x27;</span>][<span class="string">&#x27;price&#x27;</span>].mean()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>8.15
</code></pre>
<ul>
<li>求每一种水果的平均价格</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = df1.groupby(by=<span class="string">&#x27;fruit&#x27;</span>) <span class="comment">#通过fruit名称来进行分组</span></span><br><span class="line">g</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x0000029D51FE4630&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*********************************************************************&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>(&#39;apple&#39;,    fruit color  price
0  apple   red    8.5
3  apple  cyan    7.8)
&lt;class &#39;tuple&#39;&gt;
*********************************************************************
(&#39;banana&#39;,     fruit   color  price
1  banana  yellow    6.8
4  banana    cyan    6.4)
&lt;class &#39;tuple&#39;&gt;
*********************************************************************
(&#39;orange&#39;,     fruit   color  price
2  orange  yellow    5.6)
&lt;class &#39;tuple&#39;&gt;
*********************************************************************
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name,group <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(group)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(group))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>apple
******************************
   fruit color  price
0  apple   red    8.5
3  apple  cyan    7.8
&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
banana
******************************
    fruit   color  price
1  banana  yellow    6.8
4  banana    cyan    6.4
&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
orange
******************************
    fruit   color  price
2  orange  yellow    5.6
&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求苹果的平均价格</span></span><br><span class="line"><span class="built_in">list</span>(df1.groupby(<span class="string">&#x27;fruit&#x27;</span>)) <span class="comment">#是个元组组合起来的列表</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">list</span>(df1.groupby(<span class="string">&#x27;fruit&#x27;</span>)))[<span class="string">&#x27;apple&#x27;</span>].mean()  <span class="comment">#必须先转列表，再转成字典</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>price    8.15
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法糖</span></span><br><span class="line">df1.groupby(by=<span class="string">&#x27;fruit&#x27;</span>)[<span class="string">&#x27;price&#x27;</span>].mean() <span class="comment">#先分好组后设置价格为对象进行平均值计算</span></span><br><span class="line">df1.groupby(by=<span class="string">&#x27;fruit&#x27;</span>)[[<span class="string">&#x27;price&#x27;</span>]].mean() <span class="comment">#在price再加上一个中括号，变成语法糖，让他变成DataFrame对象</span></span><br><span class="line"><span class="comment">#可以理解为用中括号将一维变成二维</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>price</th>
    </tr>
    <tr>
      <th>fruit</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>apple</th>
      <td>8.15</td>
    </tr>
    <tr>
      <th>banana</th>
      <td>6.60</td>
    </tr>
    <tr>
      <th>orange</th>
      <td>5.60</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.groupby(by=[<span class="string">&#x27;fruit&#x27;</span>,<span class="string">&#x27;color&#x27;</span>])[[<span class="string">&#x27;price&#x27;</span>]].mean()  <span class="comment">#增加两种标准，分为两类来求，比如青红苹果分开来算</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>price</th>
    </tr>
    <tr>
      <th>fruit</th>
      <th>color</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">apple</th>
      <th>cyan</th>
      <td>7.8</td>
    </tr>
    <tr>
      <th>red</th>
      <td>8.5</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">banana</th>
      <th>cyan</th>
      <td>6.4</td>
    </tr>
    <tr>
      <th>yellow</th>
      <td>6.8</td>
    </tr>
    <tr>
      <th>orange</th>
      <th>yellow</th>
      <td>5.6</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1[[<span class="string">&#x27;price&#x27;</span>]].groupby(by=[df1[<span class="string">&#x27;fruit&#x27;</span>],df1[<span class="string">&#x27;color&#x27;</span>]]).mean().unstack()  <span class="comment">#不推荐，这个是把列单独拿出来了，上面是把每个样本拿出来</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead tr th &#123;
    text-align: left;
&#125;

.dataframe thead tr:last-of-type th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="3" halign="left">price</th>
    </tr>
    <tr>
      <th>color</th>
      <th>cyan</th>
      <th>red</th>
      <th>yellow</th>
    </tr>
    <tr>
      <th>fruit</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>apple</th>
      <td>7.8</td>
      <td>8.5</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>banana</th>
      <td>6.4</td>
      <td>NaN</td>
      <td>6.8</td>
    </tr>
    <tr>
      <th>orange</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.6</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>每种水果差价</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">max</span>()-a.<span class="built_in">min</span>()</span><br><span class="line">df1.groupby(by=<span class="string">&#x27;fruit&#x27;</span>)[<span class="string">&#x27;price&#x27;</span>].apply(func) <span class="comment">#使用这个函数</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>fruit
apple     0.7
banana    0.4
orange    0.0
Name: price, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.groupby(by=<span class="string">&#x27;fruit&#x27;</span>)[<span class="string">&#x27;price&#x27;</span>].agg(func) <span class="comment">#agg与apply都是应用的意思</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>fruit
apple     0.7
banana    0.4
orange    0.0
Name: price, dtype: float64
</code></pre>
<h2 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;数据/train.csv&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.groupby(<span class="string">&#x27;Sex&#x27;</span>)[<span class="string">&#x27;Survived&#x27;</span>].mean()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Sex
female    0.742038
male      0.188908
Name: Survived, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.groupby(by=[<span class="string">&#x27;Sex&#x27;</span>,<span class="string">&#x27;Pclass&#x27;</span>])[<span class="string">&#x27;Survived&#x27;</span>].mean().unstack()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Pclass</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
    <tr>
      <th>Sex</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>female</th>
      <td>0.968085</td>
      <td>0.921053</td>
      <td>0.500000</td>
    </tr>
    <tr>
      <th>male</th>
      <td>0.368852</td>
      <td>0.157407</td>
      <td>0.135447</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.pivot_table(<span class="string">&#x27;Survived&#x27;</span>,index=<span class="string">&#x27;Sex&#x27;</span>,columns=<span class="string">&#x27;Pclass&#x27;</span>)  <span class="comment">#第一个为内容，第二个为行索引，第三个为列索引，默认aggfunc = mean</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Pclass</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
    <tr>
      <th>Sex</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>female</th>
      <td>0.968085</td>
      <td>0.921053</td>
      <td>0.500000</td>
    </tr>
    <tr>
      <th>male</th>
      <td>0.368852</td>
      <td>0.157407</td>
      <td>0.135447</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.pivot_table(<span class="string">&#x27;Survived&#x27;</span>,index=<span class="string">&#x27;Sex&#x27;</span>,columns=<span class="string">&#x27;Pclass&#x27;</span>,aggfunc=<span class="string">&#x27;std&#x27;</span>) <span class="comment">#默认aggfunc = mean，写函数名称就行</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Pclass</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
    <tr>
      <th>Sex</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>female</th>
      <td>0.176716</td>
      <td>0.271448</td>
      <td>0.501745</td>
    </tr>
    <tr>
      <th>male</th>
      <td>0.484484</td>
      <td>0.365882</td>
      <td>0.342694</td>
    </tr>
  </tbody>
</table>
</div>

<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>

]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas时间序列</title>
    <url>/21855.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">pandas</span><span id="gray-block">时间序列</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pd.set_option(&#x27;display.max_rows&#x27;,None)  </span></span><br><span class="line"><span class="comment">#显示所有的行</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h1 id="Python内置时间模块"><a href="#Python内置时间模块" class="headerlink" title="Python内置时间模块"></a>Python内置时间模块</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.时间戳  给机器去看懂的</span></span><br><span class="line">time.time()</span><br><span class="line"><span class="comment">#从1970年1月1日 0点0分0秒开始</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>1626600601.5184326
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.结构化时间  操作时间</span></span><br><span class="line">t = time.localtime(time.time())</span><br><span class="line"><span class="comment">#将时间戳变成我们认识的时间</span></span><br><span class="line"><span class="comment">#本地实际</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.gmtime(time.time())  <span class="comment">#0时区的时间</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>time.struct_time(tm_year=2021, tm_mon=7, tm_mday=18, tm_hour=9, tm_min=30, tm_sec=1, tm_wday=6, tm_yday=199, tm_isdst=0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.tm_year,t.tm_mon</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>(2021, 7)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.格式化时间字符串</span></span><br><span class="line">time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,t)</span><br><span class="line"><span class="comment">#得到字符串对象，给人类看懂的</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&#39;2021-07-18 17:30:01&#39;
</code></pre>
<h1 id="日期和实际的数据类型"><a href="#日期和实际的数据类型" class="headerlink" title="日期和实际的数据类型"></a>日期和实际的数据类型</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now = datetime.now()</span><br><span class="line">now</span><br><span class="line"><span class="comment">#年月日时分秒，微秒</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2021, 7, 18, 17, 31, 52, 159024)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now.year</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2021
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now.year,now.month,now.day</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>(2021, 7, 18)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datetime(<span class="number">2021</span>,<span class="number">7</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">34</span>,<span class="number">0</span>) <span class="comment">#转换成datetime对象</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2021, 7, 18, 17, 34)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = datetime(<span class="number">2021</span>,<span class="number">7</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">34</span>,<span class="number">0</span>)-datetime(<span class="number">2021</span>,<span class="number">7</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">0</span>)  <span class="comment">#将这个对象相减</span></span><br><span class="line">d  <span class="comment">#第一个参数是天数，第二个参数是秒</span></span><br><span class="line"><span class="comment">#timedelta是时间间隔</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.timedelta(0, 240)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">start = datetime(<span class="number">2021</span>,<span class="number">7</span>,<span class="number">18</span>)</span><br><span class="line">start+timedelta(<span class="number">0</span>, <span class="number">240</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2021, 7, 18, 0, 4)
</code></pre>
<h1 id="datetime-和字符串相互转换"><a href="#datetime-和字符串相互转换" class="headerlink" title="datetime 和字符串相互转换"></a>datetime 和字符串相互转换</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stamp = datetime(<span class="number">2021</span>,<span class="number">7</span>,<span class="number">18</span>)</span><br><span class="line">stamp</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2021, 7, 18, 0, 0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(stamp)  <span class="comment">#强制转换</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&#39;2021-07-18 00:00:00&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式化</span></span><br><span class="line">stamp.strftime(<span class="string">&#x27;%Y-%m-%d %H-%M-%S&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&#39;2021-07-18 00-00-00&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datetime.strptime(<span class="string">&#x27;10/1/2021&#x27;</span>,<span class="string">&#x27;%m/%d/%Y&#x27;</span>) <span class="comment">#将str转换成datetime对象</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2021, 10, 1, 0, 0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = [<span class="string">&#x27;12/12/2020&#x27;</span>,<span class="string">&#x27;1/1/2020&#x27;</span>]</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[&#39;12/12/2020&#39;, &#39;1/1/2020&#39;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式化</span></span><br><span class="line">[datetime.strptime(i,<span class="string">&quot;%m/%d/%Y&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> d]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[datetime.datetime(2020, 12, 12, 0, 0), datetime.datetime(2020, 1, 1, 0, 0)]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse(<span class="string">&#x27;12/12/2021&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2021, 12, 12, 0, 0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse(<span class="string">&#x27;2020-12-12&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2020, 12, 12, 0, 0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse(<span class="string">&#x27;2020.12.12&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2020, 12, 12, 0, 0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse(<span class="string">&#x27;2020 12 12&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>datetime.datetime(2020, 12, 12, 0, 0)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = [<span class="string">&#x27;12/12/2020 20:00:00&#x27;</span>,<span class="string">&#x27;1/1/2020 12:00:00&#x27;</span>]</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[&#39;12/12/2020 20:00:00&#39;, &#39;1/1/2020 12:00:00&#39;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.to_datetime(d)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2020-12-12 20:00:00&#39;, &#39;2020-01-01 12:00:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idx = pd.to_datetime(d+[<span class="literal">None</span>])</span><br><span class="line">idx <span class="comment">#空的话就变成了NaT</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2020-12-12 20:00:00&#39;, &#39;2020-01-01 12:00:00&#39;, &#39;NaT&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.isnull(idx)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([False, False,  True])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idx.dropna()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2020-12-12 20:00:00&#39;, &#39;2020-01-01 12:00:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre>
<h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = [datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">12</span>),datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">13</span>),datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">14</span>),datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">15</span>),datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">16</span>)]</span><br><span class="line">dates</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[datetime.datetime(2020, 12, 12, 0, 0),
 datetime.datetime(2020, 12, 13, 0, 0),
 datetime.datetime(2020, 12, 14, 0, 0),
 datetime.datetime(2020, 12, 15, 0, 0),
 datetime.datetime(2020, 12, 16, 0, 0)]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts = pd.Series(np.random.randn(<span class="number">5</span>),index=dates)  <span class="comment">#把行索引替换成datetime</span></span><br><span class="line">ts</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-12-12    0.379713
2020-12-13   -0.649630
2020-12-14   -0.032518
2020-12-15   -0.857139
2020-12-16    1.245633
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts.index</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2020-12-12&#39;, &#39;2020-12-13&#39;, &#39;2020-12-14&#39;, &#39;2020-12-15&#39;,
               &#39;2020-12-16&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-12-12    0.379713
2020-12-13   -0.649630
2020-12-14   -0.032518
2020-12-15   -0.857139
2020-12-16    1.245633
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0.37971319526808683
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts[:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-12-12    0.379713
2020-12-13   -0.649630
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-12-12    0.379713
2020-12-14   -0.032518
2020-12-16    1.245633
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts + ts[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-12-12    0.759426
2020-12-13         NaN
2020-12-14   -0.065036
2020-12-15         NaN
2020-12-16    2.491266
dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts[<span class="string">&#x27;2020-12-16 &#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>1.2456328552039189
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts[<span class="string">&#x27;2020 12 16 &#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>1.2456328552039189
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts[<span class="string">&#x27;2020/12/16 &#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>1.2456328552039189
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>range(0, 10)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1 = pd.Series(np.random.randn(<span class="number">1000</span>),index=pd.date_range(<span class="string">&#x27;1/1/2020&#x27;</span>,periods=<span class="number">1000</span>)) <span class="comment">#第一个参数填起始，第二个填往后的个数</span></span><br><span class="line">ts1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-01-01    1.015421
2020-01-02   -0.925705
2020-01-03    0.411136
2020-01-04    3.277916
2020-01-05    0.299188
2020-01-06    0.733276
2020-01-07   -1.107592
2020-01-08    0.722930
2020-01-09   -0.975348
2020-01-10    0.003595
2020-01-11   -1.373826
2020-01-12   -0.638642
2020-01-13    1.128604
2020-01-14   -2.095346
2020-01-15    0.144371
2020-01-16    0.734304
2020-01-17    1.119673
2020-01-18    0.907931
2020-01-19    0.256645
2020-01-20   -0.705373
2020-01-21    0.303569
2020-01-22    0.547839
2020-01-23    0.381227
2020-01-24    0.365932
2020-01-25    0.810783
2020-01-26   -1.643086
2020-01-27   -0.574171
2020-01-28    0.562728
2020-01-29   -1.661192
2020-01-30    0.517097
                ...   
2022-08-28    0.637243
2022-08-29   -0.169790
2022-08-30   -0.691629
2022-08-31   -0.842184
2022-09-01   -2.305659
2022-09-02    1.218228
2022-09-03    1.237527
2022-09-04    0.952033
2022-09-05   -1.000737
2022-09-06    1.487299
2022-09-07    0.353156
2022-09-08   -0.364672
2022-09-09   -0.663497
2022-09-10   -0.609711
2022-09-11    1.085439
2022-09-12   -1.507173
2022-09-13    1.983437
2022-09-14    0.770582
2022-09-15    1.150487
2022-09-16   -0.675567
2022-09-17    0.414473
2022-09-18    0.978067
2022-09-19   -0.388370
2022-09-20   -0.544610
2022-09-21    1.952220
2022-09-22    0.135257
2022-09-23    0.131512
2022-09-24    0.708617
2022-09-25   -1.108808
2022-09-26    0.120807
Freq: D, Length: 1000, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1[<span class="string">&#x27;2021&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2021-01-01    0.972144
2021-01-02   -0.707146
2021-01-03    0.233038
2021-01-04   -0.525640
2021-01-05    0.223811
2021-01-06   -0.151318
2021-01-07    0.614911
2021-01-08    0.258458
2021-01-09   -1.186136
2021-01-10   -0.508634
2021-01-11   -1.873592
2021-01-12    1.345920
2021-01-13    0.417211
2021-01-14   -0.231822
2021-01-15    0.113009
2021-01-16   -0.797792
2021-01-17    1.969733
2021-01-18    1.766248
2021-01-19    0.570053
2021-01-20    0.671557
2021-01-21    0.191409
2021-01-22   -0.264273
2021-01-23    0.408653
2021-01-24    2.437735
2021-01-25   -1.739791
2021-01-26    0.591862
2021-01-27   -0.772196
2021-01-28    1.424677
2021-01-29   -0.304999
2021-01-30    0.433909
                ...   
2021-12-02    0.434412
2021-12-03    1.323201
2021-12-04   -0.592772
2021-12-05    1.179661
2021-12-06    1.616478
2021-12-07    0.329433
2021-12-08    0.414689
2021-12-09    1.502765
2021-12-10   -0.031550
2021-12-11    0.265386
2021-12-12    0.520567
2021-12-13    1.184358
2021-12-14   -0.579254
2021-12-15   -0.086153
2021-12-16    0.104040
2021-12-17   -0.778835
2021-12-18   -1.682121
2021-12-19   -0.073131
2021-12-20    2.452238
2021-12-21    0.654806
2021-12-22    0.527968
2021-12-23   -0.141002
2021-12-24    1.192474
2021-12-25   -0.911540
2021-12-26   -1.150078
2021-12-27    1.731945
2021-12-28    0.272643
2021-12-29   -0.426860
2021-12-30    2.362099
2021-12-31   -0.820668
Freq: D, Length: 365, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1[<span class="string">&#x27;2021.01&#x27;</span>].<span class="built_in">sum</span>() <span class="comment">#求值的和</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>11.933662218114787
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1[datetime(<span class="number">2021</span>,<span class="number">12</span>,<span class="number">12</span>)] <span class="comment">#取值</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>0.5205669131839745
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1[<span class="string">&#x27;3/16/2020&#x27;</span>:<span class="string">&#x27;3/19/2020&#x27;</span>]  <span class="comment"># 包含末端数据</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-03-16    0.256742
2020-03-17   -0.567791
2020-03-18    0.513700
2020-03-19   -0.255108
Freq: D, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1[<span class="string">&#x27;3/16/2020&#x27;</span>:<span class="string">&#x27;3/19/2020&#x27;</span>] = <span class="number">1</span></span><br><span class="line">ts1[<span class="string">&#x27;3/16/2020&#x27;</span>:<span class="string">&#x27;3/19/2020&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-03-16    1.0
2020-03-17    1.0
2020-03-18    1.0
2020-03-19    1.0
Freq: D, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1[:<span class="string">&#x27;2020-01-06&#x27;</span>]  <span class="comment">#切片</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-01-01    1.015421
2020-01-02   -0.925705
2020-01-03    0.411136
2020-01-04    3.277916
2020-01-05    0.299188
2020-01-06    0.733276
Freq: D, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1.truncate(after=<span class="string">&#x27;1/6/2020&#x27;</span>)  <span class="comment">#找1月6之前的数据，after表示最终截至</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-01-01    1.015421
2020-01-02   -0.925705
2020-01-03    0.411136
2020-01-04    3.277916
2020-01-05    0.299188
2020-01-06    0.733276
Freq: D, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1.truncate(before=<span class="string">&#x27;1/6/2021&#x27;</span>) <span class="comment">#找之后的</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2021-01-06   -0.151318
2021-01-07    0.614911
2021-01-08    0.258458
2021-01-09   -1.186136
2021-01-10   -0.508634
2021-01-11   -1.873592
2021-01-12    1.345920
2021-01-13    0.417211
2021-01-14   -0.231822
2021-01-15    0.113009
2021-01-16   -0.797792
2021-01-17    1.969733
2021-01-18    1.766248
2021-01-19    0.570053
2021-01-20    0.671557
2021-01-21    0.191409
2021-01-22   -0.264273
2021-01-23    0.408653
2021-01-24    2.437735
2021-01-25   -1.739791
2021-01-26    0.591862
2021-01-27   -0.772196
2021-01-28    1.424677
2021-01-29   -0.304999
2021-01-30    0.433909
2021-01-31    0.809407
2021-02-01   -0.879357
2021-02-02   -0.107760
2021-02-03    0.448191
2021-02-04    0.353287
                ...   
2022-08-28    0.637243
2022-08-29   -0.169790
2022-08-30   -0.691629
2022-08-31   -0.842184
2022-09-01   -2.305659
2022-09-02    1.218228
2022-09-03    1.237527
2022-09-04    0.952033
2022-09-05   -1.000737
2022-09-06    1.487299
2022-09-07    0.353156
2022-09-08   -0.364672
2022-09-09   -0.663497
2022-09-10   -0.609711
2022-09-11    1.085439
2022-09-12   -1.507173
2022-09-13    1.983437
2022-09-14    0.770582
2022-09-15    1.150487
2022-09-16   -0.675567
2022-09-17    0.414473
2022-09-18    0.978067
2022-09-19   -0.388370
2022-09-20   -0.544610
2022-09-21    1.952220
2022-09-22    0.135257
2022-09-23    0.131512
2022-09-24    0.708617
2022-09-25   -1.108808
2022-09-26    0.120807
Freq: D, Length: 629, dtype: float64
</code></pre>
<h2 id="带有重复索引的时间序列"><a href="#带有重复索引的时间序列" class="headerlink" title="带有重复索引的时间序列"></a>带有重复索引的时间序列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = pd.DatetimeIndex([<span class="string">&#x27;1/1/2020&#x27;</span>,<span class="string">&#x27;1/2/2020&#x27;</span>,<span class="string">&#x27;1/2/2020&#x27;</span>,<span class="string">&#x27;1/2/2020&#x27;</span>,<span class="string">&#x27;1/3/2020&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts2 = pd.Series([<span class="string">&#x27;帅比&#x27;</span>,<span class="string">&#x27;呵呵&#x27;</span>,<span class="string">&#x27;张渤涛&#x27;</span>,<span class="string">&#x27;新青年&#x27;</span>,<span class="string">&#x27;小工&#x27;</span>],index=dates)</span><br><span class="line">ts2 <span class="comment">#日期可以重复、</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-01-01     帅比
2020-01-02     呵呵
2020-01-02    张渤涛
2020-01-02    新青年
2020-01-03     小工
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts2.index.is_unique <span class="comment">#不是重复的</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>False
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts2.groupby(level=<span class="number">0</span>).count()  <span class="comment">#level=0为最外层的索引分类</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2020-01-01    1
2020-01-02    3
2020-01-03    1
dtype: int64
</code></pre>
<h2 id="日期范围-频率-移动"><a href="#日期范围-频率-移动" class="headerlink" title="日期范围 频率 移动"></a>日期范围 频率 移动</h2><h3 id="生成日期范围"><a href="#生成日期范围" class="headerlink" title="生成日期范围"></a>生成日期范围</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.date_range?</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = pd.date_range(<span class="string">&#x27;2020-01-01&#x27;</span>,<span class="string">&#x27;2020-03-01&#x27;</span>)  <span class="comment">#起止日期</span></span><br><span class="line">index</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2020-01-01&#39;, &#39;2020-01-02&#39;, &#39;2020-01-03&#39;, &#39;2020-01-04&#39;,
               &#39;2020-01-05&#39;, &#39;2020-01-06&#39;, &#39;2020-01-07&#39;, &#39;2020-01-08&#39;,
               &#39;2020-01-09&#39;, &#39;2020-01-10&#39;, &#39;2020-01-11&#39;, &#39;2020-01-12&#39;,
               &#39;2020-01-13&#39;, &#39;2020-01-14&#39;, &#39;2020-01-15&#39;, &#39;2020-01-16&#39;,
               &#39;2020-01-17&#39;, &#39;2020-01-18&#39;, &#39;2020-01-19&#39;, &#39;2020-01-20&#39;,
               &#39;2020-01-21&#39;, &#39;2020-01-22&#39;, &#39;2020-01-23&#39;, &#39;2020-01-24&#39;,
               &#39;2020-01-25&#39;, &#39;2020-01-26&#39;, &#39;2020-01-27&#39;, &#39;2020-01-28&#39;,
               &#39;2020-01-29&#39;, &#39;2020-01-30&#39;, &#39;2020-01-31&#39;, &#39;2020-02-01&#39;,
               &#39;2020-02-02&#39;, &#39;2020-02-03&#39;, &#39;2020-02-04&#39;, &#39;2020-02-05&#39;,
               &#39;2020-02-06&#39;, &#39;2020-02-07&#39;, &#39;2020-02-08&#39;, &#39;2020-02-09&#39;,
               &#39;2020-02-10&#39;, &#39;2020-02-11&#39;, &#39;2020-02-12&#39;, &#39;2020-02-13&#39;,
               &#39;2020-02-14&#39;, &#39;2020-02-15&#39;, &#39;2020-02-16&#39;, &#39;2020-02-17&#39;,
               &#39;2020-02-18&#39;, &#39;2020-02-19&#39;, &#39;2020-02-20&#39;, &#39;2020-02-21&#39;,
               &#39;2020-02-22&#39;, &#39;2020-02-23&#39;, &#39;2020-02-24&#39;, &#39;2020-02-25&#39;,
               &#39;2020-02-26&#39;, &#39;2020-02-27&#39;, &#39;2020-02-28&#39;, &#39;2020-02-29&#39;,
               &#39;2020-03-01&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.date_range(<span class="string">&#x27;2020-01-01&#x27;</span>,periods=<span class="number">100</span>) <span class="comment">#往后100天</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2020-01-01&#39;, &#39;2020-01-02&#39;, &#39;2020-01-03&#39;, &#39;2020-01-04&#39;,
               &#39;2020-01-05&#39;, &#39;2020-01-06&#39;, &#39;2020-01-07&#39;, &#39;2020-01-08&#39;,
               &#39;2020-01-09&#39;, &#39;2020-01-10&#39;, &#39;2020-01-11&#39;, &#39;2020-01-12&#39;,
               &#39;2020-01-13&#39;, &#39;2020-01-14&#39;, &#39;2020-01-15&#39;, &#39;2020-01-16&#39;,
               &#39;2020-01-17&#39;, &#39;2020-01-18&#39;, &#39;2020-01-19&#39;, &#39;2020-01-20&#39;,
               &#39;2020-01-21&#39;, &#39;2020-01-22&#39;, &#39;2020-01-23&#39;, &#39;2020-01-24&#39;,
               &#39;2020-01-25&#39;, &#39;2020-01-26&#39;, &#39;2020-01-27&#39;, &#39;2020-01-28&#39;,
               &#39;2020-01-29&#39;, &#39;2020-01-30&#39;, &#39;2020-01-31&#39;, &#39;2020-02-01&#39;,
               &#39;2020-02-02&#39;, &#39;2020-02-03&#39;, &#39;2020-02-04&#39;, &#39;2020-02-05&#39;,
               &#39;2020-02-06&#39;, &#39;2020-02-07&#39;, &#39;2020-02-08&#39;, &#39;2020-02-09&#39;,
               &#39;2020-02-10&#39;, &#39;2020-02-11&#39;, &#39;2020-02-12&#39;, &#39;2020-02-13&#39;,
               &#39;2020-02-14&#39;, &#39;2020-02-15&#39;, &#39;2020-02-16&#39;, &#39;2020-02-17&#39;,
               &#39;2020-02-18&#39;, &#39;2020-02-19&#39;, &#39;2020-02-20&#39;, &#39;2020-02-21&#39;,
               &#39;2020-02-22&#39;, &#39;2020-02-23&#39;, &#39;2020-02-24&#39;, &#39;2020-02-25&#39;,
               &#39;2020-02-26&#39;, &#39;2020-02-27&#39;, &#39;2020-02-28&#39;, &#39;2020-02-29&#39;,
               &#39;2020-03-01&#39;, &#39;2020-03-02&#39;, &#39;2020-03-03&#39;, &#39;2020-03-04&#39;,
               &#39;2020-03-05&#39;, &#39;2020-03-06&#39;, &#39;2020-03-07&#39;, &#39;2020-03-08&#39;,
               &#39;2020-03-09&#39;, &#39;2020-03-10&#39;, &#39;2020-03-11&#39;, &#39;2020-03-12&#39;,
               &#39;2020-03-13&#39;, &#39;2020-03-14&#39;, &#39;2020-03-15&#39;, &#39;2020-03-16&#39;,
               &#39;2020-03-17&#39;, &#39;2020-03-18&#39;, &#39;2020-03-19&#39;, &#39;2020-03-20&#39;,
               &#39;2020-03-21&#39;, &#39;2020-03-22&#39;, &#39;2020-03-23&#39;, &#39;2020-03-24&#39;,
               &#39;2020-03-25&#39;, &#39;2020-03-26&#39;, &#39;2020-03-27&#39;, &#39;2020-03-28&#39;,
               &#39;2020-03-29&#39;, &#39;2020-03-30&#39;, &#39;2020-03-31&#39;, &#39;2020-04-01&#39;,
               &#39;2020-04-02&#39;, &#39;2020-04-03&#39;, &#39;2020-04-04&#39;, &#39;2020-04-05&#39;,
               &#39;2020-04-06&#39;, &#39;2020-04-07&#39;, &#39;2020-04-08&#39;, &#39;2020-04-09&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.date_range(end=<span class="string">&#x27;2020-01-01&#x27;</span>,periods=<span class="number">100</span>) <span class="comment">#往前100天</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2019-09-24&#39;, &#39;2019-09-25&#39;, &#39;2019-09-26&#39;, &#39;2019-09-27&#39;,
               &#39;2019-09-28&#39;, &#39;2019-09-29&#39;, &#39;2019-09-30&#39;, &#39;2019-10-01&#39;,
               &#39;2019-10-02&#39;, &#39;2019-10-03&#39;, &#39;2019-10-04&#39;, &#39;2019-10-05&#39;,
               &#39;2019-10-06&#39;, &#39;2019-10-07&#39;, &#39;2019-10-08&#39;, &#39;2019-10-09&#39;,
               &#39;2019-10-10&#39;, &#39;2019-10-11&#39;, &#39;2019-10-12&#39;, &#39;2019-10-13&#39;,
               &#39;2019-10-14&#39;, &#39;2019-10-15&#39;, &#39;2019-10-16&#39;, &#39;2019-10-17&#39;,
               &#39;2019-10-18&#39;, &#39;2019-10-19&#39;, &#39;2019-10-20&#39;, &#39;2019-10-21&#39;,
               &#39;2019-10-22&#39;, &#39;2019-10-23&#39;, &#39;2019-10-24&#39;, &#39;2019-10-25&#39;,
               &#39;2019-10-26&#39;, &#39;2019-10-27&#39;, &#39;2019-10-28&#39;, &#39;2019-10-29&#39;,
               &#39;2019-10-30&#39;, &#39;2019-10-31&#39;, &#39;2019-11-01&#39;, &#39;2019-11-02&#39;,
               &#39;2019-11-03&#39;, &#39;2019-11-04&#39;, &#39;2019-11-05&#39;, &#39;2019-11-06&#39;,
               &#39;2019-11-07&#39;, &#39;2019-11-08&#39;, &#39;2019-11-09&#39;, &#39;2019-11-10&#39;,
               &#39;2019-11-11&#39;, &#39;2019-11-12&#39;, &#39;2019-11-13&#39;, &#39;2019-11-14&#39;,
               &#39;2019-11-15&#39;, &#39;2019-11-16&#39;, &#39;2019-11-17&#39;, &#39;2019-11-18&#39;,
               &#39;2019-11-19&#39;, &#39;2019-11-20&#39;, &#39;2019-11-21&#39;, &#39;2019-11-22&#39;,
               &#39;2019-11-23&#39;, &#39;2019-11-24&#39;, &#39;2019-11-25&#39;, &#39;2019-11-26&#39;,
               &#39;2019-11-27&#39;, &#39;2019-11-28&#39;, &#39;2019-11-29&#39;, &#39;2019-11-30&#39;,
               &#39;2019-12-01&#39;, &#39;2019-12-02&#39;, &#39;2019-12-03&#39;, &#39;2019-12-04&#39;,
               &#39;2019-12-05&#39;, &#39;2019-12-06&#39;, &#39;2019-12-07&#39;, &#39;2019-12-08&#39;,
               &#39;2019-12-09&#39;, &#39;2019-12-10&#39;, &#39;2019-12-11&#39;, &#39;2019-12-12&#39;,
               &#39;2019-12-13&#39;, &#39;2019-12-14&#39;, &#39;2019-12-15&#39;, &#39;2019-12-16&#39;,
               &#39;2019-12-17&#39;, &#39;2019-12-18&#39;, &#39;2019-12-19&#39;, &#39;2019-12-20&#39;,
               &#39;2019-12-21&#39;, &#39;2019-12-22&#39;, &#39;2019-12-23&#39;, &#39;2019-12-24&#39;,
               &#39;2019-12-25&#39;, &#39;2019-12-26&#39;, &#39;2019-12-27&#39;, &#39;2019-12-28&#39;,
               &#39;2019-12-29&#39;, &#39;2019-12-30&#39;, &#39;2019-12-31&#39;, &#39;2020-01-01&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre>
<h4 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.date_range(<span class="string">&#x27;2021-02-1&#x27;</span>,<span class="string">&#x27;2021-07-18&#x27;</span>,freq= <span class="string">&#x27;3D&#x27;</span>) <span class="comment">#freq=3h：生成的间隔为3小时  3D: 间隔3天  B：工作日，周六周日  T/min：代表分组 M:月底</span></span><br><span class="line"><span class="comment">#BM 月底  MS月初 BMS工作日月底</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>DatetimeIndex([&#39;2021-02-01&#39;, &#39;2021-02-04&#39;, &#39;2021-02-07&#39;, &#39;2021-02-10&#39;,
               &#39;2021-02-13&#39;, &#39;2021-02-16&#39;, &#39;2021-02-19&#39;, &#39;2021-02-22&#39;,
               &#39;2021-02-25&#39;, &#39;2021-02-28&#39;, &#39;2021-03-03&#39;, &#39;2021-03-06&#39;,
               &#39;2021-03-09&#39;, &#39;2021-03-12&#39;, &#39;2021-03-15&#39;, &#39;2021-03-18&#39;,
               &#39;2021-03-21&#39;, &#39;2021-03-24&#39;, &#39;2021-03-27&#39;, &#39;2021-03-30&#39;,
               &#39;2021-04-02&#39;, &#39;2021-04-05&#39;, &#39;2021-04-08&#39;, &#39;2021-04-11&#39;,
               &#39;2021-04-14&#39;, &#39;2021-04-17&#39;, &#39;2021-04-20&#39;, &#39;2021-04-23&#39;,
               &#39;2021-04-26&#39;, &#39;2021-04-29&#39;, &#39;2021-05-02&#39;, &#39;2021-05-05&#39;,
               &#39;2021-05-08&#39;, &#39;2021-05-11&#39;, &#39;2021-05-14&#39;, &#39;2021-05-17&#39;,
               &#39;2021-05-20&#39;, &#39;2021-05-23&#39;, &#39;2021-05-26&#39;, &#39;2021-05-29&#39;,
               &#39;2021-06-01&#39;, &#39;2021-06-04&#39;, &#39;2021-06-07&#39;, &#39;2021-06-10&#39;,
               &#39;2021-06-13&#39;, &#39;2021-06-16&#39;, &#39;2021-06-19&#39;, &#39;2021-06-22&#39;,
               &#39;2021-06-25&#39;, &#39;2021-06-28&#39;, &#39;2021-07-01&#39;, &#39;2021-07-04&#39;,
               &#39;2021-07-07&#39;, &#39;2021-07-10&#39;, &#39;2021-07-13&#39;, &#39;2021-07-16&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;3D&#39;)
</code></pre>
<h4 id="移动数据"><a href="#移动数据" class="headerlink" title="移动数据"></a>移动数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts = pd.Series(np.random.randn(<span class="number">4</span>),</span><br><span class="line">                index=pd.date_range(<span class="string">&#x27;1/1/2000&#x27;</span>, periods=<span class="number">4</span>, freq=<span class="string">&#x27;M&#x27;</span>))</span><br><span class="line">ts</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2000-01-31    0.742958
2000-02-29    0.396846
2000-03-31   -0.555748
2000-04-30   -0.912331
Freq: M, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts.shift(<span class="number">2</span>)  <span class="comment">#数据整体往下移动两格</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2000-01-31         NaN
2000-02-29         NaN
2000-03-31    0.742958
2000-04-30    0.396846
Freq: M, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts.shift(-<span class="number">2</span>)  <span class="comment">#数据整体往上移动两格</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2000-01-31   -0.555748
2000-02-29   -0.912331
2000-03-31         NaN
2000-04-30         NaN
Freq: M, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts.shift(<span class="number">2</span>,freq=<span class="string">&#x27;M&#x27;</span>) <span class="comment">#只是没索引了，当间隔改为月的话，会增加两条索引重新给它设置新的索引，并且你看到的窗口往下移动</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>2000-03-31    0.742958
2000-04-30    0.396846
2000-05-31   -0.555748
2000-06-30   -0.912331
Freq: M, dtype: float64
</code></pre>
<h1 id="重采样"><a href="#重采样" class="headerlink" title="重采样"></a>重采样</h1><p>重采样：指得是时间序列从一个频率转换为另一个频率进行处理的过程</p>
<ul>
<li>从高频转换到低频  –&gt;  降采样</li>
<li>从低频转换到高频  –&gt;  升采样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = pd.DataFrame(np.random.uniform(<span class="number">10</span>,<span class="number">50</span>,(<span class="number">100</span>,<span class="number">1</span>)),index=pd.date_range(<span class="string">&#x27;20170101&#x27;</span>,periods=<span class="number">100</span>))</span><br><span class="line">t</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2017-01-01</th>
      <td>30.327404</td>
    </tr>
    <tr>
      <th>2017-01-02</th>
      <td>40.915130</td>
    </tr>
    <tr>
      <th>2017-01-03</th>
      <td>16.554264</td>
    </tr>
    <tr>
      <th>2017-01-04</th>
      <td>15.663962</td>
    </tr>
    <tr>
      <th>2017-01-05</th>
      <td>43.936492</td>
    </tr>
    <tr>
      <th>2017-01-06</th>
      <td>44.829614</td>
    </tr>
    <tr>
      <th>2017-01-07</th>
      <td>31.207797</td>
    </tr>
    <tr>
      <th>2017-01-08</th>
      <td>42.167725</td>
    </tr>
    <tr>
      <th>2017-01-09</th>
      <td>34.122413</td>
    </tr>
    <tr>
      <th>2017-01-10</th>
      <td>32.126023</td>
    </tr>
    <tr>
      <th>2017-01-11</th>
      <td>21.779617</td>
    </tr>
    <tr>
      <th>2017-01-12</th>
      <td>20.222224</td>
    </tr>
    <tr>
      <th>2017-01-13</th>
      <td>32.867062</td>
    </tr>
    <tr>
      <th>2017-01-14</th>
      <td>23.652470</td>
    </tr>
    <tr>
      <th>2017-01-15</th>
      <td>46.784360</td>
    </tr>
    <tr>
      <th>2017-01-16</th>
      <td>38.661963</td>
    </tr>
    <tr>
      <th>2017-01-17</th>
      <td>34.860746</td>
    </tr>
    <tr>
      <th>2017-01-18</th>
      <td>27.853424</td>
    </tr>
    <tr>
      <th>2017-01-19</th>
      <td>18.216845</td>
    </tr>
    <tr>
      <th>2017-01-20</th>
      <td>23.156989</td>
    </tr>
    <tr>
      <th>2017-01-21</th>
      <td>15.609212</td>
    </tr>
    <tr>
      <th>2017-01-22</th>
      <td>13.380196</td>
    </tr>
    <tr>
      <th>2017-01-23</th>
      <td>43.286301</td>
    </tr>
    <tr>
      <th>2017-01-24</th>
      <td>29.068007</td>
    </tr>
    <tr>
      <th>2017-01-25</th>
      <td>46.182942</td>
    </tr>
    <tr>
      <th>2017-01-26</th>
      <td>28.507913</td>
    </tr>
    <tr>
      <th>2017-01-27</th>
      <td>10.602039</td>
    </tr>
    <tr>
      <th>2017-01-28</th>
      <td>26.452661</td>
    </tr>
    <tr>
      <th>2017-01-29</th>
      <td>16.987459</td>
    </tr>
    <tr>
      <th>2017-01-30</th>
      <td>39.806725</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th>2017-03-12</th>
      <td>43.040965</td>
    </tr>
    <tr>
      <th>2017-03-13</th>
      <td>42.985399</td>
    </tr>
    <tr>
      <th>2017-03-14</th>
      <td>25.330216</td>
    </tr>
    <tr>
      <th>2017-03-15</th>
      <td>43.512956</td>
    </tr>
    <tr>
      <th>2017-03-16</th>
      <td>13.934661</td>
    </tr>
    <tr>
      <th>2017-03-17</th>
      <td>43.991213</td>
    </tr>
    <tr>
      <th>2017-03-18</th>
      <td>19.983546</td>
    </tr>
    <tr>
      <th>2017-03-19</th>
      <td>36.754277</td>
    </tr>
    <tr>
      <th>2017-03-20</th>
      <td>46.162958</td>
    </tr>
    <tr>
      <th>2017-03-21</th>
      <td>11.674419</td>
    </tr>
    <tr>
      <th>2017-03-22</th>
      <td>17.462935</td>
    </tr>
    <tr>
      <th>2017-03-23</th>
      <td>46.230006</td>
    </tr>
    <tr>
      <th>2017-03-24</th>
      <td>26.221426</td>
    </tr>
    <tr>
      <th>2017-03-25</th>
      <td>36.613506</td>
    </tr>
    <tr>
      <th>2017-03-26</th>
      <td>23.927521</td>
    </tr>
    <tr>
      <th>2017-03-27</th>
      <td>48.427552</td>
    </tr>
    <tr>
      <th>2017-03-28</th>
      <td>26.749165</td>
    </tr>
    <tr>
      <th>2017-03-29</th>
      <td>44.609260</td>
    </tr>
    <tr>
      <th>2017-03-30</th>
      <td>11.736764</td>
    </tr>
    <tr>
      <th>2017-03-31</th>
      <td>41.990252</td>
    </tr>
    <tr>
      <th>2017-04-01</th>
      <td>25.538289</td>
    </tr>
    <tr>
      <th>2017-04-02</th>
      <td>28.554712</td>
    </tr>
    <tr>
      <th>2017-04-03</th>
      <td>25.624661</td>
    </tr>
    <tr>
      <th>2017-04-04</th>
      <td>21.508418</td>
    </tr>
    <tr>
      <th>2017-04-05</th>
      <td>35.140544</td>
    </tr>
    <tr>
      <th>2017-04-06</th>
      <td>10.490037</td>
    </tr>
    <tr>
      <th>2017-04-07</th>
      <td>23.448571</td>
    </tr>
    <tr>
      <th>2017-04-08</th>
      <td>17.295457</td>
    </tr>
    <tr>
      <th>2017-04-09</th>
      <td>33.962500</td>
    </tr>
    <tr>
      <th>2017-04-10</th>
      <td>43.824611</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 1 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.resample(<span class="string">&#x27;M&#x27;</span>).<span class="built_in">sum</span>()  <span class="comment">#从高频到低频，重新采样 ，作用：可以想象求一个月赚了多少</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2017-01-31</th>
      <td>930.125510</td>
    </tr>
    <tr>
      <th>2017-02-28</th>
      <td>927.387269</td>
    </tr>
    <tr>
      <th>2017-03-31</th>
      <td>930.943484</td>
    </tr>
    <tr>
      <th>2017-04-30</th>
      <td>265.387801</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.resample(<span class="string">&#x27;10D&#x27;</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2017-01-01</th>
      <td>331.850824</td>
    </tr>
    <tr>
      <th>2017-01-11</th>
      <td>288.055700</td>
    </tr>
    <tr>
      <th>2017-01-21</th>
      <td>269.883455</td>
    </tr>
    <tr>
      <th>2017-01-31</th>
      <td>354.272591</td>
    </tr>
    <tr>
      <th>2017-02-10</th>
      <td>334.515093</td>
    </tr>
    <tr>
      <th>2017-02-20</th>
      <td>290.188328</td>
    </tr>
    <tr>
      <th>2017-03-02</th>
      <td>268.351278</td>
    </tr>
    <tr>
      <th>2017-03-12</th>
      <td>327.370609</td>
    </tr>
    <tr>
      <th>2017-03-22</th>
      <td>323.968386</td>
    </tr>
    <tr>
      <th>2017-04-01</th>
      <td>265.387801</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升采样</span></span><br><span class="line">frame = pd.DataFrame(np.random.randn(<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                    index=pd.date_range(<span class="string">&#x27;1/1/2000&#x27;</span>, periods=<span class="number">2</span>,freq=<span class="string">&#x27;W-WED&#x27;</span>),</span><br><span class="line">                    columns=[<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>])</span><br><span class="line">frame</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>上海</th>
      <th>北京</th>
      <th>深圳</th>
      <th>广州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2000-01-05</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-12</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.resample(<span class="string">&#x27;D&#x27;</span>).asfreq()  <span class="comment">#展开显示</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>上海</th>
      <th>北京</th>
      <th>深圳</th>
      <th>广州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2000-01-05</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-06</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2000-01-07</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2000-01-08</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2000-01-09</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2000-01-10</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2000-01-11</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2000-01-12</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.resample(<span class="string">&#x27;D&#x27;</span>).ffill()   <span class="comment">#往下填充</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>上海</th>
      <th>北京</th>
      <th>深圳</th>
      <th>广州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2000-01-05</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-06</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-07</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-08</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-09</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-10</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-11</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-12</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.resample(<span class="string">&#x27;D&#x27;</span>).bfill() <span class="comment">#网上填充</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>上海</th>
      <th>北京</th>
      <th>深圳</th>
      <th>广州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2000-01-05</th>
      <td>-0.203704</td>
      <td>-0.074523</td>
      <td>0.262120</td>
      <td>0.895930</td>
    </tr>
    <tr>
      <th>2000-01-06</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
    <tr>
      <th>2000-01-07</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
    <tr>
      <th>2000-01-08</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
    <tr>
      <th>2000-01-09</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
    <tr>
      <th>2000-01-10</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
    <tr>
      <th>2000-01-11</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
    <tr>
      <th>2000-01-12</th>
      <td>0.317731</td>
      <td>0.299179</td>
      <td>-0.273347</td>
      <td>-0.030339</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;数据/FremontBridge.csv&#x27;</span>,engine=<span class="string">&#x27;python&#x27;</span>,index_col=<span class="string">&#x27;Date&#x27;</span>,parse_dates=<span class="literal">True</span>)  <span class="comment">#index_col=把这一列作为index</span></span><br><span class="line">data  <span class="comment">#parse_dates告诉是时间索引数据</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Fremont Bridge Total</th>
      <th>Fremont Bridge East Sidewalk</th>
      <th>Fremont Bridge West Sidewalk</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2012-10-03 00:00:00</th>
      <td>13.0</td>
      <td>4.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>2012-10-03 01:00:00</th>
      <td>10.0</td>
      <td>4.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>2012-10-03 02:00:00</th>
      <td>2.0</td>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2012-10-03 03:00:00</th>
      <td>5.0</td>
      <td>2.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2012-10-03 04:00:00</th>
      <td>7.0</td>
      <td>6.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2012-10-03 05:00:00</th>
      <td>31.0</td>
      <td>21.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>2012-10-03 06:00:00</th>
      <td>155.0</td>
      <td>105.0</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>2012-10-03 07:00:00</th>
      <td>352.0</td>
      <td>257.0</td>
      <td>95.0</td>
    </tr>
    <tr>
      <th>2012-10-03 08:00:00</th>
      <td>437.0</td>
      <td>291.0</td>
      <td>146.0</td>
    </tr>
    <tr>
      <th>2012-10-03 09:00:00</th>
      <td>276.0</td>
      <td>172.0</td>
      <td>104.0</td>
    </tr>
    <tr>
      <th>2012-10-03 10:00:00</th>
      <td>118.0</td>
      <td>72.0</td>
      <td>46.0</td>
    </tr>
    <tr>
      <th>2012-10-03 11:00:00</th>
      <td>42.0</td>
      <td>10.0</td>
      <td>32.0</td>
    </tr>
    <tr>
      <th>2012-10-03 12:00:00</th>
      <td>76.0</td>
      <td>35.0</td>
      <td>41.0</td>
    </tr>
    <tr>
      <th>2012-10-03 13:00:00</th>
      <td>90.0</td>
      <td>42.0</td>
      <td>48.0</td>
    </tr>
    <tr>
      <th>2012-10-03 14:00:00</th>
      <td>128.0</td>
      <td>77.0</td>
      <td>51.0</td>
    </tr>
    <tr>
      <th>2012-10-03 15:00:00</th>
      <td>164.0</td>
      <td>72.0</td>
      <td>92.0</td>
    </tr>
    <tr>
      <th>2012-10-03 16:00:00</th>
      <td>315.0</td>
      <td>133.0</td>
      <td>182.0</td>
    </tr>
    <tr>
      <th>2012-10-03 17:00:00</th>
      <td>583.0</td>
      <td>192.0</td>
      <td>391.0</td>
    </tr>
    <tr>
      <th>2012-10-03 18:00:00</th>
      <td>380.0</td>
      <td>122.0</td>
      <td>258.0</td>
    </tr>
    <tr>
      <th>2012-10-03 19:00:00</th>
      <td>128.0</td>
      <td>59.0</td>
      <td>69.0</td>
    </tr>
    <tr>
      <th>2012-10-03 20:00:00</th>
      <td>80.0</td>
      <td>29.0</td>
      <td>51.0</td>
    </tr>
    <tr>
      <th>2012-10-03 21:00:00</th>
      <td>63.0</td>
      <td>25.0</td>
      <td>38.0</td>
    </tr>
    <tr>
      <th>2012-10-03 22:00:00</th>
      <td>49.0</td>
      <td>24.0</td>
      <td>25.0</td>
    </tr>
    <tr>
      <th>2012-10-03 23:00:00</th>
      <td>17.0</td>
      <td>5.0</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>2012-10-04 00:00:00</th>
      <td>18.0</td>
      <td>7.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>2012-10-04 01:00:00</th>
      <td>3.0</td>
      <td>3.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2012-10-04 02:00:00</th>
      <td>9.0</td>
      <td>3.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>2012-10-04 03:00:00</th>
      <td>3.0</td>
      <td>0.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2012-10-04 04:00:00</th>
      <td>8.0</td>
      <td>7.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2012-10-04 05:00:00</th>
      <td>26.0</td>
      <td>15.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2020-11-29 18:00:00</th>
      <td>22.0</td>
      <td>6.0</td>
      <td>16.0</td>
    </tr>
    <tr>
      <th>2020-11-29 19:00:00</th>
      <td>20.0</td>
      <td>10.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>2020-11-29 20:00:00</th>
      <td>18.0</td>
      <td>11.0</td>
      <td>7.0</td>
    </tr>
    <tr>
      <th>2020-11-29 21:00:00</th>
      <td>6.0</td>
      <td>1.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>2020-11-29 22:00:00</th>
      <td>7.0</td>
      <td>0.0</td>
      <td>7.0</td>
    </tr>
    <tr>
      <th>2020-11-29 23:00:00</th>
      <td>2.0</td>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2020-11-30 00:00:00</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2020-11-30 01:00:00</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2020-11-30 02:00:00</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2020-11-30 03:00:00</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2020-11-30 04:00:00</th>
      <td>1.0</td>
      <td>1.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2020-11-30 05:00:00</th>
      <td>10.0</td>
      <td>5.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>2020-11-30 06:00:00</th>
      <td>27.0</td>
      <td>16.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>2020-11-30 07:00:00</th>
      <td>68.0</td>
      <td>30.0</td>
      <td>38.0</td>
    </tr>
    <tr>
      <th>2020-11-30 08:00:00</th>
      <td>86.0</td>
      <td>32.0</td>
      <td>54.0</td>
    </tr>
    <tr>
      <th>2020-11-30 09:00:00</th>
      <td>78.0</td>
      <td>32.0</td>
      <td>46.0</td>
    </tr>
    <tr>
      <th>2020-11-30 10:00:00</th>
      <td>49.0</td>
      <td>21.0</td>
      <td>28.0</td>
    </tr>
    <tr>
      <th>2020-11-30 11:00:00</th>
      <td>69.0</td>
      <td>34.0</td>
      <td>35.0</td>
    </tr>
    <tr>
      <th>2020-11-30 12:00:00</th>
      <td>87.0</td>
      <td>38.0</td>
      <td>49.0</td>
    </tr>
    <tr>
      <th>2020-11-30 13:00:00</th>
      <td>99.0</td>
      <td>52.0</td>
      <td>47.0</td>
    </tr>
    <tr>
      <th>2020-11-30 14:00:00</th>
      <td>111.0</td>
      <td>56.0</td>
      <td>55.0</td>
    </tr>
    <tr>
      <th>2020-11-30 15:00:00</th>
      <td>154.0</td>
      <td>73.0</td>
      <td>81.0</td>
    </tr>
    <tr>
      <th>2020-11-30 16:00:00</th>
      <td>141.0</td>
      <td>54.0</td>
      <td>87.0</td>
    </tr>
    <tr>
      <th>2020-11-30 17:00:00</th>
      <td>91.0</td>
      <td>31.0</td>
      <td>60.0</td>
    </tr>
    <tr>
      <th>2020-11-30 18:00:00</th>
      <td>81.0</td>
      <td>16.0</td>
      <td>65.0</td>
    </tr>
    <tr>
      <th>2020-11-30 19:00:00</th>
      <td>35.0</td>
      <td>17.0</td>
      <td>18.0</td>
    </tr>
    <tr>
      <th>2020-11-30 20:00:00</th>
      <td>22.0</td>
      <td>12.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>2020-11-30 21:00:00</th>
      <td>11.0</td>
      <td>6.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>2020-11-30 22:00:00</th>
      <td>11.0</td>
      <td>5.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>2020-11-30 23:00:00</th>
      <td>5.0</td>
      <td>0.0</td>
      <td>5.0</td>
    </tr>
  </tbody>
</table>
<p>137798 rows × 3 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.columns = [<span class="string">&#x27;Total&#x27;</span>,<span class="string">&#x27;East&#x27;</span>,<span class="string">&#x27;West&#x27;</span>]</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Total</th>
      <th>East</th>
      <th>West</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2012-10-03 00:00:00</th>
      <td>13.0</td>
      <td>4.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>2012-10-03 01:00:00</th>
      <td>10.0</td>
      <td>4.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>2012-10-03 02:00:00</th>
      <td>2.0</td>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2012-10-03 03:00:00</th>
      <td>5.0</td>
      <td>2.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2012-10-03 04:00:00</th>
      <td>7.0</td>
      <td>6.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.dropna().describe()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Total</th>
      <th>East</th>
      <th>West</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>137777.000000</td>
      <td>137777.000000</td>
      <td>137777.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>112.490771</td>
      <td>51.267004</td>
      <td>61.223767</td>
    </tr>
    <tr>
      <th>std</th>
      <td>143.132406</td>
      <td>65.992109</td>
      <td>89.076846</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>14.000000</td>
      <td>6.000000</td>
      <td>7.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>61.000000</td>
      <td>28.000000</td>
      <td>30.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>147.000000</td>
      <td>69.000000</td>
      <td>75.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>1097.000000</td>
      <td>698.000000</td>
      <td>850.000000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.plot()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x19e397a2a20&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_86_1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weekly = data.resample(<span class="string">&#x27;M&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line">weekly</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Total</th>
      <th>East</th>
      <th>West</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2012-10-31</th>
      <td>131390.0</td>
      <td>67528.0</td>
      <td>63862.0</td>
    </tr>
    <tr>
      <th>2012-11-30</th>
      <td>101294.0</td>
      <td>52124.0</td>
      <td>49170.0</td>
    </tr>
    <tr>
      <th>2012-12-31</th>
      <td>72738.0</td>
      <td>37216.0</td>
      <td>35522.0</td>
    </tr>
    <tr>
      <th>2013-01-31</th>
      <td>89768.0</td>
      <td>45820.0</td>
      <td>43948.0</td>
    </tr>
    <tr>
      <th>2013-02-28</th>
      <td>100054.0</td>
      <td>51796.0</td>
      <td>48258.0</td>
    </tr>
    <tr>
      <th>2013-03-31</th>
      <td>132178.0</td>
      <td>68886.0</td>
      <td>63292.0</td>
    </tr>
    <tr>
      <th>2013-04-30</th>
      <td>143996.0</td>
      <td>74606.0</td>
      <td>69390.0</td>
    </tr>
    <tr>
      <th>2013-05-31</th>
      <td>217148.0</td>
      <td>113674.0</td>
      <td>103474.0</td>
    </tr>
    <tr>
      <th>2013-06-30</th>
      <td>198560.0</td>
      <td>102878.0</td>
      <td>95682.0</td>
    </tr>
    <tr>
      <th>2013-07-31</th>
      <td>235948.0</td>
      <td>120026.0</td>
      <td>115922.0</td>
    </tr>
    <tr>
      <th>2013-08-31</th>
      <td>209098.0</td>
      <td>106398.0</td>
      <td>102700.0</td>
    </tr>
    <tr>
      <th>2013-09-30</th>
      <td>161458.0</td>
      <td>83348.0</td>
      <td>78110.0</td>
    </tr>
    <tr>
      <th>2013-10-31</th>
      <td>162704.0</td>
      <td>84376.0</td>
      <td>78328.0</td>
    </tr>
    <tr>
      <th>2013-11-30</th>
      <td>118540.0</td>
      <td>61022.0</td>
      <td>57518.0</td>
    </tr>
    <tr>
      <th>2013-12-31</th>
      <td>87106.0</td>
      <td>45152.0</td>
      <td>41954.0</td>
    </tr>
    <tr>
      <th>2014-01-31</th>
      <td>119746.0</td>
      <td>61948.0</td>
      <td>57798.0</td>
    </tr>
    <tr>
      <th>2014-02-28</th>
      <td>94050.0</td>
      <td>48172.0</td>
      <td>45878.0</td>
    </tr>
    <tr>
      <th>2014-03-31</th>
      <td>126988.0</td>
      <td>65700.0</td>
      <td>61288.0</td>
    </tr>
    <tr>
      <th>2014-04-30</th>
      <td>173710.0</td>
      <td>89718.0</td>
      <td>83992.0</td>
    </tr>
    <tr>
      <th>2014-05-31</th>
      <td>237288.0</td>
      <td>122924.0</td>
      <td>114364.0</td>
    </tr>
    <tr>
      <th>2014-06-30</th>
      <td>221814.0</td>
      <td>112626.0</td>
      <td>109188.0</td>
    </tr>
    <tr>
      <th>2014-07-31</th>
      <td>241338.0</td>
      <td>122340.0</td>
      <td>118998.0</td>
    </tr>
    <tr>
      <th>2014-08-31</th>
      <td>224980.0</td>
      <td>112480.0</td>
      <td>112500.0</td>
    </tr>
    <tr>
      <th>2014-09-30</th>
      <td>195116.0</td>
      <td>102086.0</td>
      <td>93030.0</td>
    </tr>
    <tr>
      <th>2014-10-31</th>
      <td>166368.0</td>
      <td>89354.0</td>
      <td>77014.0</td>
    </tr>
    <tr>
      <th>2014-11-30</th>
      <td>113980.0</td>
      <td>55926.0</td>
      <td>58054.0</td>
    </tr>
    <tr>
      <th>2014-12-31</th>
      <td>97014.0</td>
      <td>47378.0</td>
      <td>49636.0</td>
    </tr>
    <tr>
      <th>2015-01-31</th>
      <td>121260.0</td>
      <td>71508.0</td>
      <td>49752.0</td>
    </tr>
    <tr>
      <th>2015-02-28</th>
      <td>117318.0</td>
      <td>65582.0</td>
      <td>51736.0</td>
    </tr>
    <tr>
      <th>2015-03-31</th>
      <td>142288.0</td>
      <td>69170.0</td>
      <td>73118.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2018-06-30</th>
      <td>226290.0</td>
      <td>91374.0</td>
      <td>134916.0</td>
    </tr>
    <tr>
      <th>2018-07-31</th>
      <td>256036.0</td>
      <td>104378.0</td>
      <td>151658.0</td>
    </tr>
    <tr>
      <th>2018-08-31</th>
      <td>223618.0</td>
      <td>88074.0</td>
      <td>135544.0</td>
    </tr>
    <tr>
      <th>2018-09-30</th>
      <td>192484.0</td>
      <td>77548.0</td>
      <td>114936.0</td>
    </tr>
    <tr>
      <th>2018-10-31</th>
      <td>181964.0</td>
      <td>71942.0</td>
      <td>110022.0</td>
    </tr>
    <tr>
      <th>2018-11-30</th>
      <td>136862.0</td>
      <td>53386.0</td>
      <td>83476.0</td>
    </tr>
    <tr>
      <th>2018-12-31</th>
      <td>93882.0</td>
      <td>37088.0</td>
      <td>56794.0</td>
    </tr>
    <tr>
      <th>2019-01-31</th>
      <td>145766.0</td>
      <td>57414.0</td>
      <td>88352.0</td>
    </tr>
    <tr>
      <th>2019-02-28</th>
      <td>72198.0</td>
      <td>27632.0</td>
      <td>44566.0</td>
    </tr>
    <tr>
      <th>2019-03-31</th>
      <td>170914.0</td>
      <td>68628.0</td>
      <td>102286.0</td>
    </tr>
    <tr>
      <th>2019-04-30</th>
      <td>175864.0</td>
      <td>68452.0</td>
      <td>107412.0</td>
    </tr>
    <tr>
      <th>2019-05-31</th>
      <td>258246.0</td>
      <td>103078.0</td>
      <td>155168.0</td>
    </tr>
    <tr>
      <th>2019-06-30</th>
      <td>265024.0</td>
      <td>103952.0</td>
      <td>161072.0</td>
    </tr>
    <tr>
      <th>2019-07-31</th>
      <td>275428.0</td>
      <td>106332.0</td>
      <td>169096.0</td>
    </tr>
    <tr>
      <th>2019-08-31</th>
      <td>284828.0</td>
      <td>104880.0</td>
      <td>179948.0</td>
    </tr>
    <tr>
      <th>2019-09-30</th>
      <td>224348.0</td>
      <td>82898.0</td>
      <td>141450.0</td>
    </tr>
    <tr>
      <th>2019-10-31</th>
      <td>208996.0</td>
      <td>74218.0</td>
      <td>134778.0</td>
    </tr>
    <tr>
      <th>2019-11-30</th>
      <td>169926.0</td>
      <td>59488.0</td>
      <td>110438.0</td>
    </tr>
    <tr>
      <th>2019-12-31</th>
      <td>122754.0</td>
      <td>42736.0</td>
      <td>80018.0</td>
    </tr>
    <tr>
      <th>2020-01-31</th>
      <td>117972.0</td>
      <td>40564.0</td>
      <td>77408.0</td>
    </tr>
    <tr>
      <th>2020-02-29</th>
      <td>144914.0</td>
      <td>49512.0</td>
      <td>95402.0</td>
    </tr>
    <tr>
      <th>2020-03-31</th>
      <td>106462.0</td>
      <td>42959.0</td>
      <td>63503.0</td>
    </tr>
    <tr>
      <th>2020-04-30</th>
      <td>130750.0</td>
      <td>61868.0</td>
      <td>68882.0</td>
    </tr>
    <tr>
      <th>2020-05-31</th>
      <td>72668.0</td>
      <td>33702.0</td>
      <td>38966.0</td>
    </tr>
    <tr>
      <th>2020-06-30</th>
      <td>75787.0</td>
      <td>33053.0</td>
      <td>42734.0</td>
    </tr>
    <tr>
      <th>2020-07-31</th>
      <td>88177.0</td>
      <td>37788.0</td>
      <td>50389.0</td>
    </tr>
    <tr>
      <th>2020-08-31</th>
      <td>88351.0</td>
      <td>37919.0</td>
      <td>50432.0</td>
    </tr>
    <tr>
      <th>2020-09-30</th>
      <td>58143.0</td>
      <td>24703.0</td>
      <td>33440.0</td>
    </tr>
    <tr>
      <th>2020-10-31</th>
      <td>58751.0</td>
      <td>24210.0</td>
      <td>34541.0</td>
    </tr>
    <tr>
      <th>2020-11-30</th>
      <td>39920.0</td>
      <td>17168.0</td>
      <td>22752.0</td>
    </tr>
  </tbody>
</table>
<p>98 rows × 3 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weekly.plot(style=[<span class="string">&#x27;:&#x27;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x19e38b30668&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_88_1.png"></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>

]]></content>
      <categories>
        <category>数据分析</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib可视化</title>
    <url>/21907.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">数据可视化</span><span id="gray-block">Matplotlib</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#下面两行代码必先加载</span></span><br><span class="line"><span class="comment">## 加载字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 指定默认字体| #不然就画图显示不了中文说明</span></span><br><span class="line"><span class="comment"># 显示负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>    <span class="comment">#默认不显示负号，所以我们得加</span></span><br></pre></td></tr></table></figure>

<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>range(0, 10)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y= np.random.randint(<span class="number">10</span>,size=(<span class="number">10</span>,))</span><br><span class="line">y</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>array([8, 4, 7, 0, 8, 2, 5, 0, 1, 6])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = [np.random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">y</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[2, 3, 5, 4, 0, 6, 4, 4, 7, 4]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x1ca51bcccc0&gt;]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_6_188.png" alt="output_6_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x,[np.random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)],<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">plt.plot(x,[np.random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)],<span class="string">&#x27;b&#x27;</span>)<span class="comment"># r就是颜色  +*代表点  更多线的样式查看教程文档</span></span><br><span class="line"><span class="comment">#多个线放在一个图表，必须放在一个代码块里面</span></span><br><span class="line">plt.plot(x,[np.random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)],color = <span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">plt.plot(x,[np.random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)],color = <span class="string">&#x27;#000000&#x27;</span>)</span><br><span class="line"><span class="comment">#color 名称开头首字母什么的都行，网上查</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x1ca521580b8&gt;]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_1.png" alt="output_7_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置图表标题</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">10</span>),[np.random.randint(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)],<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X轴&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y轴&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#刻度设置</span></span><br><span class="line">_x = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">_xtick = [<span class="string">&#x27;%d点&#x27;</span>%i <span class="keyword">for</span> i <span class="keyword">in</span> _x]</span><br><span class="line">plt.xticks(_x,_xtick) <span class="comment">#原来的刻度，需要改为的刻度</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;标题&#x27;</span>) <span class="comment">#最后加入标题，不然会多很多东西</span></span><br><span class="line"><span class="comment">#plot.show() pycharm需要加入，不然不显示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Text(0.5,1,&#39;标题&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_2.png" alt="output_8_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">avenger = [<span class="number">17974.4</span>,<span class="number">50918.4</span>,<span class="number">30033.0</span>,<span class="number">40329.1</span>,<span class="number">52330.2</span>,<span class="number">19833.3</span>,<span class="number">11902.0</span>,<span class="number">24322.6</span>,<span class="number">47521.8</span>,<span class="number">32262.0</span>,<span class="number">22841.9</span>,<span class="number">12938.7</span>,<span class="number">4835.1</span>,<span class="number">3118.1</span>,<span class="number">2570.9</span>,<span class="number">2267.9</span>,<span class="number">1902.8</span>,<span class="number">2548.9</span>,<span class="number">5046.6</span>,<span class="number">3600.8</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.plot(avenger,marker=<span class="string">&quot;*&quot;</span>,markerfacecolor=<span class="string">&#x27;k&#x27;</span>,markersize=<span class="number">20</span>) <span class="comment">#marker为数据标记点   markerfacecolor数据点颜色k黑色  markersize大小</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">20</span>),[<span class="string">&quot;第%d天&quot;</span>%x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>)],fontproperties=<span class="string">&#x27;SimHei&#x27;</span>,size=<span class="number">16</span>,rotation=<span class="number">45</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;天数&#x27;</span>,fontdict=&#123;<span class="string">&#x27;family&#x27;</span>:<span class="string">&#x27;SimHei&#x27;</span>,<span class="string">&#x27;size&#x27;</span>:<span class="number">16</span>&#125;)  <span class="comment">#fontdict改显示的字体，不加就显示不出来字体（不加开头那 两句话）</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;票房数(万)&#x27;</span>,fontdict=&#123;<span class="string">&#x27;family&#x27;</span>:<span class="string">&#x27;SimHei&#x27;</span>,<span class="string">&#x27;size&#x27;</span>:<span class="number">16</span>&#125;)</span><br><span class="line">plt.grid() <span class="comment"># 加入网格背景</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_3.png" alt="output_9_0"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">y = np.sin(x) </span><br><span class="line">plt.plot(x,y,marker=<span class="string">&#x27;*&#x27;</span>,markerfacecolor=<span class="string">&#x27;r&#x27;</span>,markersize=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x1ca537f29b0&gt;]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_4.png" alt="output_10_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line">plt.plot (x,y)</span><br><span class="line">plt.annotate(<span class="string">&#x27;the max&#x27;</span>,xy=(<span class="number">5</span>,<span class="number">5</span>),xytext=(<span class="number">6</span>,<span class="number">4</span>),arrowprops=<span class="built_in">dict</span>(facecolor=<span class="string">&#x27;k&#x27;</span>,shrink=<span class="number">1</span>))  <span class="comment">#xy表示处在点位置  xytext表示偏移放的地方</span></span><br><span class="line"><span class="comment">#shrink=1 代表范围区间(0-1) 设置箭头与你偏移文本的箭头长度</span></span><br><span class="line"><span class="comment">#arrowprops箭头</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Text(6,4,&#39;the max&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_5.png" alt="output_11_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#风格设置</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;seaborn-dark&#x27;</span>) <span class="comment">#一个主题  ，详细看文档</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)  <span class="comment">#</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y,marker=<span class="string">&#x27;o&#x27;</span>,markersize=<span class="number">10</span>)</span><br><span class="line">plt.grid() <span class="comment">#网格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#图片保存</span></span><br><span class="line">plt.savefig(<span class="string">r&#x27;demo.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_6.png" alt="output_12_0"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line">GDP = [<span class="number">12406.8</span>,<span class="number">13908.57</span>,<span class="number">9386.87</span>,<span class="number">9143.64</span>]</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="number">4</span>),GDP,width=<span class="number">0.7</span>,alpha=<span class="number">0.5</span>) <span class="comment">#alpha透明度 柱状图的透明度  width柱子宽度</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;城市&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;GDP&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">4</span>),[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>])</span><br><span class="line"><span class="comment">#设置刻度范围</span></span><br><span class="line">plt.ylim([<span class="number">5000</span>,<span class="number">15000</span>])</span><br><span class="line">plt.grid()</span><br><span class="line"><span class="comment">#为柱子添加数据标签</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">enumerate</span>(GDP):</span><br><span class="line">    plt.text(x,y+<span class="number">300</span>,<span class="string">&#x27;%s&#x27;</span>%y,ha=<span class="string">&#x27;center&#x27;</span>)  <span class="comment">#前面两个参数固定坐标,后面的设置文本，+300防止重叠，ha=&#x27;center&#x27;居中显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#标题</span></span><br><span class="line">plt.title(<span class="string">&#x27;四个城市GDP比拼&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Text(0.5,1,&#39;四个城市GDP比拼&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_7.png" alt="output_13_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line">GDP = [<span class="number">12406.8</span>,<span class="number">13908.57</span>,<span class="number">9386.87</span>,<span class="number">9143.64</span>]</span><br><span class="line">plt.barh(<span class="built_in">range</span>(<span class="number">4</span>),GDP,height=<span class="number">0.5</span>,alpha=<span class="number">0.5</span>) <span class="comment">#bar-&gt; barh横过来了  width-&gt;height</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;城市&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;GDP&#x27;</span>)</span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">4</span>),[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>])</span><br><span class="line"><span class="comment">#设置刻度范围</span></span><br><span class="line">plt.xlim([<span class="number">5000</span>,<span class="number">15000</span>])</span><br><span class="line">plt.grid()</span><br><span class="line"><span class="comment">#为柱子添加数据标签</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">enumerate</span>(GDP):</span><br><span class="line">    plt.text(y+<span class="number">300</span>,x,<span class="string">&#x27;%s&#x27;</span>%y)  <span class="comment">#前面两个参数固定坐标,后面的设置文本，+300防止重叠，这里就不惜要ha=&#x27;center&#x27;居中显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#标题</span></span><br><span class="line">plt.title(<span class="string">&#x27;四个城市GDP比拼&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Text(0.5,1,&#39;四个城市GDP比拼&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_8.png" alt="output_14_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5.胡润财富榜：亿万资产超高净值家庭数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">Y2016 = [<span class="number">15600</span>,<span class="number">12700</span>,<span class="number">11300</span>,<span class="number">4270</span>,<span class="number">3620</span>]</span><br><span class="line">Y2017 = [<span class="number">17400</span>,<span class="number">14800</span>,<span class="number">12000</span>,<span class="number">5200</span>,<span class="number">4020</span>]</span><br><span class="line">labels = [<span class="string">&#x27;Beijing&#x27;</span>,<span class="string">&#x27;Shanghai&#x27;</span>,<span class="string">&#x27;Hongkong&#x27;</span>,<span class="string">&#x27;Shenzhen&#x27;</span>,<span class="string">&#x27;Guangzhou&#x27;</span>]</span><br><span class="line">bar_width = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] =[<span class="string">&#x27;Microsoft YaHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">plt.bar(np.arange(<span class="number">5</span>),Y2016,label=<span class="string">&#x27;2016&#x27;</span>,color=<span class="string">&#x27;steelblue&#x27;</span>,alpha=<span class="number">0.8</span>,width=bar_width)</span><br><span class="line">plt.bar(np.arange(<span class="number">5</span>) + bar_width, Y2017, label=<span class="string">&#x27;2017&#x27;</span>, color=<span class="string">&#x27;indianred&#x27;</span>,alpha=<span class="number">0.8</span>,width=bar_width)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Top5 City&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Family Amount&#x27;</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">5</span>)+bar_width-<span class="number">0.2</span>,labels)</span><br><span class="line">plt.ylim([<span class="number">2500</span>,<span class="number">20000</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Millions Family Amount Top5 City Distribution&#x27;</span>)</span><br><span class="line"><span class="comment"># 为每个条形图添加数值标签</span></span><br><span class="line"><span class="keyword">for</span> x2016,y2016 <span class="keyword">in</span> <span class="built_in">enumerate</span>(Y2016):</span><br><span class="line">    plt.text(x2016,y2016+<span class="number">100</span>,<span class="string">&#x27;%s&#x27;</span>%y2016,ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x2017,y2017 <span class="keyword">in</span> <span class="built_in">enumerate</span>(Y2017):</span><br><span class="line">    plt.text(x2017+bar_width, y2017+<span class="number">100</span>, <span class="string">&#x27;%s&#x27;</span> %y2017,ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示图例</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\matplotlib\font_manager.py:1328: UserWarning: findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans
  (prop.get_family(), self.defaultFamily[fontext]))
</code></pre>
<p>结果：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_9.png" alt="output_15_1"></p>
<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 指定默认字体</span></span><br><span class="line"><span class="comment"># 设置绘画的主题风格</span></span><br><span class="line"><span class="comment"># plt.style.use(&#x27;ggplot&#x27;)</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 构造数据</span></span><br><span class="line">edu = [<span class="number">0.2515</span>,<span class="number">0.3724</span>,<span class="number">0.3336</span>,<span class="number">0.0368</span>,<span class="number">0.0057</span>]</span><br><span class="line">labels = [<span class="string">&#x27;中专&#x27;</span>,<span class="string">&#x27;大专&#x27;</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;硕士&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>]</span><br><span class="line"></span><br><span class="line">explode = [<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]  <span class="comment"># 用于突出大专 1代表间隔</span></span><br><span class="line">colors=[<span class="string">&#x27;#FEB748&#x27;</span>,<span class="string">&#x27;#EDD25D&#x27;</span>,<span class="string">&#x27;#FE4F54&#x27;</span>,<span class="string">&#x27;#51B4FF&#x27;</span>,<span class="string">&#x27;#dd5555&#x27;</span>] <span class="comment"># 自定义颜色</span></span><br><span class="line"></span><br><span class="line">plt.axes(aspect=<span class="string">&#x27;equal&#x27;</span>)  <span class="comment"># 默认是圆形，设置这个才是圆形保证饼图是圆  不是默认的椭圆</span></span><br><span class="line">plt.pie(x=edu,  <span class="comment"># 数据</span></span><br><span class="line">        labels=labels,   <span class="comment"># 标签名称</span></span><br><span class="line">        autopct=<span class="string">&#x27;%.2f%%&#x27;</span>,  <span class="comment"># 设置百分比格式  保留几位小数   </span></span><br><span class="line">        colors=colors,  <span class="comment"># 使用自定义颜色</span></span><br><span class="line">        radius = <span class="number">1</span>,   <span class="comment"># 设置饼图半径</span></span><br><span class="line"><span class="comment">#         center = (80,80),  # 设置圆点</span></span><br><span class="line">        labeldistance = <span class="number">1.1</span>, <span class="comment"># 设置教育水平标签与圆心的距离  与半径相对性</span></span><br><span class="line">        startangle =<span class="number">30</span>, <span class="comment"># 设置饼图的初始角度  逆时针  可以旋转</span></span><br><span class="line">        textprops = &#123;<span class="string">&#x27;fontsize&#x27;</span>:<span class="number">12</span>, <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;k&#x27;</span>&#125;, <span class="comment"># 设置文本标签的属性值</span></span><br><span class="line">        explode=explode, <span class="comment"># 突出显示大专人群 拉开某些部分的东西</span></span><br><span class="line">        pctdistance=<span class="number">0.5</span>,   <span class="comment"># 占比和图距离</span></span><br><span class="line">        shadow=<span class="literal">True</span>    <span class="comment"># 显示阴影</span></span><br><span class="line">       )</span><br><span class="line">plt.title(<span class="string">&#x27;失信人员组成&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>Text(0.5,1,&#39;失信人员组成&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_10.png" alt="png"></p>
<h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">durations = [<span class="number">131</span>,  <span class="number">98</span>, <span class="number">125</span>, <span class="number">131</span>, <span class="number">124</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">117</span>, <span class="number">128</span>, <span class="number">108</span>, <span class="number">135</span>, <span class="number">138</span>, <span class="number">131</span>, <span class="number">102</span>, <span class="number">107</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">128</span>, <span class="number">121</span>, <span class="number">142</span>, <span class="number">127</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">115</span>,  <span class="number">99</span>, <span class="number">136</span>, <span class="number">126</span>, <span class="number">134</span>,  <span class="number">95</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">111</span>,<span class="number">78</span>, <span class="number">132</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">150</span>, <span class="number">110</span>, <span class="number">117</span>,  <span class="number">86</span>,  <span class="number">95</span>, <span class="number">144</span>, <span class="number">105</span>, <span class="number">126</span>, <span class="number">130</span>,<span class="number">126</span>, <span class="number">130</span>, <span class="number">126</span>, <span class="number">116</span>, <span class="number">123</span>, <span class="number">106</span>, <span class="number">112</span>, <span class="number">138</span>, <span class="number">123</span>,  <span class="number">86</span>, <span class="number">101</span>,  <span class="number">99</span>, <span class="number">136</span>,<span class="number">123</span>, <span class="number">117</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">137</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">104</span>, <span class="number">109</span>, <span class="number">134</span>, <span class="number">125</span>, <span class="number">127</span>,<span class="number">105</span>, <span class="number">120</span>, <span class="number">107</span>, <span class="number">129</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">132</span>, <span class="number">103</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">114</span>,<span class="number">105</span>, <span class="number">115</span>, <span class="number">132</span>, <span class="number">145</span>, <span class="number">119</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">139</span>, <span class="number">125</span>, <span class="number">138</span>, <span class="number">109</span>, <span class="number">132</span>, <span class="number">134</span>,<span class="number">156</span>, <span class="number">106</span>, <span class="number">117</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">139</span>, <span class="number">119</span>, <span class="number">140</span>,  <span class="number">83</span>, <span class="number">110</span>, <span class="number">102</span>,<span class="number">123</span>,<span class="number">107</span>, <span class="number">143</span>, <span class="number">115</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">139</span>, <span class="number">123</span>, <span class="number">112</span>, <span class="number">118</span>, <span class="number">125</span>, <span class="number">109</span>, <span class="number">119</span>, <span class="number">133</span>,<span class="number">112</span>, <span class="number">114</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">131</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">135</span>,<span class="number">115</span>, <span class="number">146</span>, <span class="number">137</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">144</span>,  <span class="number">83</span>, <span class="number">123</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">154</span>,<span class="number">136</span>, <span class="number">100</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">129</span>, <span class="number">126</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">141</span>,<span class="number">120</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">149</span>, <span class="number">122</span>, <span class="number">122</span>, <span class="number">110</span>, <span class="number">118</span>, <span class="number">127</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">126</span>,<span class="number">114</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">141</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">133</span>, <span class="number">137</span>,  <span class="number">92</span>,<span class="number">121</span>, <span class="number">112</span>, <span class="number">146</span>,  <span class="number">97</span>, <span class="number">137</span>, <span class="number">105</span>,  <span class="number">98</span>, <span class="number">117</span>, <span class="number">112</span>,  <span class="number">81</span>,  <span class="number">97</span>, <span class="number">139</span>, <span class="number">113</span>,<span class="number">134</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">110</span>, <span class="number">137</span>, <span class="number">137</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">117</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">101</span>, <span class="number">110</span>,<span class="number">105</span>, <span class="number">129</span>, <span class="number">137</span>, <span class="number">112</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">133</span>, <span class="number">112</span>,  <span class="number">83</span>,  <span class="number">94</span>, <span class="number">146</span>, <span class="number">133</span>, <span class="number">101</span>,<span class="number">131</span>, <span class="number">116</span>, <span class="number">111</span>,  <span class="number">84</span>, <span class="number">137</span>, <span class="number">115</span>, <span class="number">122</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">111</span>,<span class="number">111</span>, <span class="number">133</span>, <span class="number">150</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># nums 每个区间值出现的个数   </span></span><br><span class="line"><span class="comment"># bins 区间的值   </span></span><br><span class="line"><span class="comment"># patches 每根柱子的对象</span></span><br><span class="line">nums,bins,patches = plt.hist(durations,bins=<span class="number">20</span>,edgecolor=<span class="string">&#x27;k&#x27;</span>) <span class="comment">#hist 直方图 bins代表分几个组20个柱子   得到三个返回值</span></span><br><span class="line">plt.xticks(bins,bins)</span><br><span class="line"><span class="keyword">for</span> num,<span class="built_in">bin</span> <span class="keyword">in</span> <span class="built_in">zip</span>(nums,bins):</span><br><span class="line">    plt.annotate(num,xy=(<span class="built_in">bin</span>,num),xytext=(<span class="built_in">bin</span>+<span class="number">1.5</span>,num+<span class="number">0.5</span>)) <span class="comment">#有区别，先加入文本 再x y</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_11.png" alt="output_19_0"></p>
<h1 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = np.random.rand(<span class="number">100</span>)*<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">data = np.append(data,np.array([-<span class="number">100</span>,<span class="number">100</span>]))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>[48.63615196  4.85738446 85.44432931 95.4224762  99.98074724 77.68752259
 78.4767547   2.54238662 83.64317742 30.36696158 23.444325   94.7396645
 55.47983484 17.02272776 94.46776256 78.62799878 32.05089448  9.61923244
 95.22294804 17.34530953 65.55933483 23.35354992 72.08798551 28.49045389
 66.17305283 16.62961118 54.33097017  1.16254035 94.63970076 26.6992328
  7.9129373  74.02479425 33.85687537 30.58818009 69.53018642  2.94615069
 14.95872837 20.0488287  97.70723637 36.36258893  9.71393751 46.38773327
 84.27965419 49.46269361 14.83636267 53.65301242 98.97348669  6.05768436
 71.35892208 67.59977635  5.49790077 51.19876815 85.83340351 11.79534787
 73.70157604 78.18888349 11.67628229 33.9994867   0.18345436 78.73331616
 22.08596747 62.78885341 20.48360931 97.023431   44.57476765 38.05114618
 98.89767301 49.83946527 49.1710227   9.1269853  88.8461028  57.32326013
 26.97131965 12.24761669 82.28408264 79.76027284 50.66108694 55.77013676
 99.12441543  5.74678991  2.85969814 75.93162007 20.8308843  50.10579621
 46.61382917 20.01722358 68.47941693 52.33577509 10.64563974 29.77751851
 32.27326265 58.56594434  9.90251867 57.32920236 52.12950476 65.92383044
 57.47884634 83.90678859 48.27063716 39.19418178]
[  48.63615196    4.85738446   85.44432931   95.4224762    99.98074724
   77.68752259   78.4767547     2.54238662   83.64317742   30.36696158
   23.444325     94.7396645    55.47983484   17.02272776   94.46776256
   78.62799878   32.05089448    9.61923244   95.22294804   17.34530953
   65.55933483   23.35354992   72.08798551   28.49045389   66.17305283
   16.62961118   54.33097017    1.16254035   94.63970076   26.6992328
    7.9129373    74.02479425   33.85687537   30.58818009   69.53018642
    2.94615069   14.95872837   20.0488287    97.70723637   36.36258893
    9.71393751   46.38773327   84.27965419   49.46269361   14.83636267
   53.65301242   98.97348669    6.05768436   71.35892208   67.59977635
    5.49790077   51.19876815   85.83340351   11.79534787   73.70157604
   78.18888349   11.67628229   33.9994867     0.18345436   78.73331616
   22.08596747   62.78885341   20.48360931   97.023431     44.57476765
   38.05114618   98.89767301   49.83946527   49.1710227     9.1269853
   88.8461028    57.32326013   26.97131965   12.24761669   82.28408264
   79.76027284   50.66108694   55.77013676   99.12441543    5.74678991
    2.85969814   75.93162007   20.8308843    50.10579621   46.61382917
   20.01722358   68.47941693   52.33577509   10.64563974   29.77751851
   32.27326265   58.56594434    9.90251867   57.32920236   52.12950476
   65.92383044   57.47884634   83.90678859   48.27063716   39.19418178
 -100.          100.        ]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.boxplot(data,meanline=<span class="literal">True</span>,showmeans=<span class="literal">True</span>)  <span class="comment">#meanline平均线  #showmeans中位数的线  </span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&#123;&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x1ca54c96978&gt;,
  &lt;matplotlib.lines.Line2D at 0x1ca54de19e8&gt;],
 &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x1ca54dd2048&gt;,
  &lt;matplotlib.lines.Line2D at 0x1ca54e29940&gt;],
 &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x1ca54c96390&gt;],
 &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x1ca54d74160&gt;],
 &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x1ca54e34438&gt;],
 &#39;means&#39;: [&lt;matplotlib.lines.Line2D at 0x1ca54e342b0&gt;]&#125;
</code></pre>
<p>结果：</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_12.png" alt="png"></p>
<h1 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.random.rand(<span class="number">10</span>)</span><br><span class="line">y = np.random.rand(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 随机的大小</span></span><br><span class="line"><span class="comment"># s = (30*np.random.rand(10))**2</span></span><br><span class="line">x1 = np.random.rand(<span class="number">10</span>)</span><br><span class="line">y2 = np.random.rand(<span class="number">10</span>)</span><br><span class="line">plt.scatter(x,y,alpha=<span class="number">0.5</span>,marker=<span class="string">&#x27;^&#x27;</span>,c=<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&quot;三角&quot;</span>)</span><br><span class="line">plt.scatter(x,y,alpha=<span class="number">0.5</span>,marker=<span class="string">&#x27;*&#x27;</span>,c=<span class="string">&#x27;b&#x27;</span>,label=<span class="string">&quot;五角&quot;</span>) <span class="comment">#label 是图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>) <span class="comment">#设置图例位置</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<pre><code>&lt;matplotlib.legend.Legend at 0x1ca589e2240&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_2_13.png" alt="output_24_1"></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据可视化</category>
        <category>Matplotlib</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib布局</title>
    <url>/21904.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">数据可视化</span><span id="gray-block">Matplotlib</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Figure容器对象"><a href="#Figure容器对象" class="headerlink" title="Figure容器对象"></a>Figure容器对象</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">9</span>)) <span class="comment">#16*9的容器对象</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>&lt;Figure size 1152x648 with 0 Axes&gt;
</code></pre>
<h1 id="子图对象"><a href="#子图对象" class="headerlink" title="子图对象"></a>子图对象</h1><h2 id="Axes-和-Subplot"><a href="#Axes-和-Subplot" class="headerlink" title="Axes 和 Subplot"></a>Axes 和 Subplot</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Axes：坐标系 </span></span><br><span class="line"><span class="comment">#Subplot</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">9</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)  <span class="comment">#221代表子图的位置  221：几行几列 第几个  2行2列第一个</span></span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)  <span class="comment">#</span></span><br><span class="line"><span class="comment"># ax3 = fig.add_subplot(223)</span></span><br><span class="line"><span class="comment"># ax4 = fig.add_subplot(224)</span></span><br><span class="line">ax1.<span class="built_in">set</span>(xlim=[<span class="number">0.5</span>,<span class="number">4.5</span>],ylim=[-<span class="number">2</span>,<span class="number">8</span>],title=<span class="string">&#x27;标题1&#x27;</span>,ylabel=<span class="string">&#x27;y轴&#x27;</span>,xlabel=<span class="string">&#x27;x轴&#x27;</span>)</span><br><span class="line">ax2.<span class="built_in">set</span>(xlim=[<span class="number">0.5</span>,<span class="number">4.5</span>],ylim=[-<span class="number">2</span>,<span class="number">8</span>],title=<span class="string">&#x27;标题2&#x27;</span>,ylabel=<span class="string">&#x27;y轴&#x27;</span>,xlabel=<span class="string">&#x27;x轴&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>[(-2, 8), Text(0,0.5,&#39;y轴&#39;), (0.5, 4.5), Text(0.5,0,&#39;x轴&#39;), Text(0.5,1,&#39;标题2&#39;)]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_4_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax3 = fig.add_axes([<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1</span>,<span class="number">1</span>])  <span class="comment">#原点坐标    原图长宽比例</span></span><br><span class="line">ax4 = fig.add_axes([<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.5</span>,<span class="number">0.5</span>])</span><br><span class="line">ax5 = fig.add_axes([<span class="number">0.3</span>,<span class="number">0.3</span>,<span class="number">0.5</span>,<span class="number">0.5</span>]) </span><br><span class="line">ax6 = fig.add_axes([<span class="number">0.4</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.5</span>])</span><br><span class="line">ax6.<span class="built_in">set</span>(title=<span class="string">&#x27;demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>[Text(0.5,1,&#39;demo&#39;)]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_5_1.png" alt="output_5_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">axes.plot(np.random.randn(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">axes.set_xlim([-<span class="number">3</span>,<span class="number">12</span>])</span><br><span class="line">axes.set_ylim([-<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">axes.set_xlabel(<span class="string">&#x27;x轴&#x27;</span>)</span><br><span class="line">axes.set_ylabel(<span class="string">&#x27;y轴&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>Text(0,0.5,&#39;y轴&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_6_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">10</span>)</span><br><span class="line">plt.plot(data)</span><br><span class="line"><span class="comment">#添加文本内容  比annotate方便</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>Text(0,0,&#39;hello&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_7_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 共享x轴  增加y轴</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">ax1.bar(np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>),np.random.rand(<span class="number">5</span>))</span><br><span class="line">ax2 = ax1.twinx() <span class="comment">#克隆一个共享x轴的axes对象</span></span><br><span class="line">ax2.plot(np.random.randn(<span class="number">10</span>),c=<span class="string">&#x27;k&#x27;</span>)  <span class="comment">#y轴不一样，但共用了x轴</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x1e5a26b1eb8&gt;]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_8_1.png" alt="png"></p>
<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt. figure()</span><br><span class="line">st = fig.suptitle(<span class="string">&#x27;主题&#x27;</span>)  <span class="comment">#主标题设置</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;ax1&#x27;</span>)</span><br><span class="line">ax2 = fig.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.8</span>,<span class="number">0.3</span>])</span><br><span class="line">ax2.<span class="built_in">set</span>(title = <span class="string">&#x27;ax2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">st.set_y(<span class="number">1</span>)  <span class="comment">#0在最底下，1在最上面</span></span><br><span class="line">st.set_x(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_12_0%20(2).png" alt="png"></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个figure对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 添加一个Axes</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line"><span class="comment"># 添加一个Axes，其中参数是left,bottom,width,height</span></span><br><span class="line">ax2 = fig.add_axes([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.3</span>])</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_1221_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(fig.gca())</span><br><span class="line"><span class="built_in">print</span>(fig.sca(ax1))  <span class="comment">#检测图像分别对应那个变量</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>Axes(0,0;1x0.3)
AxesSubplot(0.125,0.536818;0.775x0.343182)
</code></pre>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个figure对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 添加一个Axes</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line"><span class="comment"># 添加一个Axes，其中参数是left,bottom,width,height</span></span><br><span class="line">ax2 = fig.add_axes([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.3</span>])</span><br><span class="line"><span class="comment">#删除子图</span></span><br><span class="line">fig.delaxes(ax1)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output22_15_0.png" alt="png"></p>
<h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个figure对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 添加一个Axes</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line"><span class="comment"># 添加一个Axes，其中参数是left,bottom,width,height</span></span><br><span class="line">ax2 = fig.add_axes([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.3</span>])</span><br><span class="line"><span class="comment"># ax1.grid()</span></span><br><span class="line"><span class="comment"># ax2.grid()</span></span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> fig.axes:</span><br><span class="line">    ax.grid()  <span class="comment">#遍历每个axes</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_12217_0.png" alt="png"></p>
<h2 id="Axis容器"><a href="#Axis容器" class="headerlink" title="Axis容器"></a>Axis容器</h2><h3 id="标签位置设置"><a href="#标签位置设置" class="headerlink" title="标签位置设置"></a>标签位置设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = np.random.randn(<span class="number">10</span>)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">axes.plot(data)</span><br><span class="line">axes.set_xlabel(<span class="string">&#x27;x轴&#x27;</span>)</span><br><span class="line">axes.set_ylabel(<span class="string">&#x27;y轴&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x轴标签位置</span></span><br><span class="line">axes.xaxis.set_label_coords(<span class="number">0.5</span>,-<span class="number">0.1</span>)</span><br><span class="line">axes.yaxis.set_label_coords(-<span class="number">0.2</span>,<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_1129_0.png" alt="png"></p>
<h2 id="刻度格式设置"><a href="#刻度格式设置" class="headerlink" title="刻度格式设置"></a>刻度格式设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"></span><br><span class="line">data = np.random.randn(<span class="number">10</span>)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">axes.set_ylim([-<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">axes.plot(data)</span><br><span class="line">axes.set_xlabel(<span class="string">&#x27;X轴&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建格式化对象</span></span><br><span class="line">formatter = ticker.FormatStrFormatter(<span class="string">&#x27;%.2f&#x27;</span>)</span><br><span class="line">axes.yaxis.set_major_formatter(formatter)  <span class="comment">#使刻度保留两位小数</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_21_0.png" alt="png"></p>
<h2 id="Tick容器"><a href="#Tick容器" class="headerlink" title="Tick容器"></a>Tick容器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"></span><br><span class="line">data = np.random.randn(<span class="number">20</span>)*<span class="number">1000</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">axes.plot(data)</span><br><span class="line">axes.set_label(<span class="string">&#x27;X轴&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建格式化对象</span></span><br><span class="line">formatter = ticker.FormatStrFormatter(<span class="string">&#x27;%.2f&#x27;</span>)</span><br><span class="line">axes.yaxis.set_major_formatter(formatter)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> tick <span class="keyword">in</span> axes.yaxis.get_major_ticks():</span><br><span class="line">    tick.label1On = <span class="literal">True</span>  <span class="comment"># 左边  #左边右边都显示了标签</span></span><br><span class="line">    tick.label2On = <span class="literal">True</span>  <span class="comment"># 右边</span></span><br><span class="line">    tick.label2.set_color(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tick <span class="keyword">in</span> axes.xaxis.get_major_ticks():</span><br><span class="line">    tick.label1On = <span class="literal">False</span></span><br><span class="line">    tick.label2On = <span class="literal">True</span></span><br><span class="line">    tick.label2.set_color(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设置刻度线条的属性</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> axes.yaxis.get_ticklines():</span><br><span class="line">    line.set_color(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    line.set_markersize(<span class="number">50</span>)</span><br><span class="line">    line.set_markeredgewidth(<span class="number">10</span>)   </span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_23_0.png" alt="png"></p>
<h2 id="多图布局"><a href="#多图布局" class="headerlink" title="多图布局"></a>多图布局</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_plot</span>(<span class="params">ax, fontsize=<span class="number">12</span></span>):</span></span><br><span class="line">    ax.plot([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;x-label&#x27;</span>, fontsize=fontsize)</span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;y-label&#x27;</span>, fontsize=fontsize)</span><br><span class="line">    ax.set_title(<span class="string">&#x27;Title&#x27;</span>, fontsize=fontsize)</span><br><span class="line"></span><br><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">2</span>)  <span class="comment">#先创建2*2的画板</span></span><br><span class="line">fig.set_facecolor(<span class="string">&quot;y&quot;</span>)  <span class="comment">#背景颜色填充</span></span><br><span class="line">example_plot(axes[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">example_plot(axes[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">example_plot(axes[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">example_plot(axes[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#布局</span></span><br><span class="line">plt.tight_layout(w_pad=<span class="number">0.1</span>,h_pad=<span class="number">2</span>)  <span class="comment">#w_pad改左右间隔  h_pad改上下间隔</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_0211.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax1 = plt.subplot(<span class="number">211</span>)</span><br><span class="line">ax2 = plt.subplot(<span class="number">223</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;ax2&#x27;</span>)</span><br><span class="line">ax3 = plt.subplot(<span class="number">224</span>)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_2216_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add_axes的方式</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">ax2 = fig.add_axes([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>,<span class="number">0.4</span>]) <span class="comment">#相对于刻度的原点，而不是画布的原点</span></span><br><span class="line">ax2.set_title(<span class="string">&#x27;ax2&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<pre><code>Text(0.5,1,&#39;ax2&#39;)
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_27_1.png" alt="output_27_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置position的方式</span></span><br><span class="line">fig,axes = plt.subplots(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">#1行2个子图</span></span><br><span class="line">axes[<span class="number">1</span>].set_position([<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.5</span>,<span class="number">0.5</span>])  <span class="comment">#原点位置，比例</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_27_1.png" alt="png"></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据可视化</category>
        <category>Matplotlib</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn补充总结</title>
    <url>/21912.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">数据可视化</span><span id="gray-block">Seaborn</span></strong></p>
<h1 id="数据分析三大类型"><a href="#数据分析三大类型" class="headerlink" title="数据分析三大类型:"></a>数据分析三大类型:</h1><p><strong>探索型数据分析   —-&gt;   图表可视化</strong></p>
<p><strong>验证型数据分析   —-&gt;   假设检验</strong></p>
<p><strong>预测型数据分析   —-&gt;   机器学习</strong></p>
<h2 id="探索性数据分析的作用"><a href="#探索性数据分析的作用" class="headerlink" title="探索性数据分析的作用"></a>探索性数据分析的作用</h2><ol>
<li>与数据清理相辅相成</li>
<li>支持验证型数据分析和预测型数据分析<ul>
<li>该建立怎样的假设?</li>
<li>该使用哪些特征和模型进行预测?</li>
</ul>
</li>
</ol>
<h2 id="探索型数据分析的常用图表"><a href="#探索型数据分析的常用图表" class="headerlink" title="探索型数据分析的常用图表"></a>探索型数据分析的常用图表</h2><ul>
<li>条形图 直方图</li>
<li>饼图</li>
<li>折线图 散点图</li>
<li>箱线图</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&#x27;./seaborn-data&#x27;</span>)</span><br><span class="line">tips</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>total_bill</th>
      <th>tip</th>
      <th>sex</th>
      <th>smoker</th>
      <th>day</th>
      <th>time</th>
      <th>size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>16.99</td>
      <td>1.01</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10.34</td>
      <td>1.66</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>21.01</td>
      <td>3.50</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23.68</td>
      <td>3.31</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24.59</td>
      <td>3.61</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>25.29</td>
      <td>4.71</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>6</th>
      <td>8.77</td>
      <td>2.00</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>7</th>
      <td>26.88</td>
      <td>3.12</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>8</th>
      <td>15.04</td>
      <td>1.96</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>9</th>
      <td>14.78</td>
      <td>3.23</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>10</th>
      <td>10.27</td>
      <td>1.71</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>11</th>
      <td>35.26</td>
      <td>5.00</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>12</th>
      <td>15.42</td>
      <td>1.57</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>13</th>
      <td>18.43</td>
      <td>3.00</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>14</th>
      <td>14.83</td>
      <td>3.02</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>15</th>
      <td>21.58</td>
      <td>3.92</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>16</th>
      <td>10.33</td>
      <td>1.67</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>17</th>
      <td>16.29</td>
      <td>3.71</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>18</th>
      <td>16.97</td>
      <td>3.50</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>19</th>
      <td>20.65</td>
      <td>3.35</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>20</th>
      <td>17.92</td>
      <td>4.08</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>21</th>
      <td>20.29</td>
      <td>2.75</td>
      <td>Female</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>22</th>
      <td>15.77</td>
      <td>2.23</td>
      <td>Female</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>23</th>
      <td>39.42</td>
      <td>7.58</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>24</th>
      <td>19.82</td>
      <td>3.18</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>25</th>
      <td>17.81</td>
      <td>2.34</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>26</th>
      <td>13.37</td>
      <td>2.00</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>27</th>
      <td>12.69</td>
      <td>2.00</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>28</th>
      <td>21.70</td>
      <td>4.30</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>29</th>
      <td>19.65</td>
      <td>3.00</td>
      <td>Female</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>214</th>
      <td>28.17</td>
      <td>6.50</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>215</th>
      <td>12.90</td>
      <td>1.10</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>216</th>
      <td>28.15</td>
      <td>3.00</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>5</td>
    </tr>
    <tr>
      <th>217</th>
      <td>11.59</td>
      <td>1.50</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>218</th>
      <td>7.74</td>
      <td>1.44</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>219</th>
      <td>30.14</td>
      <td>3.09</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>220</th>
      <td>12.16</td>
      <td>2.20</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>2</td>
    </tr>
    <tr>
      <th>221</th>
      <td>13.42</td>
      <td>3.48</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>2</td>
    </tr>
    <tr>
      <th>222</th>
      <td>8.58</td>
      <td>1.92</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>1</td>
    </tr>
    <tr>
      <th>223</th>
      <td>15.98</td>
      <td>3.00</td>
      <td>Female</td>
      <td>No</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>3</td>
    </tr>
    <tr>
      <th>224</th>
      <td>13.42</td>
      <td>1.58</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>2</td>
    </tr>
    <tr>
      <th>225</th>
      <td>16.27</td>
      <td>2.50</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>2</td>
    </tr>
    <tr>
      <th>226</th>
      <td>10.09</td>
      <td>2.00</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Fri</td>
      <td>Lunch</td>
      <td>2</td>
    </tr>
    <tr>
      <th>227</th>
      <td>20.45</td>
      <td>3.00</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>228</th>
      <td>13.28</td>
      <td>2.72</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>229</th>
      <td>22.12</td>
      <td>2.88</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>230</th>
      <td>24.01</td>
      <td>2.00</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
    <tr>
      <th>231</th>
      <td>15.69</td>
      <td>3.00</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>232</th>
      <td>11.61</td>
      <td>3.39</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>233</th>
      <td>10.77</td>
      <td>1.47</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>234</th>
      <td>15.53</td>
      <td>3.00</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>235</th>
      <td>10.07</td>
      <td>1.25</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>236</th>
      <td>12.60</td>
      <td>1.00</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>237</th>
      <td>32.83</td>
      <td>1.17</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>238</th>
      <td>35.83</td>
      <td>4.67</td>
      <td>Female</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>239</th>
      <td>29.03</td>
      <td>5.92</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>240</th>
      <td>27.18</td>
      <td>2.00</td>
      <td>Female</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>241</th>
      <td>22.67</td>
      <td>2.00</td>
      <td>Male</td>
      <td>Yes</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>242</th>
      <td>17.82</td>
      <td>1.75</td>
      <td>Male</td>
      <td>No</td>
      <td>Sat</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>243</th>
      <td>18.78</td>
      <td>3.00</td>
      <td>Female</td>
      <td>No</td>
      <td>Thur</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
<p>244 rows × 7 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">&#x27;day&#x27;</span>,y=<span class="string">&#x27;total_bill&#x27;</span>,data=tips)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a8dd4d4470&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_5_1.png" alt="output_5_1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#黑色柱子是 Error bar 误差 越长误差越大  指的是波动</span></span><br></pre></td></tr></table></figure>

<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">penguins = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">penguins.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>species</th>
      <th>island</th>
      <th>bill_length_mm</th>
      <th>bill_depth_mm</th>
      <th>flipper_length_mm</th>
      <th>body_mass_g</th>
      <th>sex</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Adelie</td>
      <td>Torgersen</td>
      <td>39.1</td>
      <td>18.7</td>
      <td>181.0</td>
      <td>3750.0</td>
      <td>MALE</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Adelie</td>
      <td>Torgersen</td>
      <td>39.5</td>
      <td>17.4</td>
      <td>186.0</td>
      <td>3800.0</td>
      <td>FEMALE</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Adelie</td>
      <td>Torgersen</td>
      <td>40.3</td>
      <td>18.0</td>
      <td>195.0</td>
      <td>3250.0</td>
      <td>FEMALE</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Adelie</td>
      <td>Torgersen</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Adelie</td>
      <td>Torgersen</td>
      <td>36.7</td>
      <td>19.3</td>
      <td>193.0</td>
      <td>3450.0</td>
      <td>FEMALE</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">penguins = penguins.dropna()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(penguins[<span class="string">&quot;flipper_length_mm&quot;</span>])</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\matplotlib\axes\_axes.py:6462: UserWarning: The &#39;normed&#39; kwarg is deprecated, and has been replaced by the &#39;density&#39; kwarg.
  warnings.warn(&quot;The &#39;normed&#39; kwarg is deprecated, and has been &quot;





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a8dd8332b0&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_10_2.png" alt="png"></p>
<h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p>不支持</p>
<h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">ax = sns.pointplot(x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips,ci=<span class="number">68</span>)    <span class="comment">#  ci 68%确信周日给的小费数额在这个范围内</span></span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_14_0.png" alt="png"></p>
<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>,cache=<span class="literal">True</span>,data_home=<span class="string">&quot;./seaborn-data&quot;</span>)</span><br><span class="line">ax = sns.regplot(x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, data=tips)     <span class="comment">#推荐使用，回归的散点图  ，成正比</span></span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_16_0.png" alt="png"></p>
<p>两个属性之间的相关关系<br>这条线显示的数据大概数据符合怎样的趋势</p>
<h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax = sns.boxplot(x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, data=tips)   </span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_19_0.png" alt="png"></p>
<p>官方文档：<a href="https://seaborn.apachecn.org/#/README">https://seaborn.apachecn.org/#/README</a></p>
<p><strong>不懂的看课件</strong></p>
<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据可视化</category>
        <category>Seaborn</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn可视化</title>
    <url>/21910.html</url>
    <content><![CDATA[<p><strong><span id="yellow-block">数据分析</span><span id="green-block">数据可视化</span><span id="gray-block">Seaborn</span></strong></p>
<h1 id="基于matplotlib"><a href="#基于matplotlib" class="headerlink" title="基于matplotlib"></a>基于matplotlib</h1><h2 id="why-Seaborn"><a href="#why-Seaborn" class="headerlink" title="why Seaborn?"></a>why Seaborn?</h2><h3 id="1-作图更容易"><a href="#1-作图更容易" class="headerlink" title="1.作图更容易"></a>1.作图更容易</h3><h3 id="2-图形更漂亮"><a href="#2-图形更漂亮" class="headerlink" title="2.图形更漂亮"></a>2.图形更漂亮</h3><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>pip install seaborn<br>conda install seaborn</p>
<h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容:"></a>学习内容:</h2><h3 id="1-风格管理"><a href="#1-风格管理" class="headerlink" title="1.风格管理"></a>1.风格管理</h3><h4 id="绘图风格"><a href="#绘图风格" class="headerlink" title="- 绘图风格"></a>- 绘图风格</h4><h4 id="颜色风格"><a href="#颜色风格" class="headerlink" title="- 颜色风格"></a>- 颜色风格</h4><h3 id="2-绘图方法"><a href="#2-绘图方法" class="headerlink" title="2.绘图方法"></a>2.绘图方法</h3><h4 id="数据集的分布可视化"><a href="#数据集的分布可视化" class="headerlink" title="- 数据集的分布可视化"></a>- 数据集的分布可视化</h4><h4 id="分类数据可视化"><a href="#分类数据可视化" class="headerlink" title="- 分类数据可视化"></a>- 分类数据可视化</h4><h4 id="线性关系可视化"><a href="#线性关系可视化" class="headerlink" title="- 线性关系可视化"></a>- 线性关系可视化</h4><h3 id="3-结构网格"><a href="#3-结构网格" class="headerlink" title="3. 结构网格"></a>3. 结构网格</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正弦波</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinplot</span>(<span class="params">flip=<span class="number">1</span></span>):</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>,<span class="number">14</span>,<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">        plt.plot(x,np.sin(x+i*<span class="number">.5</span>)*(<span class="number">7</span>-i)*flip)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_6_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.<span class="built_in">set</span>()</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_7_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;whitegrid&quot;</span>)</span><br><span class="line">data = np.random.normal(size=(<span class="number">20</span>, <span class="number">6</span>)) + np.arange(<span class="number">6</span>) / <span class="number">2</span></span><br><span class="line">sns.boxplot(data=data);</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_8_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;dark&quot;</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_9_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_10_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#移除轴脊柱</span></span><br><span class="line">sinplot()</span><br><span class="line">sns.despine()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_11_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;whitegrid&quot;</span>)</span><br><span class="line">data = np.random.normal(size=(<span class="number">20</span>, <span class="number">6</span>)) + np.arange(<span class="number">6</span>) / <span class="number">2</span></span><br><span class="line">sns.boxplot(data=data)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_12_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 偏移轴脊柱</span></span><br><span class="line"><span class="comment"># 提琴箱线图</span></span><br><span class="line">f, ax = plt.subplots()</span><br><span class="line">sns.violinplot(data=data)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x17ae5f35860&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_13_1.png" alt="png"></p>
<h2 id="临时的绘图风格"><a href="#临时的绘图风格" class="headerlink" title="临时的绘图风格"></a>临时的绘图风格</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">&#x27;darkgrid&#x27;</span>):</span><br><span class="line">    plt.subplot(<span class="number">311</span>)</span><br><span class="line">    sinplot()</span><br><span class="line">plt.subplot(<span class="number">312</span>)</span><br><span class="line">sinplot(-<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">313</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_15_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.axes_style()</span><br><span class="line">&#123;<span class="string">&#x27;axes.axisbelow&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line"> <span class="string">&#x27;axes.edgecolor&#x27;</span>: <span class="string">&#x27;.8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;axes.facecolor&#x27;</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;axes.grid&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line"> <span class="string">&#x27;axes.labelcolor&#x27;</span>: <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;axes.linewidth&#x27;</span>: <span class="number">1.0</span>,</span><br><span class="line"> <span class="string">&#x27;figure.facecolor&#x27;</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;font.family&#x27;</span>: [<span class="string">u&#x27;sans-serif&#x27;</span>],</span><br><span class="line"> <span class="string">&#x27;font.sans-serif&#x27;</span>: [<span class="string">u&#x27;Arial&#x27;</span>,</span><br><span class="line">  <span class="string">u&#x27;DejaVu Sans&#x27;</span>,</span><br><span class="line">  <span class="string">u&#x27;Liberation Sans&#x27;</span>,</span><br><span class="line">  <span class="string">u&#x27;Bitstream Vera Sans&#x27;</span>,</span><br><span class="line">  <span class="string">u&#x27;sans-serif&#x27;</span>],</span><br><span class="line"> <span class="string">&#x27;grid.color&#x27;</span>: <span class="string">&#x27;.8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;grid.linestyle&#x27;</span>: <span class="string">u&#x27;-&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;image.cmap&#x27;</span>: <span class="string">u&#x27;rocket&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;legend.frameon&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line"> <span class="string">&#x27;legend.numpoints&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;legend.scatterpoints&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;lines.solid_capstyle&#x27;</span>: <span class="string">u&#x27;round&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;text.color&#x27;</span>: <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;xtick.color&#x27;</span>: <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;xtick.direction&#x27;</span>: <span class="string">u&#x27;out&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;xtick.major.size&#x27;</span>: <span class="number">0.0</span>,</span><br><span class="line"> <span class="string">&#x27;xtick.minor.size&#x27;</span>: <span class="number">0.0</span>,</span><br><span class="line"> <span class="string">&#x27;ytick.color&#x27;</span>: <span class="string">&#x27;.15&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ytick.direction&#x27;</span>: <span class="string">u&#x27;out&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ytick.major.size&#x27;</span>: <span class="number">0.0</span>,</span><br><span class="line"> <span class="string">&#x27;ytick.minor.size&#x27;</span>: <span class="number">0.0</span>&#125;</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_16_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;darkgrid&quot;</span>, &#123;<span class="string">&quot;axes.facecolor&quot;</span>: <span class="string">&quot;0.1&quot;</span>,<span class="string">&#x27;grid.color&#x27;</span>: <span class="string">&#x27;.9&#x27;</span>&#125;)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_17_0.png" alt="png"></p>
<h2 id="绘图比例"><a href="#绘图比例" class="headerlink" title="绘图比例"></a>绘图比例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_context(<span class="string">&quot;paper&quot;</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_20_0.png" alt="png"></p>
<h2 id="颜色风格设置"><a href="#颜色风格设置" class="headerlink" title="颜色风格设置"></a>颜色风格设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">sns.<span class="built_in">set</span>(rc=&#123;<span class="string">&quot;figure.figsize&quot;</span>: (<span class="number">6</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"><span class="comment"># np.random.seed(sum(map(ord, &quot;palettes&quot;)))</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.color_palette()</span><br></pre></td></tr></table></figure>




<pre><code>[(0.2980392156862745, 0.4470588235294118, 0.6901960784313725),
 (0.3333333333333333, 0.6588235294117647, 0.40784313725490196),
 (0.7686274509803922, 0.3058823529411765, 0.3215686274509804),
 (0.5058823529411764, 0.4470588235294118, 0.6980392156862745),
 (0.8, 0.7254901960784313, 0.4549019607843137),
 (0.39215686274509803, 0.7098039215686275, 0.803921568627451)]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current = sns.color_palette()</span><br><span class="line">sns.palplot(current)</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_24_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">themes = [<span class="string">&#x27;deep&#x27;</span>, <span class="string">&#x27;muted&#x27;</span>, <span class="string">&#x27;pastel&#x27;</span>, <span class="string">&#x27;bright&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="string">&#x27;colorblind&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> theme <span class="keyword">in</span> themes:</span><br><span class="line">    current_palette = sns.color_palette(theme)</span><br><span class="line">    sns.palplot(current_palette)</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_0.png" alt="png"></p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_1.png" alt="png"></p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_2.png" alt="png"></p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_3.png" alt="png"></p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_4.png" alt="png"></p>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_25_5.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.palplot(sns.color_palette(<span class="string">&quot;husl&quot;</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_26_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.palplot(sns.husl_palette(<span class="number">8</span>,l=<span class="number">0.5</span>,s=<span class="number">0.5</span>))  <span class="comment"># l亮度  s饱和度</span></span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_27_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flatui = [<span class="string">&quot;#9b59b6&quot;</span>, <span class="string">&quot;#3498db&quot;</span>, <span class="string">&quot;#95a5a6&quot;</span>, <span class="string">&quot;#e74c3c&quot;</span>, <span class="string">&quot;#34495e&quot;</span>, <span class="string">&quot;#2ecc71&quot;</span>]</span><br><span class="line">sns.palplot(sns.color_palette(flatui))</span><br></pre></td></tr></table></figure>


<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_28_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],sns.xkcd_rgb[<span class="string">&quot;red&quot;</span>],lw=<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],sns.xkcd_rgb[<span class="string">&quot;green&quot;</span>],lw=<span class="number">3</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>],sns.xkcd_rgb[<span class="string">&quot;blue&quot;</span>],lw=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x17ae5eeed68&gt;]
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_29_1.png" alt="png"></p>
<h2 id="数据集的分布可视化-1"><a href="#数据集的分布可视化-1" class="headerlink" title="数据集的分布可视化"></a>数据集的分布可视化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单变量分布</span></span><br><span class="line">x = np.random.normal(size=<span class="number">100</span>)</span><br><span class="line">sns.distplot(x)  </span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\matplotlib\axes\_axes.py:6462: UserWarning: The &#39;normed&#39; kwarg is deprecated, and has been replaced by the &#39;density&#39; kwarg.
  warnings.warn(&quot;The &#39;normed&#39; kwarg is deprecated, and has been &quot;





&lt;matplotlib.axes._subplots.AxesSubplot at 0x17ae5d33d30&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_31_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直方图  </span></span><br><span class="line">sns.distplot(x,kde=<span class="literal">False</span>,rug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\matplotlib\axes\_axes.py:6462: UserWarning: The &#39;normed&#39; kwarg is deprecated, and has been replaced by the &#39;density&#39; kwarg.
  warnings.warn(&quot;The &#39;normed&#39; kwarg is deprecated, and has been &quot;





&lt;matplotlib.axes._subplots.AxesSubplot at 0x17ae619fbe0&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_32_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(x,bins=<span class="number">20</span>, kde=<span class="literal">False</span>,rug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\matplotlib\axes\_axes.py:6462: UserWarning: The &#39;normed&#39; kwarg is deprecated, and has been replaced by the &#39;density&#39; kwarg.
  warnings.warn(&quot;The &#39;normed&#39; kwarg is deprecated, and has been &quot;





&lt;matplotlib.axes._subplots.AxesSubplot at 0x17ae5eddac8&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_33_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核密度估计</span></span><br><span class="line">sns.distplot(x,hist=<span class="literal">False</span>, kde=<span class="literal">True</span>,rug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x17ae4a1ce48&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_34_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 双变量分布</span></span><br><span class="line">mean, cov = [<span class="number">0</span>, <span class="number">1</span>], [(<span class="number">1</span>, <span class="number">.5</span>), (<span class="number">.5</span>, <span class="number">1</span>)]</span><br><span class="line">data = np.random.multivariate_normal(mean, cov, <span class="number">200</span>)</span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(x=<span class="string">&quot;x&quot;</span>,y=<span class="string">&quot;y&quot;</span>,data=df)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.collections.PathCollection at 0x17ae6287e48&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_36_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.jointplot(x=<span class="string">&quot;x&quot;</span>,y=<span class="string">&quot;y&quot;</span>,data=df)</span><br></pre></td></tr></table></figure>

<pre><code>D:\an\lib\site-packages\matplotlib\axes\_axes.py:6462: UserWarning: The &#39;normed&#39; kwarg is deprecated, and has been replaced by the &#39;density&#39; kwarg.
  warnings.warn(&quot;The &#39;normed&#39; kwarg is deprecated, and has been &quot;
D:\an\lib\site-packages\matplotlib\axes\_axes.py:6462: UserWarning: The &#39;normed&#39; kwarg is deprecated, and has been replaced by the &#39;density&#39; kwarg.
  warnings.warn(&quot;The &#39;normed&#39; kwarg is deprecated, and has been &quot;





&lt;seaborn.axisgrid.JointGrid at 0x17ae6246ba8&gt;
</code></pre>
<p><img src="https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/output_37_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="comment"># 使用对应得图表</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"><span class="comment"># 0.5版本才这么用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚假的数据集</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(<span class="string">&quot;&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.choose(), Faker.values())])</span><br><span class="line">    .set_colors([<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;purple&quot;</span>])</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Pie-设置颜色&quot;</span>))</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;: &#123;c&#125;&quot;</span>))</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>对象 = (<br>    类()<br>    .add()  # 数据<br>    .set_global_opts() # 全局配置<br>    .set_series_opts() # 局部配置<br>    .render()  # 保存html   render.html<br>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示</span></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure>

<center>
<a href="" class="wpac-cr">顺便评个分吧！👇</a>
<div id="wpac-rating"></div>
<script type="text/javascript">
wpac_init = window.wpac_init || [];
wpac_init.push({widget: 'Rating', id: 31073});
(function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = 'https://alogomachine-md-pic.oss-cn-guangzhou.aliyuncs.com/wb/pingjia.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
})();
</script>
</center>
]]></content>
      <categories>
        <category>数据可视化</category>
        <category>Seaborn</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
</search>
